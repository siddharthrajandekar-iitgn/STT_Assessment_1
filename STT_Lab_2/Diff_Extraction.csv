"Hash","Message","Filename","Source_Code_Old","Source_Code_New","Diff","LLM_Inference","Rectified_Message"
"b64869eae4c9b5962b0e71d3b060709c20931214","Let buttons fall back to the original color when deselected","paint.css","Screen {     overflow: auto; }  #paint {     layout: grid;     grid-size: 2;     grid-gutter: 1 2;     grid-columns: 20 1fr;     grid-rows: 1fr;     margin: 0 0;     min-height: 25;     min-width: 26;     height: 100%; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 1 1;     /* min-height: 25; */     /* min-width: 26; */     height: 100%; }  Button {     width: 100%;     height: 100%; } ","Screen {     overflow: auto; }  #paint {     layout: grid;     grid-size: 2;     grid-gutter: 1 2;     grid-columns: 20 1fr;     grid-rows: 1fr;     margin: 0 0;     min-height: 25;     min-width: 26;     height: 100%; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 1 1;     /* min-height: 25; */     /* min-width: 26; */     height: 100%; }  #tools_box Button.selected {     background: #aaa; }  Button {     width: 100%;     height","@@ -26 6 +26 10 @@ Screen {      height: 100%;  }   +#tools_box Button.selected { +    background: #aaa; +} +  Button {      width: 100%;      height: 100%; ","add button background to example","add let buttons fall back to the original color wh"
"b64869eae4c9b5962b0e71d3b060709c20931214","Let buttons fall back to the original color when deselected","paint.py","from enum import Enum  from textual import events from textual.app import App  ComposeResult from textual.containers import Container from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.widgets import Button  Static  class Tool(Enum):     """"""The tools available in the Paint app.""""""     free_form_select = 1     select = 2     eraser = 3     fill = 4     pick_color = 5     magnifier = 6     pencil = 7     brush = 8     airbrush = 9     text = 10     line = 11     cu","from enum import Enum  from textual import events from textual.app import App  ComposeResult from textual.containers import Container from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.widgets import Button  Static  class Tool(Enum):     """"""The tools available in the Paint app.""""""     free_form_select = 1     select = 2     eraser = 3     fill = 4     pick_color = 5     magnifier = 6     pencil = 7     brush = 8     airbrush = 9     text = 10     line = 11     cu","@@ -115 9 +115 8 @@ class PaintApp(App):        def watch_selected_tool(self  old_selected_tool: Tool  selected_tool: Tool) -> None:          """"""Called when selected_tool changes."""""" -        # TODO: revert to default color defined by built-in style -        self.query_one(""#tool_button_"" + old_selected_tool.name).styles.background = ""#555"" -        self.query_one(""#tool_button_"" + selected_tool.name).styles.background = ""#aaa"" +        self.query_one(""#tool_button_"" + old_selected_tool.name).classes = ""too","update paintapp.py","update let buttons fall back to the original color"
"ad111e5d6c044ffbd562c5c35019f82e934d7620","Refactor: extract tool handling from Canvas  I wanted to avoid duplicating tool-related state between PaintApp and Canvas  and prepare for adding different tools with more state and which will want to live in a separate file.  This makes it slower  when running with `textual run --dev paint.py`; when running with `python3 paint.py`  it's fine. When running in dev mode with `textual console` devtool connected  it's extremely much slower. But if it was faster  you'd have more messages to scroll through  ha. So it's a tradeoff.* *Ideally you want it to be fast and for the logs to be compacted.  In the future  I could bypass the message system for performance  but for now I think it's better to stay idiomatic.","paint.py","from enum import Enum  from rich.segment import Segment from rich.style import Style from textual import events from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widgets import Button  Static  class Tool(Enum):     """"""The tools available in the Paint app.""""""  ","from enum import Enum  from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widgets import Button  Static  class Tool(Enum)","@@ -3 6 +3 7 @@ from enum import Enum  from rich.segment import Segment  from rich.style import Style  from textual import events +from textual.message import Message  MessageTarget  from textual.app import App  ComposeResult  from textual.containers import Container  Horizontal  Vertical  from textual.geometry import Size @@ -170 25 +171 60 @@ class AnsiArtDocument:              ansi += ""\033[0m\r""          return ansi   +def bresenham_walk(x0: int  y0: int  x1: int  y1: int  callback) -> None: +    """"""Bre","add missing docstring","add refactor : extract tool handling from canvas i"
"6d17f085f5a655ef42bce2569ba3f0b1b1c497e9","Debug: show regions when undoing/redoing (currently the whole canvas)","paint.py","from enum import Enum  from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widgets import Button  Static  ","from enum import Enum from random import randint from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widge","@@ -1 5 +1 5 @@  from enum import Enum - +from random import randint  from rich.segment import Segment  from rich.style import Style  from textual import events @@ -166 6 +166 7 @@ class AnsiArtDocument:          if target_region is None:              target_region = Region(0  0  source_region.width  source_region.height)          offset = Offset(target_region.x - source_region.x  target_region.y - source_region.y) +        random_color = ""rgb("" + str(randint(0  255)) + "" "" + str(randint(0  255)) + "" "" + st","add ansiart example for the color selection","add debug : show regions when undoing/redoing ( cu"
"0aaa9db8395aff4b4df8f6544ab8562de1d9ceaf","Make region update debug a flag","paint.py","from enum import Enum from random import randint from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widge","from enum import Enum from random import randint from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widge","@@ -149 6 +149 9 @@ class ColorsBox(Container):                      button.styles.background = color                      yield button   + +debug_region_updates = True +  class AnsiArtDocument:      """"""A document that can be rendered as ANSI.""""""   @@ -167 21 +170 22 @@ class AnsiArtDocument:              target_region = Region(0  0  source_region.width  source_region.height)          source_offset = source_region.offset          target_offset = target_region.offset -        random_color = ""rgb("" + str(rand","add ansiart document for the color box","update make region update debug a flag add ansiart"
"6d5430ad2eae8be87728ff582d39610aaf9ed040","Fix error due to action regions exceeding canvas bounds","paint.py","from enum import Enum from random import randint from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widge","from enum import Enum from random import randint from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widge","@@ -420 6 +420 7 @@ class PaintApp(App):          self.undos.append(action)          region = self.stamp_brush(event.mouse_down_event.x  event.mouse_down_event.y  region)          action.region = region +        action.region = action.region.intersection(Region(0  0  self.image.width  self.image.height))          action.update(self.image_at_start)          self.canvas.refresh(region)          event.stop() @@ -434 6 +435 7 @@ class PaintApp(App):                    # Update action region and image data      ","update action region on mouse down","update fix error due to action regions exceeding c"
"3e84ae7e17efd7cdf7d368f0c4a7be3974ed8949","Disable region update debug","paint.py","from enum import Enum from random import randint from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widge","from enum import Enum from random import randint from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip import Strip from textual.widget import Widget from textual.widge","@@ -150 7 +150 7 @@ class ColorsBox(Container):                      yield button     -debug_region_updates = True +debug_region_updates = False    class AnsiArtDocument:      """"""A document that can be rendered as ANSI."""""" @@ -316 7 +316 7 @@ class PaintApp(App):      show_colors_box = var(True)      selected_tool = var(Tool.pencil)      selected_color = var(palette[0]) -    selected_char = var(""#"") +    selected_char = var("" "")        undos = []      redos = [] ","add example for the color box example","add disable region update debug example for the co"
"303d6942f4badb851cc755a0c9d4b05ca94e610f","Switch out fill tool icon to avoid text row offset artifacts","paint.py","import re import sys from enum import Enum from random import randint from typing import List import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip impor","import re import sys from enum import Enum from random import randint from typing import List import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip impor","@@ -61 7 +61 7 @@ class Tool(Enum):              Tool.free_form_select: ""⚝""               Tool.select: ""⬚""               Tool.eraser: ""🧼""  -            Tool.fill: ""🫗""  +            Tool.fill: ""🌊""  # ""🫗"" causes jutting out in Ubuntu terminal  ""🪣"" causes the opposite in VS Code terminal              Tool.pick_color: ""💉""               Tool.magnifier: ""🔍""               Tool.pencil: ""✏️""  ","update tool.py","update switch out fill tool icon to avoid text row"
"3652b2bd8e1c905b4bb941a4280bf5e164313e9a","Add flood fill support  * Implemented the Fill With Color tool using the algorithm described as   ""combined-scan-and-fill span filler"" on Wikipedia. * I added handling for the affected region being None  which turned out more complicated than I would like...   Some cases may be able to be simplified or removed. * Also  I moved event.stop() to the top so I don't need to call it in multiple places when there are multiple return points.","paint.py","import re import sys from enum import Enum from random import randint from typing import List import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip impor","import re import sys from enum import Enum from random import randint from typing import List import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive import var  reactive from textual.strip impor","@@ -320 8 +320 9 @@ class Action:        def update(self  document: AnsiArtDocument) -> None:          """"""Grabs the image data from the current region of the document."""""" -        self.sub_image_before = AnsiArtDocument(self.region.width  self.region.height) -        self.sub_image_before.copy_region(document  self.region) +        if self.region: +            self.sub_image_before = AnsiArtDocument(self.region.width  self.region.height) +            self.sub_image_before.copy_region(document  self.region) ","fix image data update","add flood fill support * implement the fill with c"
"ba646f7cdb3e8d0bb6a445f0a762d3ad9fe3bbcb","Add textual screenshot to readme  This took a lot of trial and error to get this working. - First I had to figure out how to copy the terminal output as HTML.   I had to configure keybindings for Select All and Copy As HTML in   the Ubuntu terminal. - GitHub doesn't support line-height in markdown  so I came up with   using an SVG with <foreignObject> to contain the screenshot HTML. - GitHub doesn't support inline SVG  so I had to use <img>  that's fine.   An external file is cleaner anyways. - I spent a long time trying to fix the seams between rows of text.   `line-height: <font-size>` is not `line-height: 1`!   I think I tried `line-height: 1` first  but it wasn't working for some   reason so I tried a bajillion things  having mentally discounted it    before circling back to it and trying it again and it actually worked. - I spent a long time futzing about with SVG viewports and units. - The text was staggered due to some of the Unicode characters  so I   developed a script to fix that up. I managed to achieve a nice   development cycle for this  but only near the end of developing it.   Most of the time while working on it I was copying and pasting   the updated code into the console after hitting up up enter to   re-run grapheme-splitter's JS.   The next commit will apply this script. - All in all  getting this screenshot working took basically all day!   Compare that to my first day of progress on this project  having   never used the Textual framework before  and also having not used   Python for a while. In summary  coding is a land of contrasts. - VS Code's markdown rendering isn't working with the ch/lh units.","README.md"," textual-paint =============  What if MS Paint isn't retro enough? You need Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  and built with [Textual](https://textual.textualize.io/).  ## Features  - Open and save images 	- [ ] PNG (.png) 	- [ ] Bitmap (.bmp) 	- [x] ANSI (.ans) 		- only supports loading files saved by this program; ANSI files can vary a lot and even encode animations 	- no save dialog yet  you can only save a file opened via the command line - "," textual-paint =============  What if MS Paint isn't retro enough? You need Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  and built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support figure/figcaption in markdown. --> <table> <tr><td align=""center""> <img src=""screenshot.svg"" alt=""MS Paint like interface"" /> </td></tr> <tr><td align=""center"">Textual Paint terminal screen buffer in HTML in SVG in HTML.<br>This might not render correc","@@ -7 6 +7 14 @@ You need Paint in your terminal.    This is a TUI (Text User Interface) image editor  inspired by MS Paint  and built with [Textual](https://textual.textualize.io/).   +<!-- GitHub doesn't support figure/figcaption in markdown. --> +<table> +<tr><td align=""center""> +<img src=""screenshot.svg"" alt=""MS Paint like interface"" /> +</td></tr> +<tr><td align=""center"">Textual Paint terminal screen buffer in HTML in SVG in HTML.<br>This might not render correctly in your browser.</tr></td> +</table> ","add link to ms paint image","add textual screenshot to readme this took a lot o"
"ba646f7cdb3e8d0bb6a445f0a762d3ad9fe3bbcb","Add textual screenshot to readme  This took a lot of trial and error to get this working. - First I had to figure out how to copy the terminal output as HTML.   I had to configure keybindings for Select All and Copy As HTML in   the Ubuntu terminal. - GitHub doesn't support line-height in markdown  so I came up with   using an SVG with <foreignObject> to contain the screenshot HTML. - GitHub doesn't support inline SVG  so I had to use <img>  that's fine.   An external file is cleaner anyways. - I spent a long time trying to fix the seams between rows of text.   `line-height: <font-size>` is not `line-height: 1`!   I think I tried `line-height: 1` first  but it wasn't working for some   reason so I tried a bajillion things  having mentally discounted it    before circling back to it and trying it again and it actually worked. - I spent a long time futzing about with SVG viewports and units. - The text was staggered due to some of the Unicode characters  so I   developed a script to fix that up. I managed to achieve a nice   development cycle for this  but only near the end of developing it.   Most of the time while working on it I was copying and pasting   the updated code into the console after hitting up up enter to   re-run grapheme-splitter's JS.   The next commit will apply this script. - All in all  getting this screenshot working took basically all day!   Compare that to my first day of progress on this project  having   never used the Textual framework before  and also having not used   Python for a while. In summary  coding is a land of contrasts. - VS Code's markdown rendering isn't working with the ch/lh units.","screenshot.svg","","<svg xmlns=""http://www.w3.org/2000/svg"" width=""80ch"" height=""38lh"">   <style>     div      pre {       overflow: hidden;       margin: 0;       padding: 0;     }     svg {       font: 10px monospace;       line-height: 1;     }     span      font {       display: inline-block;     }   </style>   <script><![CDATA[     // To fix up the width of elements containing emojis and other symbols      // run `await fixPre()` in the browser console      // and replace the <pre>...</pre> in the XHTML with the result.  ","@@ -0 0 +1 105 @@ +<svg xmlns=""http://www.w3.org/2000/svg"" width=""80ch"" height=""38lh""> +  <style> +    div  +    pre { +      overflow: hidden; +      margin: 0; +      padding: 0; +    } +    svg { +      font: 10px monospace; +      line-height: 1; +    } +    span  +    font { +      display: inline-block; +    } +  </style> +  <script><![CDATA[ +    // To fix up the width of elements containing emojis and other symbols  +    // run `await fixPre()` in the browser console  +    // and replace the <pre>..","add missing style in fixpre example","add textual screenshot to readme this took a lot o"
"89e8c18dc430790ebdcb0a195f10ec788a7d4295","Apply SVG fix-up script (contained in the SVG)","screenshot.svg","<svg xmlns=""http://www.w3.org/2000/svg"" width=""80ch"" height=""38lh"">   <style>     div      pre {       overflow: hidden;       margin: 0;       padding: 0;     }     svg {       font: 10px monospace;       line-height: 1;     }     span      font {       display: inline-block;     }   </style>   <script><![CDATA[     // To fix up the width of elements containing emojis and other symbols      // run `await fixPre()` in the browser console      // and replace the <pre>...</pre> in the XHTML with the result.  ","<svg xmlns=""http://www.w3.org/2000/svg"" width=""80ch"" height=""38lh"">   <style>     div      pre {       overflow: hidden;       margin: 0;       padding: 0;     }     svg {       font: 10px monospace;       line-height: 1;     }     span      font {       display: inline-block;     }   </style>   <script><![CDATA[     // To fix up the width of elements containing emojis and other symbols      // run `await fixPre()` in the browser console      // and replace the <pre>...</pre> in the XHTML with the result.  ","@@ -60 33 +60 33 @@    <foreignObject x=""0"" y=""0"" width=""80ch"" height=""38lh"">      <div xmlns=""http://www.w3.org/1999/xhtml"">   -<pre><span style=""background-color:#DCE3E8"">                                                                                </span> +<pre xmlns=""http://www.w3.org/1999/xhtml""><span style=""background-color:#DCE3E8"">                                                                                </span>  <span style=""background-color:#DCE3E8""> </span><span style=""background-color:#DC","add missing space to missing foreignobject","add apply svg fix-up script ( contained in the svg"
"b5e0ec8438c4459de9337f6c1541b61967d7a3bb","Confirm overwriting files  A Textual layout bug is unfortunately making the Yes button HUGE  and the No button INVISIBLE  until you mouse over the dialog  which is pretty funny... ""<file> already exists. Do you want to replace it? [Yes]""","paint.css","Screen {     layers: window menu-popup; }  #paint {     layout: grid;     grid-size: 1;     grid-columns: 1fr;     grid-rows: 1fr 0; }  #main-horizontal-split {     layout: grid;     grid-size: 2;     grid-columns: 0 1fr;     grid-rows: 1fr;     margin: 0 0; }  .show_tools_box #main-horizontal-split {     grid-columns: 15 1fr; }  .show_colors_box #paint {     grid-rows: 1fr 6; }  #editing-area {     background: rgb(128  128  128); } .-dark-mode #editing-area {     background: $surface-lighten-2; }   #canvas","Screen {     layers: window menu-popup; }  #paint {     layout: grid;     grid-size: 1;     grid-columns: 1fr;     grid-rows: 1fr 0; }  #main-horizontal-split {     layout: grid;     grid-size: 2;     grid-columns: 0 1fr;     grid-rows: 1fr;     margin: 0 0; }  .show_tools_box #main-horizontal-split {     grid-columns: 15 1fr; }  .show_colors_box #paint {     grid-rows: 1fr 6; }  #editing-area {     background: rgb(128  128  128); } .-dark-mode #editing-area {     background: $surface-lighten-2; }   #canvas","@@ -197 3 +197 14 @@ Button {      width: auto;      height: auto;  } + +#overwrite_dialog .window_content { +    padding: 2 4; +    width: 40; +    height: 15; +} +#overwrite_dialog .window_content Button { +    width: auto; +    height: auto; +} + ","add padding to button","add confirm overwriting files a textual layout bug"
"b5e0ec8438c4459de9337f6c1541b61967d7a3bb","Confirm overwriting files  A Textual layout bug is unfortunately making the Yes button HUGE  and the No button INVISIBLE  until you mouse over the dialog  which is pretty funny... ""<file> already exists. Do you want to replace it? [Yes]""","paint.py","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","@@ -719 6 +719 30 @@ class PaintApp(App):          )          self.mount(window)       +    def confirm_overwrite(self  filename: str  callback) -> None: +        for old_window in self.query(""#overwrite_dialog"").nodes: +            old_window.close() +        window = Window( +            classes=""dialog""  +            id=""overwrite_dialog""  +            title=""Save As""  +        ) +        window.content.mount( +            Static(filename + "" already exists.""  markup=False)  +            Static(""Do you w","add confirm_overwrite to paintapp","add confirm overwriting files a textual layout bug"
"009a06e82b0d2d1d6a04bb2a15c271c1e637c5e9","VS Code: disable justMyCode debugger feature","launch.json","{ 	// Use IntelliSense to learn about possible attributes. 	// Hover to view descriptions of existing attributes. 	// For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387 	""version"": ""0.2.0""  	""configurations"": [ 		{ 			""name"": ""Run Textual App""  			""type"": ""python""  			""request"": ""launch""  			// Replace this with the output of `which textual` 			// TODO: is there a way to get this from the environment?? 			// or to use textual as ""module"" but still run the correct app? 			// I tried ","{ 	// Use IntelliSense to learn about possible attributes. 	// Hover to view descriptions of existing attributes. 	// For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387 	""version"": ""0.2.0""  	""configurations"": [ 		{ 			""name"": ""Run Textual App""  			""type"": ""python""  			""request"": ""launch""  			// Replace this with the output of `which textual` 			// TODO: is there a way to get this from the environment?? 			// or to use textual as ""module"" but still run the correct app? 			// I tried ","@@ -15 7 +15 7 @@  			""program"": ""${userHome}/.local/bin/textual""   			""args"": [""run""  ""--dev""  ""paint.py""]   			""console"": ""integratedTerminal""  -			""justMyCode"": true +			""justMyCode"": false  		}   		{  			""name"": ""Open A File in App""  @@ -24 7 +24 7 @@  			""program"": ""paint.py""   			""args"": [""LICENSE.txt""]   			""console"": ""integratedTerminal""  -			""justMyCode"": true +			""justMyCode"": false  		}  	]  } \ No newline at end of file ","add missing comment","add vs code : disable justmycode debugger feature"
"e988bf787f207534f94ddaa70d6709bd0614bb69","Move window layout fix to Window","paint.py","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","@@ -719 8 +719 6 @@ class PaintApp(App):          )          self.mount(window)          self.expand_directory_tree(window.content.query_one(""#save_as_directory_tree"")) -        # Fix for incorrect layout that would only resolve on mouse over -        self.set_timer(0.01  lambda: self.app.update_styles(window))        def expand_directory_tree(self  tree: DirectoryTree) -> None:          """"""Expand the directory tree to the target directory  either the folder of the open file or the current working directory","fix app crash when mouseover is pressed","update move window layout fix to window fix app cr"
"e988bf787f207534f94ddaa70d6709bd0614bb69","Move window layout fix to Window","windows.py","from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset  Region  Size from textual.reactive import var  reactive from textual.widgets import Button  Static  class WindowTitleBar(Container):     """"""A title bar widget.""""""      title = var([])      def __init__(self  title: str = """"  **kwargs) -> None:         """"""Initialize a title bar.""""""         super().__init__(**kwargs)         self.add","from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset  Region  Size from textual.reactive import var  reactive from textual.widgets import Button  Static  class WindowTitleBar(Container):     """"""A title bar widget.""""""      title = var([])      def __init__(self  title: str = """"  **kwargs) -> None:         """"""Initialize a title bar.""""""         super().__init__(**kwargs)         self.add","@@ -56 6 +56 10 @@ class Window(Container):          """"""Called when the widget is mounted.""""""          self.mount(self.title_bar)          self.mount(self.content) +        # Fix for incorrect layout that would only resolve on mouse over +        # (I peaked into mouse over handling and it calls update_styles.) +        # This can still briefly show the incorrect layout  since it relies on a timer. +        self.set_timer(0.01  lambda: self.app.update_styles(self))        # def compose(self) -> ComposeResul","fix incorrect layout on mouse over","update move window layout fix to window fix incorr"
"ddd89d367b24917b7855a57d9870c0f9d5dc494d","Hide brush preview when you stop hovering over the canvas","paint.py","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","@@ -528 6 +528 12 @@ class Canvas(Widget):              self.mouse_move_event = mouse_move_event              super().__init__()   +    class ToolPreviewStop(Message): +        """"""Message when the mouse leaves the canvas while previewing (not while drawing)."""""" + +        def __init__(self) -> None: +            super().__init__() +      def __init__(self  **kwargs) -> None:          """"""Initialize the canvas.""""""          super().__init__(**kwargs) @@ -554 6 +560 10 @@ class Canvas(Widget):          self.poi","add toolpreviewstop to canvas","add hide brush preview when you stop hovering over"
"8929ed14b646cf2827b6326a250a77c03c15bb93","Clear screen during development to avoid seeing fixed errors","launch.json","{ 	// Use IntelliSense to learn about possible attributes. 	// Hover to view descriptions of existing attributes. 	// For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387 	""version"": ""0.2.0""  	""configurations"": [ 		{ 			""name"": ""Run Textual App""  			""type"": ""python""  			""request"": ""launch""  			// Replace this with the output of `which textual` 			// TODO: is there a way to get this from the environment?? 			// or to use textual as ""module"" but still run the correct app? 			// I tried ","{ 	// Use IntelliSense to learn about possible attributes. 	// Hover to view descriptions of existing attributes. 	// For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387 	""version"": ""0.2.0""  	""configurations"": [ 		{ 			""name"": ""Run Textual App""  			""type"": ""python""  			""request"": ""launch""  			// Replace this with the output of `which textual` 			// TODO: is there a way to get this from the environment?? 			// or to use textual as ""module"" but still run the correct app? 			// I tried ","@@ -13 7 +13 7 @@  			// or to use textual as ""module"" but still run the correct app?  			// I tried a lot of variations of this  but none worked.  			""program"": ""${userHome}/.local/bin/textual""  -			""args"": [""run""  ""--dev""  ""paint.py""]  +			""args"": [""run""  ""--dev""  ""paint.py --clear-screen""]   			""console"": ""integratedTerminal""   			""justMyCode"": false  		}  @@ -24 7 +24 7 @@  			// ""program"": ""paint.py""   			// ""args"": [""LICENSE.txt""]   			""program"": ""${userHome}/.local/bin/textual""  -			""args"": [""run""  ""","add missing console option","add clear screen during development to avoid seein"
"8929ed14b646cf2827b6326a250a77c03c15bb93","Clear screen during development to avoid seeing fixed errors","paint.py","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","import os import re import sys import argparse from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from textual.reactive i","@@ -1136 6 +1136 12 @@ app = PaintApp()    parser = argparse.ArgumentParser(description='Paint in the terminal.')  parser.add_argument('--ascii-only-icons'  action='store_true'  help='Use only ASCII characters for tool icons') +# This flag is for development  because it's very confusing +# to see the error message from the previous run  +# when a problem is actually solved. +# There are enough ACTUAL ""that should have worked!!"" moments to deal with. +# I really don't want false ones mixed in. You want to re","add flag to use ascii characters for tool icons","add clear screen during development to avoid seein"
"7497a7dd5b16d3e102e10008b9a43d738e237830","Tweak overwrite dialog layout  - Reduce height  to fit to content - Reduce button width  to avoid clipping","paint.css","Screen {     layers: window menu-popup; }  #paint {     layout: grid;     grid-size: 1;     grid-columns: 1fr;     grid-rows: 1fr 0; }  #main-horizontal-split {     layout: grid;     grid-size: 2;     grid-columns: 0 1fr;     grid-rows: 1fr;     margin: 0 0; }  .show_tools_box #main-horizontal-split {     grid-columns: 15 1fr; }  .show_colors_box #paint {     grid-rows: 1fr 6; }  #editing-area {     background: rgb(128  128  128); } .-dark-mode #editing-area {     background: $surface-lighten-2; }   #canvas","Screen {     layers: window menu-popup; }  #paint {     layout: grid;     grid-size: 1;     grid-columns: 1fr;     grid-rows: 1fr 0; }  #main-horizontal-split {     layout: grid;     grid-size: 2;     grid-columns: 0 1fr;     grid-rows: 1fr;     margin: 0 0; }  .show_tools_box #main-horizontal-split {     grid-columns: 15 1fr; }  .show_colors_box #paint {     grid-rows: 1fr 6; }  #editing-area {     background: rgb(128  128  128); } .-dark-mode #editing-area {     background: $surface-lighten-2; }   #canvas","@@ -211 10 +211 11 @@ Button {    #overwrite_dialog .window_content {      width: 50; -    height: 15; +    height: auto;  }  #overwrite_dialog .window_content Button {      width: auto; +    min-width: 10;      height: auto;      margin-right: 1;      margin-top: 1; @@ -225 6 +226 10 @@ Button {      padding-left: 2;  }  #overwrite_dialog .main_content { -    padding: 2 2; +    padding: 1 2;      width: 1fr; +    height: auto; +} +#overwrite_dialog .window_content Horizontal { +    height: auto;  } ","add missing style in button.js","update tweak overwrite dialog layout - reduce heig"
"2e4d6e9c1629e50e198a850e6dc0f1a56f6905d6","Fix several errors in JS->Python translation","parse_rc_file.py","# Based on https://github.com/1j01/jspaint/blob/4a9163fb6dbb321ef07ed85bb5d5ce980e1a4866/localization/parse-rc-file.js # Originally based on https://github.com/evernote/serge/blob/master/lib/Serge/Engine/Plugin/parse_rc.pm  def parse_rc_file(rc_file_text  callback=None  lang=None):     strings = []     menu = dialog = stringtable = False     block_level = 0     id_str = dialog_id = hint = orig_str = None      for line in rc_file_text.splitlines():         norm_line = line.strip().replace(r'[\t ]+'  ' ').rep","# Based on https://github.com/1j01/jspaint/blob/4a9163fb6dbb321ef07ed85bb5d5ce980e1a4866/localization/parse-rc-file.js # Originally based on https://github.com/evernote/serge/blob/master/lib/Serge/Engine/Plugin/parse_rc.pm  import re  def parse_rc_file(rc_file_text  callback=None  lang=None):     strings = []     menu = dialog = stringtable = False     block_level = 0     id_str = dialog_id = hint = orig_str = None      for line in rc_file_text.splitlines():         norm_line = re.sub(r'[\t ]+'  ' '  line.s","@@ -1 6 +1 8 @@  # Based on https://github.com/1j01/jspaint/blob/4a9163fb6dbb321ef07ed85bb5d5ce980e1a4866/localization/parse-rc-file.js  # Originally based on https://github.com/evernote/serge/blob/master/lib/Serge/Engine/Plugin/parse_rc.pm   +import re +  def parse_rc_file(rc_file_text  callback=None  lang=None):      strings = []      menu = dialog = stringtable = False @@ -8 7 +10 8 @@ def parse_rc_file(rc_file_text  callback=None  lang=None):      id_str = dialog_id = hint = orig_str = None        for l","add parse_rc_file example","add fix several errors in js- > python translation"
"2e4d6e9c1629e50e198a850e6dc0f1a56f6905d6","Fix several errors in JS->Python translation","preprocess.py","import os import re import glob import json  from parse_rc_file import parse_rc_file   base_lang = ""en"" available_langs = [dir for dir in os.listdir(os.path.dirname(__file__)) if re.match(r""^\w+(-\w+)?$""  dir)] target_langs = [lang for lang in available_langs if lang != base_lang]  print(""Target languages:""  target_langs)  # & defines accelerators (hotkeys) in menus and buttons and things  which get underlined in the UI. # & can be escaped by doubling it  e.g. ""&Taskbar && Start Menu"" def index_of_hotkey(te","import os import re import glob import json  from parse_rc_file import parse_rc_file   base_lang = ""en"" available_langs = [dir for dir in os.listdir(os.path.dirname(__file__)) if re.match(r""^\w+(-\w+)?$""  dir)] target_langs = [lang for lang in available_langs if lang != base_lang]  print(""Target languages:""  target_langs)  # & defines accelerators (hotkeys) in menus and buttons and things  which get underlined in the UI. # & can be escaped by doubling it  e.g. ""&Taskbar && Start Menu"" def index_of_hotkey(te","@@ -17 14 +17 17 @@ print(""Target languages:""  target_langs)  def index_of_hotkey(text):  	# Returns the index of the ampersand that defines a hotkey  or -1 if not present.  	# The space here handles beginning-of-string matching and counteracts the offset for the [^&] so it acts like a negative lookbehind -    return f"" {text}"".find(re.compile(r""[^&]&[^&\s]"")) +    m = re.search(r""[^&]&[^&\s]""  f"" {text}"") +    return m.start() if m else -1    def has_hotkey(text):      return index_of_hotkey(text) != -1   ","add comment about the position of the first hotkey","add fix several errors in js- > python translation"
"8c4a5bf583d6d735152a643460000c2626e59e2f","Handle errors when opening a file","paint.py","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","@@ -1008 19 +1008 28 @@ class PaintApp(App):                  if self.filename and os.path.samefile(filename  self.filename):                      window.close()                      return -                with open(filename  ""r"") as f: -                    content = f.read() # f is out of scope in go_ahead() -                    def go_ahead(): -                        self.action_new(force=True) -                        self.image = AnsiArtDocument.from_ansi(content) -                        self.canvas.","fix paint app","update handle errors when opening a file fix paint"
"e715a28e59558e46aca7fb660602cce71d16cab3","Fix error when hitting OK button with no callback","paint.py","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","@@ -912 7 +912 8 @@ class PaintApp(App):          self.bell()            def handle_button(button): -            callback(button) +            if callback: +                callback(button)              window.close()            window = DialogWindow( ","add example","add fix error when hitting ok button with no callb"
"fcf44a8b940940d34add2159069b05ffda267401","Handle errors when saving a file","paint.py","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","@@ -770 9 +770 14 @@ class PaintApp(App):          self.cancel_preview()          if self.filename:              ansi = self.image.get_ansi() -            with open(self.filename  ""w"") as f: -                f.write(ansi) -            self.saved_undo_count = len(self.undos) +            try: +                with open(self.filename  ""w"") as f: +                    f.write(ansi) +                self.saved_undo_count = len(self.undos) +            except OSError as e: +                self.warning_message_bo","update paint.py","update handle errors when saving a file update pai"
"f1a4b9736e2241195e8102e373e9543383f7e871","Improve error handling for saving and loading files","paint.py","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","@@ -769 8 +769 8 @@ class PaintApp(App):          """"""Save the image to a file.""""""          self.cancel_preview()          if self.filename: -            ansi = self.image.get_ansi()              try: +                ansi = self.image.get_ansi()                  with open(self.filename  ""w"") as f:                      f.write(ansi)                  self.saved_undo_count = len(self.undos) @@ -1018 9 +1018 16 @@ class PaintApp(App):                      with open(filename  ""r"") as f:                          ","add comment","add improve error handling for saving and loading"
"1659f2d75bd3a27fb4af586f76afc0decfc3c88b","Improve error handling for saving files","paint.py","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","import os import re import sys import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.css.query import NoMatches from tex","@@ -765 19 +765 24 @@ class PaintApp(App):          """"""Start the save action  but don't wait for the Save As dialog to close if it's a new file.""""""          self._not_garbage1 = asyncio.create_task(self.save())   -    async def save(self) -> None: +    async def save(self  from_save_as=False) -> None:          """"""Save the image to a file.""""""          self.cancel_preview() +        dialog_title = _(""Save As"") if from_save_as else _(""Save"")          if self.filename:              try:                  ansi = ","add a new example app for the save action","add improve error handling for saving files a new"
"d2ab602ff56306d3152962801c6b9aea55b59fc2","Dynamically avoid cutting off the rightmost character in menus  Before I had it wide enough for English  with a max-width  but not all languages. This is a better solution.","paint.css","Screen {     layers: window menu-popup; }  #paint {     layout: grid;     grid-size: 1;     grid-columns: 1fr;     grid-rows: 1fr 0; }  #main-horizontal-split {     layout: grid;     grid-size: 2;     grid-columns: 0 1fr;     grid-rows: 1fr;     margin: 0 0; }  .show_tools_box #main-horizontal-split {     grid-columns: 15 1fr; }  .show_colors_box #paint {     grid-rows: 1fr 6; }  #editing-area {     background: rgb(128  128  128); } .-dark-mode #editing-area {     background: $surface-lighten-2; }   #canvas","Screen {     layers: window menu-popup; }  #paint {     layout: grid;     grid-size: 1;     grid-columns: 1fr;     grid-rows: 1fr 0; }  #main-horizontal-split {     layout: grid;     grid-size: 2;     grid-columns: 0 1fr;     grid-rows: 1fr;     margin: 0 0; }  .show_tools_box #main-horizontal-split {     grid-columns: 15 1fr; }  .show_colors_box #paint {     grid-rows: 1fr 6; }  #editing-area {     background: rgb(128  128  128); } .-dark-mode #editing-area {     background: $surface-lighten-2; }   #canvas","@@ -118 8 +118 9 @@ Screen {      /* calc isn't supported  and this should be determined by the y position anyways  which is set in python */      /* max-height: calc(100vh - 3); */      max-height: 90vh; -    /* width: auto doesn't account for the scrollbar... */ -    /* This can cut off a character  but it's not as ugly as having a horizontal scrollbar */ +    /* width: auto doesn't account for the vertical scrollbar... */ +    /* which means it would make a horizontal scrollbar or cut off a character on ","fix typo in doc","update dynamically avoid cutting off the rightmost"
"365eb6e4c7f3c872f8c2df319b8626ee8e41fb33","Dynamically position menus instead of guessing  I must've missed this property when looking through the properties in the debugger before.","menus.py","import re from enum import Enum from typing import List from textual import events from textual.message import Message  MessageTarget from textual.app import ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.reactive import var  reactive from textual.widget import Widget from textual.widgets import Button  Static  def to_snake_case(name):     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z]","import re from enum import Enum from typing import List from textual import events from textual.message import Message  MessageTarget from textual.app import ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.geometry import Offset  Region  Size from textual.reactive import var  reactive from textual.widget import Widget from textual.widgets import Button  Static  def to_snake_case(name):     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z]","@@ -80 12 +80 7 @@ class Menu(Container):          self.parent_menu = parent_menu          self.parent_menu_item = parent_menu_item          self.add_class(""menu_popup"") -        # I don't see any way to get the position of widgets on screen. -        # self.style.offset = (parent_menu.x  parent_menu.y + parent_menu.height) -        # So  guess it based on the position in the list of items  works for one level. -        menu_bar_height = 3 -        menu_bar_item_width = 8 -        self.styles.offset = (menu","fix menu bar position","update dynamically position menus instead of guess"
"adcaed47cddcbc1150bd08e8eb8c87ec7dfddadf","Handle base language (English) better  - Don't log an error about a missing language file at startup. - Don't append to untranslated.txt for strings that don't need   translation because they're already in the target language.   I could use an early return for this too  but it's not important.","i18n.py","from typing import Optional import json import re  translations = {} current_language = ""en""  def get_direction() -> str: 	""""""Get the text direction for the current language."""""" 	if current_language in [""ar""  ""he""]: 		return ""rtl"" 	return ""ltr""  def load_language(language_code: str): 	""""""Load a language from the translations directory."""""" 	global translations 	translations = {} 	try: 		with open(f""localization/{language_code}/localizations.js""  ""r"") as f: 			# find the JSON object 			js = f.read() 			start ","from typing import Optional import json import re  translations = {} base_language = ""en"" current_language = base_language  def get_direction() -> str: 	""""""Get the text direction for the current language."""""" 	if current_language in [""ar""  ""he""]: 		return ""rtl"" 	return ""ltr""  def load_language(language_code: str): 	""""""Load a language from the translations directory."""""" 	global translations 	translations = {} 	if language_code == base_language: 		return 	try: 		with open(f""localization/{language_code}/localiz","@@ -3 7 +3 8 @@ import json  import re    translations = {} -current_language = ""en"" +base_language = ""en"" +current_language = base_language    def get_direction() -> str:  	""""""Get the text direction for the current language."""""" @@ -15 6 +16 8 @@ def load_language(language_code: str):  	""""""Load a language from the translations directory.""""""  	global translations  	translations = {} +	if language_code == base_language: +		return  	try:  		with open(f""localization/{language_code}/localizations.js""  ""r"") as f:","add docs for load_language","add handle base language ( english ) better - do n"
"ac10d5e50092800f7dbc68019fe8257b9107a169","Tweak error messages to use colons for clarity","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","@@ -56 9 +56 9 @@ def restart_program():              try:                  os.close(handler.fd)              except Exception as e: -                print(""Error closing file descriptor""  handler.fd  e) +                print(f""Error closing file descriptor ({handler.fd}):""  e)      except Exception as e: -        print(""Error closing file descriptors""  e) +        print(""Error closing file descriptors:""  e)        # python = sys.executable      # os.execl(python  python  *sys.argv) ","add a comment","add tweak error messages to use colons for clarity"
"c3763523bd59bbb670409baadf60ba17df0a74ea","Visually debug IndexError...  The canvas size isn't getting updated (fully) when loading a document.","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","@@ -771 9 +771 15 @@ class Canvas(Widget):          if self.magnifier_preview_region:              inner_magnifier_preview_region = self.magnifier_preview_region.shrink((1  1  1  1))          for x in range(self.size.width): -            bg = self.image.bg[y // self.magnification][x // self.magnification] -            fg = self.image.fg[y // self.magnification][x // self.magnification] -            ch = self.image.ch[y // self.magnification][x // self.magnification] +            try: +                bg = s","add missing class","add visually debug indexerror ... the canvas size"
"a33dd153ce6f0f995ed25aaa08847138b11721f9","I tried to fix flickering when using magnifier tool  - Move `self.canvas.magnification = self.magnification` up. It happens    due to internal call_after_refresh  and should happen  before scroll. - Remove note about other code in JS Paint  I think it's not needed. - Note my attempts at fixing flicker  which were unsuccessful  so that   I don't try the exact same things later  and feel stupid    and so I don't accrue so many branches.","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","@@ -1502 8 +1502 13 @@ class PaintApp(App):          prev_magnification = self.magnification          prospective_magnification = self.get_prospective_magnification()   -        # This had other code in a set_magnification function in JS Paint  not sure yet if it's important +        # TODO: fix flickering. +        # The canvas resize and scroll each cause a repaint. +        # I tried using a batch_update  but it prevented the layout recalculation +        # needed for the scroll to work correctly. +     ","fix a bug in paint app","fix i tried to flickering when using magnifier too"
"433fa68a21abf7217511cfc9af72cf234b3c4f3a","Refactor anti-garbage-collection Task reference keeping  Now it's really verbose  but I don't have to worry about reusing the same name twice. Or coming up with new  fun ones.  https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task  > Important: Save a reference to the result of this function  to avoid a task disappearing mid-execution. The event loop only keeps weak references to tasks. A task that isn’t referenced elsewhere may get garbage collected at any time  even before it’s done. For reliable “fire-and-forget” background tasks  gather them in a collection: > > background_tasks = set() > > for i in range(10): >     task = asyncio.create_task(some_coro(param=i)) > >     # Add task to the set. This creates a strong reference. >     background_tasks.add(task) > >     # To prevent keeping references to finished tasks forever  >     # make each task remove its own reference from the set after >     # completion: >     task.add_done_callback(background_tasks.discard)","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","@@ -95 7 +95 9 @@ class RestartHandler(PatternMatchingEventHandler):              # app.call_from_thread(app.action_reload)              # So... just do both?              try: -                app._dont_gc = asyncio.create_task(app.action_reload()) +                task = asyncio.create_task(app.action_reload()) +                app.background_tasks.add(task) +                task.add_done_callback(app.background_tasks.discard)              except Exception as e:                  print(""Error reloading (A)","fix crash when action_reload fails","add refactor anti-garbage-collection task referenc"
"8e82203bb57ecff3e8c034d66ceb111328978a2e","Note another attempt at fixing flickering when using the magnifier tool  I tried `refresh(layout=True  repaint=False)` before `_scroll_to`  but no luck.","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","@@ -1467 10 +1467 15 @@ class PaintApp(App):                  (y - h / 2) * self.magnification / prev_magnification                   animate=False               ) -            # The same thing but without call_after_refresh... -            # Doesn't work correctly  because the layout isn't updated yet. -            # And if I call self.screen._refresh_layout() here  -            # it's back to the flickering. +            # `scroll_to` uses `call_after_refresh`. +            # `_scroll_to` is the same thin","add example","add note another attempt at fix flickering when us"
"c076a1b5de8ef530aa9d8717157b35edabc8c86c","Simplify further and fix Toolbox hiding behavior  Yay  this is how simple I originally thought it was going to be.","paint.css","Screen {     layers: window menu-popup; }  #paint {     layout: grid;     grid-size: 1;     grid-columns: 1fr;     grid-rows: 1fr 6; }  #main_horizontal_split {     layout: grid;     grid-size: 2;     grid-columns: 15 1fr;     grid-rows: 1fr;     margin: 0 0; }  #editing_area {     background: rgb(128  128  128); } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutt","Screen {     layers: window menu-popup; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128); } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width: 15;     height: 100%;     /* can't have a","@@ -3 21 +3 15 @@ Screen {  }    #paint { -    layout: grid; -    grid-size: 1; -    grid-columns: 1fr; -    grid-rows: 1fr 6; +    layout: vertical;  }    #main_horizontal_split { -    layout: grid; -    grid-size: 2; -    grid-columns: 15 1fr; -    grid-rows: 1fr; -    margin: 0 0; +    layout: horizontal;  }    #editing_area { +    width: 1fr;      background: rgb(128  128  128);  }  .-dark-mode #editing_area { @@ -38 6 +32 7 @@ Screen {      grid-columns: 6;      grid-rows: 3;      padding: 0 1; +    wi","add missing style to example","fix simplify further and toolbox hiding behavior y"
"1eea87c6c96a6651f37fff39424ecaaf9bc4dca6","Fix error if dragging from off the canvas and releasing mouse over it","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","@@ -1879 7 +1879 7 @@ class PaintApp(App):              # Done dragging selection              self.selection_drag_offset = None              return -        if self.selected_tool == Tool.select: +        if self.selected_tool == Tool.select and self.mouse_at_start:              select_region = self.get_select_region(self.mouse_at_start  event.mouse_up_event.offset)              if self.image.selection:                  # This shouldn't happen  because it should meld ","fix selection drawing in the example","update fix error if dragging from off the canvas a"
"5b2e4e0f831744a0f10cc8308c0511d0d63e73f6","Make warning into an assertion","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual.app import App  ComposeRes","@@ -1795 9 +1795 7 @@ class PaintApp(App):          if self.selected_tool == Tool.select:              if self.selection_drag_offset:                  sel = self.image.selection -                if sel is None: -                    print(""WARNING: selection_drag_offset is set but there is no selection"") -                    return +                assert sel is not None  ""selection_drag_offset should only be set if there's a selection""                  offset = (                      self.selection_drag_off","update paintapp.py","update make warning into an assertion update paint"
"27c9646b20d0b83004d020c31ca18ec209336ed5","DRY window closing and make type checker happy with an assertion","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual","@@ -1250 6 +1250 12 @@ class PaintApp(App):              self.undos.append(undo_action)              self.canvas.refresh(layout=True)   +    def close_windows(self  selector: str) -> None: +        """"""Close all windows matching the CSS selector."""""" +        for window in self.query(selector).nodes: +            assert isinstance(window  Window)  f""Expected a Window for query '{selector}'  but got {window.css_identifier}"" +            window.close() +      def action_save(self) -> None:          """"""Start the","add a missing docstring","add dry window closing and make type checker happy"
"da62add6c14ea46f988c86bb3e8e5be9ea23df6b","Avoid ""possibly unbound"" errors","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual","@@ -456 6 +456 7 @@ class AnsiArtDocument:              target_region = Region(0  0  source_region.width  source_region.height)          source_offset = source_region.offset          target_offset = target_region.offset +        random_color: Optional[str] = None # avoid ""possibly unbound""          if debug_region_updates:              random_color = ""rgb("" + str(randint(0  255)) + "" "" + str(randint(0  255)) + "" "" + str(randint(0  255)) + "")""          for y in range(target_region.height): @@ -465 6 +466 7 @","add debug_region_updates example","add avoid `` possibly unbound '' errors debug_regi"
"a8f174eb8ef3a02198ff7f5a05b0b2cdb0087f16","Fix the last type checking error  and simply --reload-on-changes  Hopefully this makes it more robust as well...","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message  MessageTarget from textual","@@ -79 35 +79 16 @@ class RestartHandler(PatternMatchingEventHandler):              return          print(""Reloading due to FS change:""  event.event_type  event.src_path)          app.screen.styles.background = ""red"" -        # Doesn't include save prompt -        # restart_program() -        # Includes save prompt -        try: -            # None of these work: -            # app.action_reload() -            # app.run_action(""reload"") -            # app.set_timer(0.1  app.action_reload) -            # app","update restarthandler.py","fix the last type checking error   and simply -- r"
"9f06373cb759db4049878b04280b891a7c19aeea","Add a bunch more type checking hints/assertions","parse_rc_file.py","# Based on https://github.com/1j01/jspaint/blob/4a9163fb6dbb321ef07ed85bb5d5ce980e1a4866/localization/parse-rc-file.js # Originally based on https://github.com/evernote/serge/blob/master/lib/Serge/Engine/Plugin/parse_rc.pm  import re  def parse_rc_file(rc_file_text  callback=None  lang=None):     strings = []     menu = dialog = stringtable = False     block_level = 0     id_str = dialog_id = hint = orig_str = None      for line in rc_file_text.splitlines():         norm_line = re.sub(r'[\t ]+'  ' '  line.s","# Based on https://github.com/1j01/jspaint/blob/4a9163fb6dbb321ef07ed85bb5d5ce980e1a4866/localization/parse-rc-file.js # Originally based on https://github.com/evernote/serge/blob/master/lib/Serge/Engine/Plugin/parse_rc.pm  import re  def parse_rc_file(rc_file_text: str) -> list[str]:     """"""     Parses a Windows RC file and returns a list of strings.     """"""     strings = []     menu = dialog = stringtable = False     block_level = 0     id_str = dialog_id = hint = orig_str = None      for line in rc_file_","@@ -3 7 +3 10 @@    import re   -def parse_rc_file(rc_file_text  callback=None  lang=None): +def parse_rc_file(rc_file_text: str) -> list[str]: +    """""" +    Parses a Windows RC file and returns a list of strings. +    """"""      strings = []      menu = dialog = stringtable = False      block_level = 0 ","add missing docstring","add a bunch more type checking hints/assertions ad"
"9f06373cb759db4049878b04280b891a7c19aeea","Add a bunch more type checking hints/assertions","paint.py","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message from textual.app import App","import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import List  Optional  Callable  Iterator  Sequence  Tuple  TypeAlias from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message from t","@@ -6 7 +6 7 @@ import argparse  import asyncio  from enum import Enum  from random import randint  random -from typing import List  Optional  Callable  Iterator  Tuple +from typing import List  Optional  Callable  Iterator  Sequence  Tuple  TypeAlias  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED  from watchdog.observers import Observer  import stransi @@ -18 6 +18 7 @@ from textual.app import App  ComposeResult  from textual.containers impor","add missing imports","add a bunch more type checking hints/assertions ad"
"9f06373cb759db4049878b04280b891a7c19aeea","Add a bunch more type checking hints/assertions","windows.py","from typing import Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar(Container):    ","from typing import Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar(Container):    ","@@ -45 7 +45 7 @@ class Window(Container):        title = var([])   -    def __init__(self  *children  title: str = """"  **kwargs) -> None: +    def __init__(self  *children: Widget  title: str = """"  **kwargs) -> None:          """"""Initialize a window.""""""          super().__init__(*children  **kwargs)          self.mouse_at_drag_start = None @@ -83 7 +83 7 @@ class Window(Container):      #     """"""When using the context manager compose syntax  we want to attach nodes to the content container.""""""      #     se","add missing docstring to window class","add a bunch more type checking hints/assertions ad"
"505605c660ef47fe5f31a8eec35c09fc99734ca5","Add typing to preprocess.py script that I'm not using  ChatGPT did most of this for me. I just said ""Please add type annotations to this code. Surround the code in a Markdown code block."" and then fixed the Generator and the lambda.","preprocess.py","import os import re import glob import json  from parse_rc_file import parse_rc_file   base_lang = ""en"" available_langs = [dir for dir in os.listdir(os.path.dirname(__file__)) if re.match(r""^\w+(-\w+)?$""  dir)] target_langs = [lang for lang in available_langs if lang != base_lang]  print(""Target languages:""  target_langs)  # & defines accelerators (hotkeys) in menus and buttons and things  which get underlined in the UI. # & can be escaped by doubling it  e.g. ""&Taskbar && Start Menu"" def index_of_hotkey(te","import os import re import glob import json from typing import Generator  List  Dict  Any  from parse_rc_file import parse_rc_file   base_lang: str = ""en"" available_langs: List[str] = [dir for dir in os.listdir(os.path.dirname(__file__)) if re.match(r""^\w+(-\w+)?$""  dir)] target_langs: List[str] = [lang for lang in available_langs if lang != base_lang]  print(""Target languages:""  target_langs)  # & defines accelerators (hotkeys) in menus and buttons and things  which get underlined in the UI. # & can be esc","@@ -2 52 +2 52 @@ import os  import re  import glob  import json +from typing import Generator  List  Dict  Any    from parse_rc_file import parse_rc_file     -base_lang = ""en"" -available_langs = [dir for dir in os.listdir(os.path.dirname(__file__)) if re.match(r""^\w+(-\w+)?$""  dir)] -target_langs = [lang for lang in available_langs if lang != base_lang] +base_lang: str = ""en"" +available_langs: List[str] = [dir for dir in os.listdir(os.path.dirname(__file__)) if re.match(r""^\w+(-\w+)?$""  dir)] +target_langs","add missing type annotations","add typing to preprocess.py script that i 'm not u"
"a875c61fff1c3a597922bd9f56c78a4fa244abd4","Fix mouse coordinates with a better workaround","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -908 7 +908 7 @@ class Canvas(Widget):          self.select_preview_region: Optional[Region] = None        def on_mouse_down(self  event: events.MouseDown) -> None: -        # self.fix_mouse_event(event) # not needed  pointer isn't captured yet. +        self.fix_mouse_event(event) # not needed  pointer isn't captured yet.          event.x //= self.magnification          event.y //= self.magnification   @@ -921 10 +921 24 @@ class Canvas(Widget):          # or while the mouse is up.          # This seems","add documentation for mouseup and mouseup","update fix mouse coordinates with a better workaro"
"6259d11ec5fef41e79ed939642ca69cddf4e9a39","Switch to previous tool only on mouse up (for Magnifier)  This fixes accidentally activating the other tool when using the Magnifier  and matches the behavior of MS Paint.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -1908 7 +1908 6 @@ class PaintApp(App[None]):            if self.selected_tool == Tool.magnifier:              self.magnifier_click(event.mouse_down_event.x  event.mouse_down_event.y) -            self.selected_tool = self.return_to_tool              return            self.mouse_at_start = Offset(event.mouse_down_event.x  event.mouse_down_event.y) @@ -2379 7 +2378 7 @@ class PaintApp(App[None]):                  self.make_preview(self.draw_current_polyline  show_dimensions_in_status_bar=True) # polyline ","update example","update switch to previous tool only on mouse up ("
"23352d64ac6c6b8ed410cd0b40a00fb3ae4d3f72","Fix ""incompatible"" override type checker errors  Method ""watch_value"" overrides class ""Input"" in an incompatible manner   Return type mismatch: base method returns type ""Coroutine[Any  Any  None]""  override returns type ""None""     Type ""None"" cannot be assigned to type ""Coroutine[Any  Any  None]""PylancereportIncompatibleMethodOverride  Method ""validate_cursor_position"" overrides class ""Input"" in an incompatible manner   Parameter 2 name mismatch: base parameter is named ""cursor_position""  override parameter is named ""position""PylancereportIncompatibleMethodOverride  These wouldn't actually be problems  due to the nature of the reactive properties system  but whatever  I can make it match  no problem.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -329 11 +329 11 @@ class CharInput(Input  inherit_bindings=False):          """"""Limit the value to a single character.""""""          return value[-1] if value else "" ""       -    def watch_value(self  value: str) -> None: +    async def watch_value(self  value: str) -> None:          """"""Called when value changes.""""""          self.post_message(self.CharSelected(value))   -    def validate_cursor_position(self  position: int) -> int: +    def validate_cursor_position(self  cursor_position: int) -> int:       ","add missing docstrings","add fix `` incompatible '' override type checker e"
"1a135c41531db973386a5a574e648ec5fc86d284","Rename a variable that is inside is_inside_polygon  This is an AI-offered function... so I'm sort of guessing here.  This fixes a spell checker issue but there's also a ""possibly unbound"" type checker issue here.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -658 6 +658 7 @@ def polyline_walk(points: List[Offset]) -> Iterator[Tuple[int  int]]:  def is_inside_polygon(x: int  y: int  points: List[Offset]) -> bool:      """"""Returns True if the point is inside the polygon.""""""      # https://stackoverflow.com/a/217578 +    # Actually I just got this from Copilot  and don't know the source      n = len(points)      inside = False      p1x  p1y = points[0] @@ -667 8 +668 8 @@ def is_inside_polygon(x: int  y: int  points: List[Offset]) -> bool:              if y <= m","add comment about is_inside_polygon","fix rename a variable that is inside is_inside_pol"
"1523e960bb5547ec88e734eacf536111054a25b4","Fix a type checker error (setting parent_menu on Separator)  Not really a problem  but parent_menu isn't declared on Separator.","menus.py","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from rich.text import Text from localization.i18n import markup_hotkey  remove_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([a-z0-9])([A-Z])'  ","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from rich.text import Text from localization.i18n import markup_hotkey  remove_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([a-z0-9])([A-Z])'  ","@@ -44 7 +44 8 @@ class Menu(Container):              if item.submenu:                  self.app.mount(item.submenu)                  item.submenu.close() -            item.parent_menu = self +            if isinstance(item  MenuItem): +                item.parent_menu = self        def on_key(self  event: events.Key) -> None:          """"""Called when the user presses a key."""""" ","add menu to the menu container","fix a type checker error ( setting parent_menu on"
"e62064a307fe9dc700d8c7eb591f615b43f7acfb","Fix a type checker error","windows.py","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","@@ -184 7 +184 7 @@ class Window(Container):        def on_mouse_move(self  event: events.MouseMove) -> None:          """"""Called when the user moves the mouse."""""" -        if self.mouse_at_drag_start: +        if self.mouse_at_drag_start and self.offset_at_drag_start:              self.styles.offset = (                  self.offset_at_drag_start.x + event.screen_x - self.mouse_at_drag_start.x                   self.offset_at_drag_start.y + event.screen_y - self.mouse_at_drag_start.y  ","fix offset on windows","fix a type checker error fix offset on windows"
"3b08e045e74e58115ad28873ee015b9ed02c6b1e","Mount menus to the Screen instead of the App  All just to avoid one type checker error:      Type of ""app"" is partially unknown       Type of ""app"" is ""App[Unknown]""PylancereportUnknownMemberType  But it's the last error in menus.py... But I still have a bunch of this error in main.py  and I don't know how to deal with it generally. It doesn't seem like a real problem  but I don't want to add so many ignore comments...","menus.py","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from rich.text import Text from localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([a-z0-9])([A-Z])'  r'\1_\2'  name)","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from textual.dom import NoScreen from rich.text import Text from localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([","@@ -5 6 +5 7 @@ from textual.containers import Container  from textual.reactive import var  from textual.widgets import Button  Static  from textual.message import Message +from textual.dom import NoScreen  from rich.text import Text  from localization.i18n import markup_hotkey  get_hotkey  get_direction   @@ -35 18 +36 30 @@ class Menu(Container):          self.parent_menu: Menu | None = None          self.parent_menu_item: MenuItem | None = None   -    def watch_items(self  old_items: list['MenuItem|Separ","add missing docstrings","add mount menus to the screen instead of the app a"
"bbe3f0172532edc19cff1adf1315569cf79f6d7d","Add to known issues","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -128 6 +128 8 @@ cat file.ans  ## Known Issues    - Pressing Delete while using the Text tool deletes the whole text box. Similarly  Ctrl+A selects the canvas instead of the text in the text box. +- The Text tool cannot be undone. +- Text and Selection box borders are inside instead of outside (and have no dashes).  - The Curve and Polygon tool previews disappear when you're not hovering over the canvas.  - Pick Color can't be cancelled with Escape or by pressing both mouse buttons.  - Help > Help Topics","add description for text_tool_undone_button","add to known issues add description for text_tool_"
"7bbca533b299b2bc455df56ff01041ce59bb22c9","Tweak dark clouds  I wanted to do more with this  but I actually ran into some problems where it wouldn't replace a color. It might need a threshold.","ship dark sails.ans","[0m[48;2;255;255;255;38;2;0;0;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m ","[0m[48;2;255;255;255;38;2;0;0;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m ","@@ -1 17 +1 17 @@  [0m[48;2;255;255;255;38;2;0;0;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;255;38;2;127;63;0m [48;2;127;255;2","add missing features","add tweak dark clouds i wanted to do more with thi"
"bf2b5ec94ed128f15300b33dff48e5e3974a8b83","Fix dragging windows  This was broken in ""Fix a type checker error"" e62064a307fe9dc700d8c7eb591f615b43f7acfb  where I just added `and self.offset_at_drag_start`. The problem is that Offset defines __bool__ and are falsy when (0 0)  and the windows  despite starting out in the center  initially have an offset of (0 0) FROM this center position.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -141 7 +141 6 @@ cat file.ans  - Large files can make the program very slow  as can magnifying the canvas.  - The program sometimes crashes or freezes randomly  and there's no auto-save feature.  - Saving/loading an ANSI file ends up with a white cell at the top left  which pushes the top row to the right. The top right cell gets pushed off and deleted. -- Dragging windows is broken; it used to work  but now does nothing.  - The Polygon/Curve tools aren't finalized when you switch tools.  - Saved ANSI fi","add description of missing color file","fix fix dragging windows this was broken in `` a t"
"bf2b5ec94ed128f15300b33dff48e5e3974a8b83","Fix dragging windows  This was broken in ""Fix a type checker error"" e62064a307fe9dc700d8c7eb591f615b43f7acfb  where I just added `and self.offset_at_drag_start`. The problem is that Offset defines __bool__ and are falsy when (0 0)  and the windows  despite starting out in the center  initially have an offset of (0 0) FROM this center position.","windows.py","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","@@ -184 7 +184 7 @@ class Window(Container):        def on_mouse_move(self  event: events.MouseMove) -> None:          """"""Called when the user moves the mouse."""""" -        if self.mouse_at_drag_start and self.offset_at_drag_start: +        if self.mouse_at_drag_start is not None and self.offset_at_drag_start is not None:              self.styles.offset = (                  self.offset_at_drag_start.x + event.screen_x - self.mouse_at_drag_start.x                   self.offset_at_drag_start.y + event.screen_y","fix offset on windows","fix fix dragging windows this was broken in `` a t"
"8c932ea53f12ca42dea26778fd513b728fa53f80","Fix dragging selection by top left corner  I recognized this as another Offset -> bool coercion issue.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -133 7 +133 6 @@ cat file.ans  - The Curve and Polygon tool previews disappear when you're not hovering over the canvas.  - Pick Color can't be cancelled with Escape or by pressing both mouse buttons.  - Help > Help Topics isn't very helpful. -- The selection can't be dragged from the top left corner. (Instead it starts a new selection  seemingly without finalizing the old one  until mouse up.)  - Due to limitations of the terminal  shortcuts using Shift or Alt might not work.  - Menus are not keyboard n","add description for picking a color","add fix dragging selection by top left corner i re"
"8c932ea53f12ca42dea26778fd513b728fa53f80","Fix dragging selection by top left corner  I recognized this as another Offset -> bool coercion issue.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -2266 13 +2266 16 @@ class PaintApp(App[None]):                  assert sel is not None  ""selecting_text should only be set if there's a selection""                  sel.text_selection_end = Offset(event.mouse_move_event.x  event.mouse_move_event.y) - sel.region.offset                  self.canvas.refresh_scaled_region(sel.region) -            elif self.selection_drag_offset: +            elif self.selection_drag_offset is not None:                  assert sel is not None  ""selection_drag_offset should on","fix text selection on mouse move","update fix dragging selection by top left corner i"
"0e25b99d2b1af00eb10eb296e225b64e8ac31fe6","Update known issue with newly-known knowledge about the issue  There are known knowns  and unknown knowns  and also known unknowns  and unknown unknowns  but this is a now-no-longer-known-unknown-now-known-known  y'know? (I don't not not not not not not know.)","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -139 7 +139 7 @@ cat file.ans  - The program sometimes crashes or freezes randomly  and there's no auto-save feature.  - Saving/loading an ANSI file ends up with a white cell at the top left  which pushes the top row to the right. The top right cell gets pushed off and deleted.  - Saved ANSI files are unnecessarily large  because they include escape sequences for every cell  even if the colors match the previous cell. -- If you hit Ctrl+A after dragging (or while dragging) a selection  it can get cut off","add missing description","add update known issue with newly-known knowledge"
"5ba8cbdbb80ef2b4bf3c9e1feabb7e585f31b8b3","Fix assertion error when using Select or Text before any other tool  AssertionError: selection_drag_offset should only be set if there's a selection","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -1185 7 +1185 7 @@ class PaintApp(App[None]):      mouse_previous: Offset = Offset(0  0)      # for Select tool  indicates that the selection is being moved      # and defines the offset of the selection from the mouse -    selection_drag_offset: Offset|None = Offset(0  0) +    selection_drag_offset: Offset|None = None      # for Text tool      selecting_text: bool = False      # for Curve  Polygon  or Free-Form Select tools ","add doc for paintapp","update fix assertion error when using select or te"
"15ffabbaac50bb4e5d0397333849121930dc8ffc","Use repr instead of str when formatting exceptions  This is a little better  but not great.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -1502 9 +1502 9 @@ class PaintApp(App[None]):              except FileNotFoundError:                   self.warning_message_box(dialog_title  _(""%1 contains an invalid path.""  self.filename)  ""ok"")              except OSError as e: -                self.warning_message_box(dialog_title  _(""Failed to save document."") + ""\n\n"" + str(e)  ""ok"") +                self.warning_message_box(dialog_title  _(""Failed to save document."") + ""\n\n"" + repr(e)  ""ok"")              except Exception as e: -                s","add missing line to error message","add use repr instead of str when formatting except"
"a5518a58943988373aac06fd9d2c8001c821cb0d","Remove redundant cancel_preview  handled by stop_action_in_progress","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -1488 7 +1488 6 @@ class PaintApp(App[None]):      def action_undo(self) -> None:          self.stop_action_in_progress()          if len(self.undos) > 0: -            self.cancel_preview()              action = self.undos.pop()              redo_action = Action(_(""Undo"") + "" "" + action.name  self.image  action.region)              action.undo(self.image) @@ -1498 7 +1497 6 @@ class PaintApp(App[None]):      def action_redo(self) -> None:          self.stop_action_in_progress()          if len(self.redos","add action_redo()","remove redundant cancel_preview   handled by stop_"
"8c936552b73b9e85a7b03f400fc0077269a80d2d","Don't delete selection if copy fails during cut","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -1868 14 +1868 14 @@ class PaintApp(App[None]):        def action_cut(self) -> None:          """"""Cut the selection to the clipboard."""""" -        self.action_copy() -        self.action_clear_selection() +        if self.action_copy(): +            self.action_clear_selection()   -    def action_copy(self) -> None: +    def action_copy(self) -> bool:          """"""Copy the selection to the clipboard.""""""          sel = self.image.selection          if sel is None: -            return +            return Fals","add missing docstrings","add do n't delete selection if copy fails during c"
"0c52788843a4efa222f396ef8fe9431dc76f08ba","Fix some type checker errors","menus.py","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from textual.dom import NoScreen from rich.text import Text from localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from textual.dom import NoScreen from rich.text import Text from localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([","@@ -220 7 +220 7 @@ class MenuItem(Button):        def __init__(self           name: str  -        action: Callable[[]  None] | None = None  +        action: Callable[[]  Any] | None = None           id: str | int | None = None           submenu: Menu | None = None           description: str | None = None  ","add missing docstrings","fix some type checker errors add missing docstring"
"0c52788843a4efa222f396ef8fe9431dc76f08ba","Fix some type checker errors","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -418 6 +418 7 @@ class ColorsBox(Container):          """"""Called when a mouse button is pressed.""""""          button  _ = self.app.get_widget_at(*event.screen_offset)          if ""color_button"" in button.classes: +            assert isinstance(button  Button)              self.post_message(self.ColorSelected(self.color_by_button[button]  event.ctrl))              # Detect double click and open Edit Colors dialog.              if event.time - self.last_click_time < 0.8 and button == self.last_click_button: ","fix color selection in colors box","fix some type checker errors fix color selection i"
"0c52788843a4efa222f396ef8fe9431dc76f08ba","Fix some type checker errors","windows.py","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","@@ -265 7 +265 7 @@ class CharacterSelectorDialogWindow(DialogWindow):      def __init__(self  *children: Widget  selected_character: str|None  handle_selected_character: Callable[[str]  None]  **kwargs: Any) -> None:          """"""Initialize the dialog window.""""""          super().__init__(handle_button=self.handle_button  *children  **kwargs) -        self._selected_character = selected_character +        self._selected_character: str|None = selected_character          self.handle_selected_character = handle","add missing docstring","fix some type checker errors add missing docstring"
"1f171259bb1943168c413686e6736949aa2c24bf","Fix shifted/cutoff selection when melding with negative coordinates  Code intended to prevent errors was also creating an offset between the source and target regions. The source region needs to be adjusted to match the clipped target region.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -138 7 +138 6 @@ cat file.ans  - Large files can make the program very slow  as can magnifying the canvas.  - The program sometimes crashes or freezes randomly  and there's no auto-save feature.  - Saved ANSI files are unnecessarily large  because they include escape sequences for every cell  even if the colors match the previous cell. -- When finalizing a selection that is partially outside the document bounds to the top or to the left  it gets cut off.    The program has only been tested on Linux. Issu","add missing comment","fix shifted/cutoff selection when melding with neg"
"1f171259bb1943168c413686e6736949aa2c24bf","Fix shifted/cutoff selection when melding with negative coordinates  Code intended to prevent errors was also creating an offset between the source and target regions. The source region needs to be adjusted to match the clipped target region.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -467 8 +467 13 @@ class Selection:          if not self.contained_image:              # raise ValueError(""Selection has no image data."")              return + +        # Prevent out of bounds errors (IndexError: list assignment index out of range) +        # by clipping the target region to the document  and adjusting the source region accordingly.          target_region = self.region.intersection(Region(0  0  document.width  document.height)) -        document.copy_region(source=self.contained_image  ta","fix selection with out of bounds errors","fix shifted/cutoff selection when melding with neg"
"088b7e9b2dc079943340fe8bb491b102c598351c","Clamp text selection endpoint while dragging  This fixes weird or non-traditional behavior where dragging further away from the textbox when the mouse is outside the textbox would continue to offset the cursor index. It wasn't totally unreasonable  but the traditional behavior is to clamp it  and it makes it easier to select whole lines.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message import Message","@@ -1084 8 +1084 6 @@ class Canvas(Widget):              def within_text_selection_highlight(textbox: Selection) -> int:                  if cell_x >= textbox.region.right:                      # Prevent inverting outside the textbox. -                    # TODO: I think the x coordinate should be clamped to the textbox region. -                    # Then this check can be removed.                      return False                  def offset_to_text_index(offset: Offset) -> int:                      return","remove a warning in canvas.py","remove clamp text selection endpoint while draggin"
"454c473eff4a039bbce8e32aa434cee71dfa0bf4","Grab and tweak wallpaper code  I updated the Windows version to use *W (wide char  unicode) version  and enabled it and the mac one  changed except: to except Exception: and tweaked a few other things.  I haven't tested any of this.","wallpaper.py","","import os import sys import subprocess import re  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment(self):     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environment     # and http://ubuntuforums.org/showthread.php?t=652320     ","@@ -0 0 +1 219 @@ +import os +import sys +import subprocess +import re + +# There are too many desktop environment names and programs  +# it would pollute the spellings list (unless I moved this file +# to a folder and made a separate dictionary). +# spell-checker:disable + +def get_desktop_environment(self): +    # From https://stackoverflow.com/a/21213358/2624876 +    # which takes from: +    # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environment +    # and http://ubuntuforums","add a comment to show the desktop environment","update grab and tweak wallpaper code i the windows"
"594c378e45d8529d8c61c64f228f2b2673eef7c5","Remove try-except around set_wallpaper body","wallpaper.py","import os import sys import subprocess import re  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-deskto","import os import sys import subprocess import re  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-deskto","@@ -86 127 +86 123 @@ def set_wallpaper(file_loc: str  first_run: bool = True):      # I have not been able to set the desktop background from      # command line: KDE  Enlightenment      desktop_env = get_desktop_environment() -    try: -        if desktop_env in [""gnome""  ""unity""  ""cinnamon""]: -            uri = ""'file://%s'"" % file_loc -            try: -                SCHEMA = ""org.gnome.desktop.background"" -                KEY = ""picture-uri"" -                gsettings = Gio.Settings.new(SCHEMA) -    ","add a new file_loc to the wallpaper file","remove try-except around set_wallpaper body add a"
"44d800d9b3108ef6a84cee86612c354afee09db4","Note an issue with color values changing","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -138 6 +138 7 @@ cat file.ans  - Large files can make the program very slow  as can magnifying the canvas.  - The program sometimes crashes or freezes randomly  and there's no auto-save feature.  - Saved ANSI files are unnecessarily large  because they include escape sequences for every cell  even if the colors match the previous cell. +- Loading and saving a file without making any edits can change color values slightly  e.g. 128 → 127. The Color Eraser feature compensates for this with a slight toleran","add a note about color eraser","change note an issue with color values add a note"
"93a1d2674ff85e5ebdecf3b353d9b05c719f9c1d","Clear undos/redos to avoid errors when applying undo actions","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -2090 6 +2090 8 @@ class PaintApp(App[None]):                      def do_the_resize():                          self.image.resize(width  height  default_bg=self.selected_bg_color  default_fg=self.selected_fg_color)                          self.canvas.refresh(layout=True) +                        self.undos = [] +                        self.redos = []                          window.close()                      self.confirm_no_undo(do_the_resize)                  except ValueError: ","update paintapp.py","update clear undos/redos to avoid errors when appl"
"67015ae1cab8d063cb4e78252fe37b279be20f85","Add a known crash-causing issue","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -126 6 +126 7 @@ cat file.ans    ## Known Issues   +- Dragging from outside the canvas to inside with Free-Form Select crashes the program  and with Select makes a stupid selection (using the starting mouse position from the last time you clicked on the canvas).  - The Text tool doesn't collapse a text selection when typing. Undo/Redo doesn't work with text. Ctrl+Z will delete the textbox.  - Selection box border is inside instead of outside (and lacks dashes). For the text box  I hid the border because ","add note about text selection","add a known crash-causing issue add note about tex"
"67015ae1cab8d063cb4e78252fe37b279be20f85","Add a known crash-causing issue","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -2853 6 +2853 12 @@ class PaintApp(App[None]):              # Done selecting text              self.selecting_text = False              return +        # TODO: FIXME: dragging from outside the canvas shouldn't make a selection +        # and for Free-Form Select it gets ValueError: min() arg is an empty sequence +        # - self.mouse_at_start is never unset so it can't be used to check if the mouse is down +        # - self.canvas.pointer_active is always False during ToolStop currently so I can't use ","remove warning about dragging text","add a known crash-causing issue remove warning abo"
"5be895732d797ad10256e0ccbc7a8c11b3842f30","Remove document argument to Action in favor of action.update()  I'm probably breaking stuff here  by disabling the region fallback  etc.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -756 22 +756 26 @@ font {  class Action:      """"""An action that can be undone efficiently using a region update.""""""   -    def __init__(self  name: str  document: AnsiArtDocument  region: Region|None = None) -> None: +    def __init__(self  name: str  region: Region|None = None) -> None:          """"""Initialize the action using the document state before modification."""""" -        if region is None: -            region = Region(0  0  document.width  document.height) +        # if region is None: +        #\","add missing docstring","remove document argument to action in favor of act"
"9c1b617440d9d3e2d99e562c5032a8305c782408","Fix error undoing ineffective flood fill","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -766 8 +766 9 @@ class Action:        def update(self  document: AnsiArtDocument) -> None:          """"""Grabs the image data from the current region of the document."""""" -        if not self.region: -            raise ValueError(""Action region is None"") +        if self.region is None: +            print(""Warning: Action.update called without a defined region"") +            return          self.sub_image_before = AnsiArtDocument(self.region.width  self.region.height)          self.sub_image_before.copy_reg","add warning message for region not set","add fix error undoing ineffective flood fill warni"
"4fed90c794b83f37a8c25f07a7510c84216ff431","Clean up  btw backslash was to avoid comment detected as a #region comment which Pylance complained about not having a respective end comment","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -758 8 +758 6 @@ class Action:        def __init__(self  name: str  region: Region|None = None) -> None:          """"""Initialize the action using the document state before modification."""""" -        # if region is None: -        #\     region = Region(0  0  document.width  document.height)          self.name = name          self.region = region          self.sub_image_before: AnsiArtDocument|None = None ","add missing docstring","update clean up btw backslash was to avoid comment"
"fffd287ff0c1dd812fccc7dcc41e3ec2a3ca26b4","WIP: make resizing the canvas undoable  Resize  undo  redo works  but: Resize  undo  redo  undo errors.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -526 6 +526 15 @@ class AnsiArtDocument:          self.fg = [[default_fg for _ in range(width)] for _ in range(height)]          self.selection: Optional[Selection] = None   +    def copy(self  source: 'AnsiArtDocument') -> None: +        """"""Copy the image size and data from another document. Does not copy the selection."""""" +        self.width = source.width +        self.height = source.height +        self.ch = [row[:] for row in source.ch] +        self.bg = [row[:] for row in source.bg] +        self","add copy method to ansiartdocument","add wip : make resizing the canvas undoable resize"
"9897266a148956a2caf54e34935b211bef6e99a5","Fix error during undo after redo after undo after resize  When you've finally tracked down an issue and to fix it all you have to do is point the cursor in the right spot and hit tab to accept the AI's auto completion  it really makes you wonder about proactive AI coding assistance  and a future with AGI. Or even without any AGI or proactive AI  just having a gutter view that shows how surprised a language model is at a given line of code could really work wonders on a problem like this. It might feel _judgy_  but it could solve problems.","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -1667 10 +1667 11 @@ class PaintApp(App[None]):        def action_undo(self) -> None:          """"""Undoes the last action."""""" +        # print(""Before undo  undos:""  ""  "".join(map(lambda action: f""{action.name} {action.region}""  self.undos))) +        # print(""redos:""  ""  "".join(map(lambda action: f""{action.name} {action.region}""  self.redos)))          self.stop_action_in_progress()          if len(self.undos) > 0:              action = self.undos.pop() -            # FIXME: resize  undo  redo  undo erro","add a comment","fix fix error during undo after redo after undo af"
"1f5457d992f35a677a8e94df51405b26ce3de13e","Fix crash with Polygon tool(s)  dragging from outside to inside canvas  When clicking outside the canvas and dragging and releasing over it  several tools exhibited issues  which this commit fixes.  - Free-Form Select  Polygon: crash with IndexError - Select: useless selection created - Magnifier  Pick Color: returned to last tool before use","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -126 7 +126 6 @@ cat file.ans    ## Known Issues   -- Dragging from outside the canvas to inside with Free-Form Select crashes the program  and with Select makes a stupid selection (using the starting mouse position from the last time you clicked on the canvas).  - The Text tool doesn't collapse a text selection when typing. Undo/Redo doesn't work with text. Ctrl+Z will delete the textbox.  - Selection box border is inside instead of outside (and lacks dashes). For the text box  I hid the border because ","add description of issue","update fix crash with polygon tool ( s )   draggin"
"1f5457d992f35a677a8e94df51405b26ce3de13e","Fix crash with Polygon tool(s)  dragging from outside to inside canvas  When clicking outside the canvas and dragging and releasing over it  several tools exhibited issues  which this commit fixes.  - Free-Form Select  Polygon: crash with IndexError - Select: useless selection created - Magnifier  Pick Color: returned to last tool before use","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -1151 10 +1151 11 @@ class Canvas(Widget):          self.fix_mouse_event(event)          event.x //= self.magnification          event.y //= self.magnification - +         +        if self.pointer_active: +            self.post_message(self.ToolStop(event))          self.pointer_active = False          self.capture_mouse(False) -        self.post_message(self.ToolStop(event))        def on_leave(self  event: events.Leave) -> None:          """"""Called when the mouse leaves the canvas. Stop preview if appli","fix mouse press on canvas","update fix crash with polygon tool ( s )   draggin"
"2cf3bc2a7db96e3b053a3d3037e09b5537f5c24a","Clarify known issues","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -126 17 +126 17 @@ cat samples/ship.ans    ## Known Issues   -- The Text tool doesn't collapse a text selection when typing. Undo/Redo doesn't work with text. Ctrl+Z will delete the textbox. -- Selection box border is inside instead of outside (and lacks dashes). For the text box  I hid the border because it was too visually confusing  but it should also have an outer border. -- Pick Color can't be cancelled  since it samples the color continuously. -- Pressing both mouse buttons to cancel tools can some","add note about text selection border","add clarify known issues note about text selection"
"ceb79bc5aa9aae13703043485225c2e3fa6ae3b3","Add to known issues list","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -140 6 +140 10 @@ cat samples/ship.ans  - Saved ANSI files are unnecessarily large  because they include escape sequences for every cell  even if the colors match the previous cell.  - Loading and saving a file without making any edits can change color values slightly  e.g. 128 → 127. The Color Eraser feature compensates for this with a slight tolerance  but the fill tool does not.  - Free-Form Select stamping/finalizing is incorrect when the selection is off-screen to the left or top. +- Moving the sele","add note about color eraser feature","add to known issues list add note about color eras"
"682564b6a8196a6b6a93f4014319e2698c648e1c","Replace outdated return & FIXME comment with an assertion","paint.py","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","#!/usr/bin/env python3 import os import re import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from textual.message imp","@@ -2809 14 +2809 8 @@ class PaintApp(App[None]):                  self.make_preview(self.draw_current_polyline  show_dimensions_in_status_bar=True) # polyline until finished              return   -        if len(self.undos) == 0: -            # Code below wants to update the last action. -            # However  if you you undo while drawing  -            # there may be no last action. -            # FIXME: Ideally we'd stop getting events in this case. -            # This might be buggy if there were multi","add comment","update replace outdated return & fixme comment wit"
"0b6006325e958e063f47be2cd8ebdfdf6909fb07","Resolve all non-strict mode Pyright errors","paint.py","#!/usr/bin/env python3  import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from text","#!/usr/bin/env python3  import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from text","@@ -887 6 +887 9 @@ def is_inside_polygon(x: int  y: int  points: List[Offset]) -> bool:          if y > min(p1y  p2y):              if y <= max(p1y  p2y):                  if x <= max(p1x  p2x): +                    x_intersection = x  # Avoid ""possibly unbound"" type checker error +                    # I don't know if this is right; should it flip `inside` in this case? +                    # Is this an actual case that can occur  where p1y == p2y AND p1x != p2x?                      if p1y != p2y:       ","add missing comments","add resolve all non-strict mode pyright errors mis"
"0b6006325e958e063f47be2cd8ebdfdf6909fb07","Resolve all non-strict mode Pyright errors","wallpaper.py","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","@@ -47 10 +47 11 @@ def get_desktop_environment() -> str:                  return ""razor-qt""              elif desktop_session.startswith(""wmaker""): # e.g. wmaker-common                  return ""windowmaker"" +        gnome_desktop_session_id = os.environ.get(""GNOME_DESKTOP_SESSION_ID"")          if os.environ.get('KDE_FULL_SESSION') == 'true':              return ""kde"" -        elif os.environ.get('GNOME_DESKTOP_SESSION_ID'): -            if not ""deprecated"" in os.environ.get('GNOME_DESKTOP_SESSION_ID'): +  ","add kde to the list of available desktops","add resolve all non-strict mode pyright errors kde"
"facfd6cfe39708b9c66cf5089ca69ac567e42988","Fix potential error if minimize but not maximize present  or visa versa","windows.py","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _  class WindowTitleBar","@@ -167 7 +167 10 @@ class Window(Container):              # Toggle the display of the content.              self.content.display = not self.content.display              # Disable the maximize button when minimized. -            self.title_bar.query_one("".window_maximize"").disabled = minimizing +            try: +                self.title_bar.query_one("".window_maximize"").disabled = minimizing +            except NoMatches: +                pass          elif event.button.has_class(""window_maximize""):     ","fix maximize example","update fix potential error if minimize but not max"
"f54de3f06593b18bd83263890d18256a06f00317","Fix help window layout when maximized  breaking minimize behavior  Maximization is more important  so this is still a win  but this does make minimization stop working and look really stupid.","paint.css","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128); } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width: 15;     height: 100","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128); } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width: 15;     height: 100","@@ -234 13 +234 17 @@ CharacterSelectorDialogWindow .cancel {      height: auto;  }   +#help_dialog { +    width: 80; +    height: 30; +}  #help_dialog .window_content {      padding: 2 4; +    height: 1fr;  }  #help_dialog .help_text_container { -    width: 80; -    height: auto; -    max-height: 15; +    width: 1fr; +    height: 1fr;      overflow: auto;      margin-bottom: 2;  } ","fix characterselectordialogwindow.cancel","update fix help window layout when maximized   bre"
"d8d08717296fd217b6648ac722f1453ca23fca38","Catch any errors getting the clipboard data  I haven't run into this  but since we've got a nice localized string for it...","paint.py","#!/usr/bin/env python3  import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from text","#!/usr/bin/env python3  import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from textual import events from text","@@ -2131 8 +2131 12 @@ class PaintApp(App[None]):        def action_paste(self) -> None:          """"""Paste the clipboard as a selection."""""" -        import pyperclip -        text: str = pyperclip.paste() +        try: +            import pyperclip +            text: str = pyperclip.paste() +        except Exception as e: +            self.warning_message_box(_(""Paint"")  _(""Error getting the Clipboard Data!"") + ""\n\n"" + repr(e)  ""ok"") +            return          if not text:              return          if","add warning message to paint app","add catch any errors getting the clipboard data i"
"4ff90fa8eccbe2b3debcb3b15dce5e31b3681ec2","Add ignore comment for error Pylance gives even though pyright doesn't  With Pyright's strict mode disabled  I got zero issues from the CLI  but got a Problem underline in VS Code from Pylance: - ""Gio"" is unknown import symbol Pylance(reportGeneralTypeIssues)  This also silences  on the same line: - Type of ""Gio"" is unknown Pylance(reportUnknownVariableType)  gi.repository uses DynamicImporter  which I assume is all the reason the type checker ""needs"" to be confused  so I'm not worried about this.","wallpaper.py","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","@@ -92 7 +92 7 @@ def set_wallpaper(file_loc: str  first_run: bool = True):      if desktop_env in [""gnome""  ""unity""  ""cinnamon""]:          uri = ""'file://%s'"" % file_loc          try: -            from gi.repository import Gio +            from gi.repository import Gio  # type: ignore              SCHEMA = ""org.gnome.desktop.background""              KEY = ""picture-uri""              gsettings = Gio.Settings.new(SCHEMA) ","add a new wallpaper script","add ignore comment for error pylance gives even th"
"77fa6cb444ef1e55205c956025e323fd5aedeb58","Fix error after resizing the document if there was an action preview  If you confirmed the dialog with Enter after hovering over the canvas  previously it got:      IndexError: list index out of range  when canceling the preview after it became outdated in regard to the canvas size.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -2316 6 +2316 8 @@ class PaintApp(App[None]):                      if width < 1 or height < 1:                          raise ValueError   +                    self.cancel_preview() +                      # TODO: DRY undo state creation (at least the undos/redos part)                      action = Action(_(""Attributes"")  Region(0  0  self.image.width  self.image.height))                      action.is_resize = True ","add comment","add fix error after resizing the document if there"
"1cdad17fe9d6698d7bd9f35d0c10228f956075f3","Set a fixed width when updating CLI help on readme  By default it uses the terminal width  which caused the help text to change spuriously.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -88 8 +88 10 @@ options:                          Language to use    --ascii-only-icons    Use only ASCII characters for tool icons    --inspect-layout      Inspect the layout with middle click  for development -  --clear-screen        Clear the screen before starting; useful for development  to avoid seeing fixed errors -  --restart-on-changes  Restart the app when the source code is changed  for development +  --clear-screen        Clear the screen before starting; useful for +                        d","add restart-on-changes option to app","change set a fix width when update cli help on rea"
"1cdad17fe9d6698d7bd9f35d0c10228f956075f3","Set a fixed width when updating CLI help on readme  By default it uses the terminal width  which caused the help text to change spuriously.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -159 10 +159 20 @@ parser.add_argument('filename'  nargs='?'  default=None  help='File to open')  readme_help_start = re.compile(r""```\n.*--help\n"")  readme_help_end = re.compile(r""```"")  with open(""README.md""  ""r+"") as f: +    # This is a hacky way to have to fix the width without creating a separate ArgumentParser  +    # and without breaking the wrapping if you use --help. +    # https://stackoverflow.com/questions/44333577/explain-lambda-argparse-helpformatterprog-width +    # This lambda only works ","fix the width of help text in the lambda","change set a fix width when update cli help on rea"
"0bed615e74e3c678420e70db9daeef0bf15ecd47","Exit after --recode-samples  Otherwise it may leave the app in a weird state where app.image != app.canvas.image (I presume)  and you can't draw  at least not visibly  and it can prompt you to save changes to the document that isn't visibly open  except in the titlebar (Header).","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -3440 6 +3440 7 @@ if args.recode_samples:                  app.file_path = os.path.abspath(os.path.join(""samples""  filename))              await app.save()              print(f""Saved {filename}"") +        app.exit()      # asyncio.run(recode_samples())      # have to wait for the app to be initialized      def callback() -> None: ","recode samples in the test","update exit after -- recode-samples otherwise it m"
"4f4a65c6fe9972d8148895d7bfc3574f4d860b7f","Fix gaps between lines in HTML export in Chrome/Firefox on Ubuntu  This is dependent on the font. In both Chrome/Firefox  monospace uses ""DejaVu Sans Mono"" on my system  but if I specify ""DejaVu Sans Mono"" explicitly  it uses a larger font size (16px  as compared to 12px in Firefox or 13px in Chrome)  and slight gaps are visible.  This fixes a regression when switching over to the Rich API's built-in HTML exporting — from where I'm sitting — but it may look totally different on someone else's computer.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -625 7 +625 7 @@ CUSTOM_CONSOLE_SVG_FORMAT = """"""\  </svg>  """"""   -CONSOLE_HTML_FORMAT = """"""\ +CUSTOM_CONSOLE_HTML_FORMAT = """"""\  <!DOCTYPE html>  <head>  <meta charset=""UTF-8""> @@ -639 7 +639 7 @@ body {{  </head>  <html>  <body> -    <pre style=""font-family:Menlo 'DejaVu Sans Mono' consolas 'Courier New' monospace""><code>{code}</code></pre> +    <pre style=""font-family:monospace;line-height:1""><code>{code}</code></pre>  </body>  </html>  """""" @@ -741 7 +741 7 @@ class AnsiArtDocument:      def get_html(s","add missing head tag","fix fix gaps between lines in html export in chrom"
"1656c64ea251706203941e7b4515eb5de151a937","Make --recode-samples handle exceptions  in an insanely complicated way","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -182 8 +182 6 @@ This also makes it run slower.  Often it's useful to exclude events with `textual console -x EVENT`.    To test file encoding  run `textual run --dev ""src/textual_paint/paint.py --recode-samples""`. -(If the program doesn't exit automatically  use `textual console -x EVENT` to check for errors. -I'm new to asyncio in Python  and I wasn't able to get it to handle exceptions  at least not without putting a try/except inside the task  and frankly it was so obnoxiously difficult that I just h","add note about file encoding","update make -- recode-samples handle exceptions  "
"1656c64ea251706203941e7b4515eb5de151a937","Make --recode-samples handle exceptions  in an insanely complicated way","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -3390 13 +3390 25 @@ if args.recode_samples:                  app.file_path = file_path              await app.save()              print(f""Saved {filename}"") -        app.exit() -    # asyncio.run(recode_samples())      # have to wait for the app to be initialized      def callback() -> None: -        # RuntimeError: asyncio.run() cannot be called from a running event loop -        # asyncio.run(recode_samples()) -        asyncio.create_task(recode_samples()) +        task = asyncio.create_task(recode_sa","add callback to run_samples","update make -- recode-samples handle exceptions  "
"c2ee9ef2df73603a528bb2cd654cbef28c752185","Simplify: don't need a Task!  This still handles errors  unlike a million things I tried before  and can still work and exit successfully.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -3392 18 +3392 9 @@ if args.recode_samples:              await app.save()              print(f""Saved {filename}"")      # have to wait for the app to be initialized -    def once_running() -> None: -        task = asyncio.create_task(recode_samples()) -        app.background_tasks.add(task) -        def done_callback(future: asyncio.Future[None]) -> None: -            exception = future.exception() -            app.background_tasks.discard(task) -            if exception: -                def raise_except","add recode_samples command","add simplify : do n't need a task ! this still han"
"f5e071f0699b716d6c163982c6f8560adbf8e51a","Fix menus cut off when viewport height is small  This fix works for the top level menus  and but it's unreliable for submenus  just as submenus opening at all is unreliable.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -137 7 +137 7 @@ cat samples/ship.ans  - Pressing both mouse buttons stops the current tool  but doesn't undo the current action.  - Due to limitations of the terminal  shortcuts using Shift or Alt might not work.  - Menus are not keyboard navigable. -- Clicking the Zoom submenu doesn't always work. You just have to click it a few times before it opens. <!--(It may be technically open but positioned off screen  or lacking width/height  or infinitely sized. I don't know. It seems to explode in size before","add a note about the mouse button","add fix menus cut off when viewport height is smal"
"f5e071f0699b716d6c163982c6f8560adbf8e51a","Fix menus cut off when viewport height is small  This fix works for the top level menus  and but it's unreliable for submenus  just as submenus opening at all is unreliable.","menus.py","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from textual.dom import NoScreen from rich.text import Text from localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from textual.dom import NoScreen from rich.text import Text from localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([","@@ -117 8 +117 11 @@ class Menu(Container):          self.add_class(""menu_popup"")            if isinstance(parent_menu  MenuBar): -            self.styles.offset = (parent_menu_item.region.x  parent_menu_item.region.y + parent_menu_item.region.height) +            y = parent_menu_item.region.y + parent_menu_item.region.height +            self.styles.offset = (parent_menu_item.region.x  y) +            self.styles.max_height = self.screen.size.height - y          else: +            self.styles.max_height = ","add menu bar to the top of the screen","add fix menus cut off when viewport height is smal"
"f5e071f0699b716d6c163982c6f8560adbf8e51a","Fix menus cut off when viewport height is small  This fix works for the top level menus  and but it's unreliable for submenus  just as submenus opening at all is unreliable.","paint.css","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128); } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width: 15;     height: 100","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128); } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width: 15;     height: 100","@@ -99 9 +99 6 @@ Menu.menu_popup {      height: auto;      min-width: 30;      overflow-y: auto; -    /* calc isn't supported  and this should be determined by the y position anyways  which is set in python */ -    /* max-height: calc(100vh - 3); */ -    max-height: 90vh;      /* width: auto doesn't account for the vertical scrollbar... */      /* which means it would make a horizontal scrollbar or cut off a character on the right  */      /* but I'm accounting for this with padding-right inside the menu i","add missing options to menu_popup","add fix menus cut off when viewport height is smal"
"3544e754eaeb90eea9f1049448bd4e5efea3d353","Add a stopgap to export Rich API console markup","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -737 6 +737 10 @@ class AnsiArtDocument:              text += ""\n""          return text   +    def get_rich_console_markup(self) -> str: +        """"""Get the Rich API markup representation of the document."""""" +        return self.get_renderable().markup +          def get_html(self) -> str:          """"""Get the HTML representation of the document.""""""          console = self.get_console() @@ -1850 13 +1854 17 @@ class PaintApp(App[None]):          if self.file_path:              try:                  file_t","add missing docstrings","add a stopgap to export rich api console markup ad"
"6cf59cd79a3915335a8fa454e19b6d4232e08089","Tweak requirements.txt so I can actually install from it  I'm setting up a virtual environment for the first time  and  trying to install my dependencies  I ran into errors  1. because of appscript which is only intended for Mac  2. PyGObject which IS for Linux  but fails to install  missing ""libgirepository1.0-dev""  but it's optional  it's just for wallpaper support. pyxgd is also for wallpaper support  so maybe I should comment it out too. And finally  [dev] is needed in order to use the `textual` command.  I don't know how well this can install on other systems  but at least I can install it now  on Ubuntu.  Also  when the version numbers in my requirements.txt were bumped when regenerating it  I'm guessing now that the dependencies weren't actually upgraded  since `textual --version` gave me ""0.19.1"" up until I set up my virtual environment (.venv)  and now it matches the requirements.txt version of ""0.22.3"". I still don't know why the version numbers were bumped  or for sure that they weren't installed at those versions somewhere in my filesystem. (I hope virtualenv makes things more comprehensible  rather than more confusing...)  Also  now that I'm using textual 0.22.3  the radio button set has arrow key navigation. Seeing this feature missing was what prompted me to set up the virtual environment and (sort of implicitly) upgrade. However  it doesn't work correctly  for the flipped horiz./vert. layout.","requirements.txt","appscript==1.2.2 psutil==5.9.0 PyGObject==3.42.1 pyperclip==1.8.2 pyxdg==0.28 rich==13.3.5 stransi==0.3.0 textual==0.22.3 watchdog==3.0.0 ","appscript==1.2.2; sys_platform == 'darwin' psutil==5.9.0 # PyGObject==3.42.1 pyperclip==1.8.2 pyxdg==0.28 rich==13.3.5 stransi==0.3.0 textual[dev]==0.22.3 watchdog==3.0.0 ","@@ -1 9 +1 9 @@ -appscript==1.2.2 +appscript==1.2.2; sys_platform == 'darwin'  psutil==5.9.0 -PyGObject==3.42.1 +# PyGObject==3.42.1  pyperclip==1.8.2  pyxdg==0.28  rich==13.3.5  stransi==0.3.0 -textual==0.22.3 +textual[dev]==0.22.3  watchdog==3.0.0 ","add missing version info","add tweak requirements.txt so i can actually insta"
"6effab854ca5b9a43ea41bba86afb9ad9d0e8fe2","Fix grammar  I stopped at this word and changed how I was wording the sentence haha","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -2400 7 +2400 7 @@ class PaintApp(App[None]):                (If I reorder them in the DOM  the navigation order won't be right.)   -            This needs to be run after the buttons are mounted so that they're positions are known. +            This needs to be run after the buttons are mounted so that their positions are known.              """"""              radio_buttons = window.content.query(RadioButton)              radio_button_absolute_positions = [radio_button.region.offset for radio_button in ra","add documentation for paintapp","change fix grammar i stopped at this word and how"
"f15ce6962cbb564f8ee2ade26e92df16dd35b624","DRY file writing with error handling","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -1845 6 +1845 22 @@ class PaintApp(App[None]):          self.background_tasks.add(task)          task.add_done_callback(self.background_tasks.discard)   +    def write_file_path(self  file_path: str  content: str  dialog_title: str) -> bool: +        """"""Write a file  showing an error message and returning False if it fails."""""" +        try: +            with open(file_path  ""w"") as f: +                f.write(content) +            return True +        except PermissionError: +            self.warning_mes","add write_file_path method to paintapp","update dry file writing with error handling add wr"
"74ffc34de4b789ec1da2ae2e08bf99f1bb4670c9","Automatically recover from backup file  - Recover from backup file if it exists for the document when loading   a document via the CLI or TUI  or if it exists for Untitled when   creating a new document. - Reorganize CLI arguments handling into passive and active    so that the active recovery step can use the passive* backup folder   option. (*Directories are created if they don't exist.)  Working on automatically recovering the document  I'm realizing this is more complicated than I thought. Consider two instances of the app (A and B) editing the same file:  - Make changes in A - Open same file in B - A auto-saves after timer - Close B - B deletes auto-save when closing - A doesn't re-create the auto-save unless further changes are made to   the document  because of the undo tracking  which is basically an   optimization to avoid writing to the disk all day while idle.  Also  there could be a race condition where it saves over the auto save before recovering it — potentially — like if the auto save interval was implemented such that it made an immediate call at the start  or if some other app code tries to auto save initially. Or  consider if you:  - Make changes in A - Open same file in B - Make changes in B  maybe before it detects the backup file if the disk   is very slow for some reason  or if you just ignore the prompt.   (None of the prompts are modal  currently.)  To address these issues  I could add a flag that says whether the auto save was written  and thus owned by  this session  and make it not write to a backup file that it didn't create in the current session. But it still ideally would auto save  just to a different file  so I could instead have a map of file paths to bools saying whether it's owned by the app or not and then have a number incremented in the filename (maybe like `.ans~` and then `.ans~SESSION2~`  including ""SESSION"" so it's clear it's not time-based)  adding 1 until it's a file that can be owned by the session when auto saving. But if an earlier-numbered session closes  you wouldn't want it to leave a file behind. Either it should delete/rename its backup file to the earlier number and start saving to that  or it should keep the existing higher number. I guess if looks at the map first  before checking the file system  it shouldn't be a problem. It should keep using the higher number. Would this be a little overkill? Eh  maybe.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -1875 6 +1875 35 @@ class PaintApp(App[None]):              self.write_file_path(self.get_backup_file_path()  ansi  _(""Auto-Save Failed""))              self.auto_saved_undo_count = len(self.undos)   +    def recover_from_backup(self) -> None: +        backup_file_path = self.get_backup_file_path() +        print(""Checking for backup at:""  backup_file_path  ""...it exists"" if os.path.exists(backup_file_path) else ""...it does not exist"") +        if os.path.exists(backup_file_path): +            # Recover f","add recover_from_backup method to paintapp","add automatically recover from backup file - recov"
"b5b302e51f609d1cfe0f87e1831e1829aed0013d","Rename things to avoid ambiguity of term ""auto-save""  ""Auto-save"" can mean saving the actual document you're editing; in this case it means saving a temporary backup file. I might even want to introduce auto-saving of the main file later on.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -1517 12 +1517 12 @@ class PaintApp(App[None]):      """"""A temporary undo state for tool previews""""""      saved_undo_count = 0      """"""Used to determine if the document has been modified since the last save  in is_document_modified()"""""" -    auto_saved_undo_count = 0 -    """"""Used to determine if the document has been modified since the last auto-save"""""" -    auto_save_after_cancel_preview = False -    """"""Flag to postpone auto-saving until a tool preview is reverted  so as not to save it into the backup fi","add docstrings for paintapp","add rename things to avoid ambiguity of term `` au"
"edd1c755e10dc5dfbe97b306f12de8e3e1343feb","Fix type checker error by extracting expression to a variable  I was going to add a type hint  but it seems to have figured it out now.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -254 7 +254 7 @@ class Tool(Enum):          # - Ellipse: ⬭⭕🔴🟠🟡🟢🔵🟣🟤⚫⚪🫧          # - Rounded Rectangle: ▢⬜⬛          if ascii_only_icons: -            return { +            enum_to_icon = {                  Tool.free_form_select: ""<[u]^[/]7""   # ""*"" ""<^>"" ""<[u]^[/]7""                  Tool.select: ""::""   # ""#"" ""::"" "":_:"" "":[u]:[/]:"" "":[u]'[/]:""                  Tool.eraser: ""[u]/[/]7""   # ""47"" ""27"" ""/_/"" ""[u]/[/]7"" @@ -271 7 +271 8 @@ class Tool(Enum):                  Tool.polygon: ""[b]L[/b]""   # ""L""      ","add ascii_only_icons to the tool","add fix type checker error by extracting expressio"
"c86d8c01ae81572cccd1ffd01133941d95ac47e1","Use bucket emoji for fill tool icon  outside of VS Code  Other terminals may fail  so perhaps I should just stick to the more reliable emoji  but the bucket is much better as an icon...","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -267 17 +267 25 @@ class Tool(Enum):                  Tool.text: ""A""   # ""Abc""                  Tool.line: ""\\""                   Tool.curve: ""~""   # ""~"" ""S"" ""s"" -                Tool.rectangle: ""[_]""   # ""[]"" +                Tool.rectangle: ""[_]""   # ""[]"" ""[_]"" (""[\x1B[53m_\x1B[55m]"" doesn't work right  is there no overline tag?)                  Tool.polygon: ""[b]L[/b]""   # ""L""                  Tool.ellipse: ""O""   # ""()"" -                Tool.rounded_rectangle: ""(_)""  +                Tool.rounded_rec","add missing tag for tool","add use bucket emoji for fill tool icon   outside"
"0d658d4a7f2eff2f6f32bb9926a940fcadb2c5ff","Restore old file path when Save As fails  and don't close the dialog","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -1918 7 +1918 9 @@ class PaintApp(App[None]):        def action_save(self) -> None:          """"""Start the save action  but don't wait for the Save As dialog to close if it's a new file."""""" -        task = asyncio.create_task(self.save()) +        async def save_ignoring_result() -> None: +            await self.save() +        task = asyncio.create_task(save_ignoring_result())          self.background_tasks.add(task)          task.add_done_callback(self.background_tasks.discard)   @@ -1938 8 +1940 11 @@ ","add doc for paintapp","add restore old file path when save as fails   and"
"f6bff095d6bffcda71a9882f3fca2f3ae6c0ad2d","Fix a theoretical race condition  and simplify  - This fixes a potential race condition where it could auto-save   to the wrong backup file while the file_path was temporarily   set to the path attempting to be written to    overwriting the backup if it existed  and leaving it behind on close    since the file_path would be reverted momentarily. - save_as() no longer uses save()  so save doesn't need a from_save_as   parameter to change the error dialog titles  and there's no more   conceptual awkwardness due to the fact that each function could call   the other. - discard_backup() no longer needs an optional parameter  because   we no longer discard a backup that isn't associated to the current   document's file_path. - The ""correct thing"" is now obvious enough that I don't feel the need   for the ""Don't discard the backup until..."" comment.   (And of course all that todo junk can go  although the Copy To bit   remains to do.)  It's nice when things Actually Get Simpler!","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -1956 13 +1956 13 @@ class PaintApp(App[None]):              print(""Saving as ANSI"")              return self.image.get_ansi()   -    async def save(self  from_save_as: bool = False) -> bool: +    async def save(self) -> bool:          """"""Save the image to a file.                    Note that this method will never return if the user cancels the Save As dialog.          """"""          self.stop_action_in_progress() -        dialog_title = _(""Save As"") if from_save_as else _(""Save"") +        dialog_title = ","add a comment to the save_as example","fix a theoretical race condition   and simplify -"
"a06cf807e008e434a963243b3a3046172b8a63ea","Fix immediate closing of dialog opened with Enter  For example  in the Open dialog  typing a filename that doesn't exist  and then hitting enter  it's supposed to say ""File not found""  but if the event isn't prevented/stopped  it will also be handled by the new dialog  and you won't even see it.","windows.py","from typing import Any  Optional  Callable from typing_extensions import Self from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import ge","from typing import Any  Optional  Callable from typing_extensions import Self from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import ge","@@ -367 10 +367 14 @@ class DialogWindow(Window):                  submit_button = self.query_one("".submit""  Button)              except NoMatches:                  return +            event.stop()              self.handle_button(submit_button)          elif event.key == ""escape"": +            event.stop()              # Like the title bar close button               # this doesn't call handle_button... +            # If you want to know if the dialog is canceled by closing  +            # you can listen for","update dialogwindow.py","update fix immediate closing of dialog opened with"
"ad9983ecfebb2545e85d2db8f1fed0065c32f269","Remove Static() wrappers and disable markup parsing for messages  - This is shorter/cleaner. - This is less prone to mistaken parentheses placement  although it   should give a type error to do `Static() + Static()` - I already disabled markup parsing for two cases where filenames are   interpolated  but there was still:   ""An unexpected error occurred while reading %1""   which was liable to misinterpret things as markup.   Note that anything in square brackets can be treated as markup and   become hidden  not just recognized tags like [red].","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -2082 7 +2082 7 @@ class PaintApp(App[None]):              if not button.has_class(""yes""):                  return              callback() -        self.message_box(_(""Save As"")  Static(message  markup=False)  ""yes/no""  handle_button) +        self.message_box(_(""Save As"")  message  ""yes/no""  handle_button)        def confirm_no_undo(self  callback: Callable[[]  None]) -> None:          """"""Asks the user to confirm that they want to continue with a permanent action."""""" @@ -2093 7 +2093 7 @@ class PaintApp","add confirm_no_undo to paintapp","remove static ( ) wrappers and disable markup pars"
"30eb9ba38f0cf61681d4afca86e22188c07b9cea","Fix confusing error message after opening backup of the active file  The backup of the current file will be deleted just after opening it. I should probably actually prevent that  but this commit just fixes an error message thrown up when trying to then open another file. It said ""File not found""  but confusingly was not referring to the file you were trying to open  but rather the currently open file.  Repro test steps: Open a file (optional)  make changes  and wait for backup to be saved; open the new .ans~ backup file (discarding changes to the main file)  then try to open any file. ""File not found"" message should not be shown.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -2183 11 +2183 37 @@ class PaintApp(App[None]):        def open_from_file_path(self  file_path: str  opened_callback: Callable[[]  None]) -> None:          """"""Opens the given file for editing  prompting to save changes if necessary."""""" -        try: -            # Note that os.path.samefile can raise FileNotFoundError -            if self.file_path and os.path.samefile(file_path  self.file_path): -                opened_callback() + +        # First  check if the file is already open. +        # We can't","add comment","fix fix confusing error message after opening back"
"51152faca6a8802a3db22a3d1d18a6a5603c0ee4","Include file path in error messages","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -2237 11 +2237 11 @@ class PaintApp(App[None]):                  else:                      go_ahead()          except FileNotFoundError: -            self.message_box(_(""Open"")  _(""File not found."") + ""\n"" + _(""Please verify that the correct path and file name are given."")  ""ok"") +            self.message_box(_(""Open"")  file_path + ""\n"" + _(""File not found."") + ""\n"" + _(""Please verify that the correct path and file name are given."")  ""ok"")          except IsADirectoryError: -            self.message_box","add file not found error message","add include file path in error messages file not f"
"fa173963f6e853d2d2deaed8d401d2a1733decb4","Reuse method to open files from CLI  with in-TUI error handling  Sigh  it didn't even get shorter  because of stupid async shit.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -3723 23 +3723 22 @@ if args.filename:      #     app.image = AnsiArtDocument.from_text(sys.stdin.read())      #     app.filename = ""<stdin>""      # else: -    try: -        # REMINDER: if changing this to use a method that calls recover_from_backup()  -        # remove the call below. -        with open(args.filename  'r') as my_file: -            app.image = AnsiArtDocument.from_text(my_file.read()) -            app.image_initialized = True -            app.file_path = os.path.abspath(args.filename) - ","add image_initialized argument to ansiart example","add reuse method to open files from cli   with in-"
"e37255fc9813174e43681c15bdddc9a29d16b85a","Reimplement --recode-samples in parallel  not loading into editor  Ooh  more importantly than running in parallel  this actually fixes error handling. I had chmodded a file to be read-only for testing  and this is failing on it loudly instead of silently ignoring an error that I didn't know about! Because it was silenced! That was a bit of a redundant way of saying that  but better to be heard than be SILENT...!                                                              *crickets*","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -1945 6 +1945 7 @@ class PaintApp(App[None]):              self.message_box(dialog_title  _(""An unexpected error occurred while writing %1.""  file_path) + ""\n\n"" + repr(e)  ""ok"")          return False   +    # TODO: make this a method of AnsiArtDocument      def encode_image(self  file_path: str  image: AnsiArtDocument) -> str:          """"""Encode the image according to the file extension.""""""          file_type = os.path.splitext(file_path)[1][1:].upper() @@ -3743 26 +3744 27 @@ else:    if args.recode_sa","add a comment to the example","add reimplement -- recode-samples in parallel   no"
"ef409f4756a06d75245cefb5a06e4ac7a6e9da22","Ignore a type checker error with watchdog observer.schedule  Type of ""schedule"" is partially unknown   Type of ""schedule"" is ""(event_handler: Unknown  path: Unknown  recursive: bool = False) -> ObservedWatch""PylancereportUnknownMemberType","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -115 7 +115 7 @@ def restart_on_changes():      """"""Restarts the current program when a file is changed""""""      global observer      observer = Observer() -    observer.schedule(RestartHandler( +    handler = RestartHandler(          # Don't need to restart on changes to .css  since Textual will reload them in --dev mode          # Could include localization files  but I'm not actively localizing this app at this point.          # WET: WatchDog doesn't match zero directories for **  so we have to split up","add comment","add ignore a type checker error with watchdog obse"
"d90449e2dee92371fc6e5577939f44c0349fcf52","Fix type errors in watchdog thread cleanup  - `observer` can be None  if --restart-on-changes was not passed  but   the hotkey F2 is pressed. - `is_alive` is a bound method  not a property. It was definitely used   like a property in the code I referenced.  I didn't fix these type checker errors for a long time because:   1. they never caused actual problems for me  and   2. when adding a type annotation `observer: Observer | None`  Pyright      gets even _more_ confused  saying it's Unknown | None instead of      BaseObserver | None. The secret trick was to leave it unannotated.   3. Adding parentheses to make it `is_alive()` also made Pyright seem      even more confused  saying it was Unknown — until I added the      conditional.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -65 10 +65 11 @@ def restart_program():        try:          try: -            observer.stop() -            observer.join(timeout=1) -            if observer.is_alive: -                print(""Timed out waiting for file change observer thread to stop."") +            if observer: +                observer.stop() +                observer.join(timeout=1) +                if observer.is_alive(): +                    print(""Timed out waiting for file change observer thread to stop."")          except RuntimeEr","fix restart_program for windows","fix fix type errors in watchdog thread cleanup - `"
"de4cf01f7372713ee2d828a91e53ef082c42039d","Fix scrolling in editing area  broken when updating Textual  somewhere from 0.19.0 to 0.22.3","paint.css","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128); } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width: 15;     height: 100","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128);     overflow: auto; } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width:","@@ -14 6 +14 7 @@ Screen {  #editing_area {      width: 1fr;      background: rgb(128  128  128); +    overflow: auto;  }  .-dark-mode #editing_area {      background: $surface-lighten-2; ","add missing style","update fix scrolling in editing area   broken when"
"91ad4940632f844b2dcea87a0b0bd5e28c05177b","Detect file as ANSI if it includes tab  bell  backspace  etc.  This fixes opening/pasting text containing tabs (but not escape codes)  for instance if you want to copy/paste a table of characters  as I did.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -592 7 +592 40 @@ def selected_text(textbox: Selection) -> str:    debug_region_updates = False   -ansi_escape_pattern = re.compile(r""(\N{ESC}\[[\d;]*[a-zA-Z])"") + +# Detects ANSI escape sequences. +# ansi_escape_pattern = re.compile(r""(\N{ESC}\[[\d;]*[a-zA-Z])"") + +# Detects all control codes  including newlines and tabs. +# ansi_control_code_pattern = re.compile(r'[\x00-\x1F\x7F]') + +# Detects all control codes  including tabs and carriage return (CR) if used alone  but excluding line feed (LF) and CR","add a comment for the selected text","add detect file as ansi if it includes tab   bell"
"6a650b7547db128679e51695148b7ddaf0ccf3c2","Fix missing last row when loading ANSI file not ending with a newline  This fixes loading samples/4x4_font_template.ans  and I should be able to rebase my code for more efficient ANSI file saving  where I was also running into missing last rows.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -899 11 +899 8 @@ class AnsiArtDocument:                      elif char == '\n':                          x = 0                          y += 1 -                        height = max(y  height) -                        if len(document.ch) <= y: -                            document.ch.append([]) -                            document.bg.append([]) -                            document.fg.append([]) +                        # Don't increase height until there's a character to put in the new row. +          ","fix height of new line in ansiart document","update fix missing last row when loading ansi file"
"7baba86a68507479af2a3bdd78ff0e1870973358","Fix type checker errors by making a return type more specific  With the more general type  it was giving:    /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:38 - error: Cannot access member ""markup"" for type ""ConsoleRenderable""     Member ""markup"" is unknown (reportGeneralTypeIssues)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:16 - error: Type of ""markup"" is unknown (reportUnknownMemberType)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:38 - error: Cannot access member ""markup"" for type ""RichCast""     Member ""markup"" is unknown (reportGeneralTypeIssues)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:38 - error: Cannot access member ""markup"" for type ""str""     Member ""markup"" is unknown (reportGeneralTypeIssues)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:16 - error: Return type is unknown (reportUnknownVariableType)","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -17 7 +17 7 @@ from watchdog.observers import Observer  import stransi  from rich.segment import Segment  from rich.style import Style -from rich.console import Console  RenderableType +from rich.console import Console  from rich.text import Text  from textual import events  from textual.message import Message @@ -807 7 +807 7 @@ class AnsiArtDocument:          console = self.get_console()          return console.export_svg(code_format=CUSTOM_CONSOLE_SVG_FORMAT)       -    def get_renderable(self) -> Ren","add missing docstrings","add fix type checker errors by making a return typ"
"1cdf57095570f04eedd50ee39d6cacae19b2dd72","Handle minimum height at end so it no longer needs one row initially  Regarding ""Initial document is zero wide to avoid an extraneous character at (0 0)""  this is not necessary anymore since I (recently) changed it to set  rather than append  values. Regarding ""...but needs one row to avoid IndexError""  this commit removes that constraint. It could now be initialized with size (1  1) or (0  0) or even (1  0) I suppose  although that's not really a contender.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -872 10 +872 8 @@ class AnsiArtDocument:            ansi = stransi.Ansi(text)   -        # Initial document is zero wide to avoid an extraneous character at (0 0)  -        # but needs one row to avoid IndexError. -        document = AnsiArtDocument(0  1  default_bg  default_fg) -        # Ultimately  the minimum size is 1x1. +        document = AnsiArtDocument(0  0  default_bg  default_fg) +        # Minimum size of 1x1  so that the document is never empty.          width = 1          height = 1   @@ -8","add missing doc comment","add handle minimum height at end so it no longer n"
"9653bfd9d8260f0f5cd7688a3199e90583048061","Handle file extensions vs PIL format IDs  They usually correspond very closely  like .png -> PNG  but are are more distinct for some formats  like .jp2 -> JPEG2000.  - Handle formats like JPEG2000 that differ in name from the extension. - Bring my own file ext handling in line with PIL: use dotted lowercase. - Raise an exception when a file format is detected but not supporting   for reading or for writing  depending on the attempted operation.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -828 32 +828 31 @@ class AnsiArtDocument:        def encode_based_on_file_extension(self  file_path: str) -> bytes:          """"""Encode the image according to the file extension."""""" -        file_type = os.path.splitext(file_path)[1][1:].upper() -        print(""File extension (normalized to uppercase):""  file_type) -        exts = Image.registered_extensions() -        supported_extensions = [ext[1:].upper() for ext  f in exts.items() if f in Image.SAVE] +        file_ext_with_dot = os.path.splitext(file_","add missing comment","add handle file extensions vs pil format ids they"
"c24c164004702c5756b94174cafdc8cfa73f93c1","Add error handling to Save As for encode_based_on_file_extension","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -2252 11 +2252 15 @@ class PaintApp(App[None]):          saved_future: asyncio.Future[None] = asyncio.Future()            def handle_selected_file_path(file_path: str) -> None: -            def on_save_confirmed(): -                async def async_on_save_confirmed(): +            def on_save_confirmed() -> None: +                async def async_on_save_confirmed() -> None:                      self.stop_action_in_progress() -                    content = self.image.encode_based_on_file_extension(file_pa","add example for image painting","add error handling to save as for encode_based_on_"
"1cd6b24e33dce48a73b95d38a118835db9c8aeda","Don't close Copy To dialog if there's an error","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -2310 8 +2310 8 @@ class PaintApp(App[None]):                          # confirm_overwrite dialog isn't modal  so we need to check again                          self.message_box(_(""Copy To"")  _(""No selection."")  ""ok"")                          return -                    self.write_file_path(file_path  content  _(""Copy To"")) -                    window.close() +                    if self.write_file_path(file_path  content  _(""Copy To"")): +                        window.close()                  # https:/","fix copy to dialog","update do n't close copy to dialog if there 's an"
"9ad1933310b733e388b674ab9a5b28e72445719c","Improve error handling for unsupported format reading/writing","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -760 6 +760 18 @@ body {{  """"""     +class FormatWriteNotSupported(Exception): +    """"""The format doesn't support writing."""""" +    def __init__(self  localized_message: str): +        self.localized_message = localized_message +        super().__init__(localized_message) + +class FormatReadNotSupported(Exception): +    """"""The format doesn't support reading."""""" +    def __init__(self  localized_message: str): +        self.localized_message = localized_message +        super().__init__(localized_message) +","add missing class attributes","update improve error handling for unsupported form"
"7bc86bc483e9e1a6c7f5a893365c16add2094412","Fix error handling for decode_based_on_file_extension  - UnicodeDecodeError was caught in a more general error handler;   now it's allowed to reach the more specific handler. - UnidentifiedImageError and FormatReadNotSupported were missing return;   now it's not caught there so it doesn't need to  as the exception will   interrupt the control flow.","paint.py","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","#!/usr/bin/env python3  import io import os import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.console import C","@@ -1127 7 +1127 10 @@ class AnsiArtDocument:        @staticmethod      def from_image_format(content: bytes) -> 'AnsiArtDocument': -        """"""Creates a document from the given bytes  detecting the file format."""""" +        """"""Creates a document from the given bytes  detecting the file format. +         +        Raises UnidentifiedImageError if the format is not detected. +        """"""          image = Image.open(io.BytesIO(content))          rgb_image = image.convert('RGB')          width  height = rgb_imag","add missing docstring","add fix error handling for decode_based_on_file_ex"
"79cbeb9e303cf18b6892e46c23601f3babd39a7e","Fix corrupted upper left pixel in sample file  (This bug has since been fixed.)","ship dark sails.ans","[38;2;0;0;0;48;2;255;255;255m [0m[38;2;127;63;0;48;2;127;255;255m                                                                               [0m [38;2;127;63;0;48;2;127;255;255m                           [0m[38;2;0;128;128;48;2;127;255;255m▓[0m[38;2;127;63;0;48;2;127;255;255m                                                    [0m [38;2;127;63;0;48;2;127;255;255m                   [0m[38;2;0;128;128;48;2;127;255;255m▓▓▓▓▓▓▓▓▓▓[0m[38;2;127;63;0;48;2;127;255;255m                     [0m[38;","[38;2;127;63;0;48;2;127;255;255m                                                                                [0m [38;2;127;63;0;48;2;127;255;255m                           [0m[38;2;0;128;128;48;2;127;255;255m▓[0m[38;2;127;63;0;48;2;127;255;255m                                                    [0m [38;2;127;63;0;48;2;127;255;255m                   [0m[38;2;0;128;128;48;2;127;255;255m▓▓▓▓▓▓▓▓▓▓[0m[38;2;127;63;0;48;2;127;255;255m                     [0m[38;2;0;0;128;48;2;127;255;255m░░[0m","@@ -1 4 +1 4 @@ -[38;2;0;0;0;48;2;255;255;255m [0m[38;2;127;63;0;48;2;127;255;255m                                                                               [0m +[38;2;127;63;0;48;2;127;255;255m                                                                                [0m  [38;2;127;63;0;48;2;127;255;255m                           [0m[38;2;0;128;128;48;2;127;255;255m▓[0m[38;2;127;63;0;48;2;127;255;255m                                                    [0m  [38;2;127;63;0;48;2;127;255;","add missing punctuation","add fix corrupted upper left pixel in sample file"
"cdf30c49f98299d8350bfe08cc5f3c7b7b899582","Fix 103 type checker errors by annotating height (and not width)","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","@@ -778 8 +778 15 @@ class AnsiArtDocument:        def __init__(self  width: int  height: int  default_bg: str = ""#ffffff""  default_fg: str = ""#000000"") -> None:          """"""Initialize the document."""""" +        # Pyright is really confused by height for some reason  doesn't have a problem with width. +        # I narrowed it down to the resize method  lines with new_bg/new_fg  but +        # I have no idea why that would be a problem. +        # Ideally I would try to pare this down to a minimal reproducibl","add a comment","add fix 103 type checker errors by annotating heig"
"f00bf63feda678f879abcf27abd06b86e4145d8c","Ignore .flf files for spell checking (even though there's no issues)","cspell.json","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""*.egg-info/**/*"" 	]  	""words"": [ 		""appscript""  		""asyncio""  		""bezier""  		""Bresenham""  		""Bresenham'","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""*.egg-info/**/*"" 	]  	""words"": [ 		""appscript""  		""asyncio""  		""bezier""  		""Bresenham""  		""Bresen","@@ -11 7 +11 7 @@  	]   	""ignorePaths"": [  		"".git""  -		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans)""  +		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""   		""*.log""   		""**/localization/*/**/*""   		""**/localization/*.sh""  ","ignore localization files in gitignore","update ignore .flf files for spell checking ( even"
"4589d9a147b53e369475ea67e7f7a368f0c275ea","Clarify _fixFigChars with comments  Within the span of like a day I forgot that FIGlet fonts can be proportional and came back to this code and was confused why charWidth needs to be a dictionary. Well it doesn't NEED to be  it could be implemented differently  for instance by fixing the height first  it wouldn't need to calculate a number of spaces for the blank lines — but how it's implemented  the width fixup could be disabled  and the height fixup would still work. So even though the code would be a little simpler  I'm not sure it would be better that way.","figlet_font_writer.py"," __author__ = ""Patrick Gillespie"" __maintainer__ = ""Isaiah Odhner"" __copyright__ = ""Copyright (c) Patrick Gillespie"" __license__ = ""MIT"" """""" Copyright (c) 2023 Patrick Gillespie  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicense  and/or sell copies of the Software  and"," __author__ = ""Patrick Gillespie"" __maintainer__ = ""Isaiah Odhner"" __copyright__ = ""Copyright (c) Patrick Gillespie"" __license__ = ""MIT"" """""" Copyright (c) 2023 Patrick Gillespie  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicense  and/or sell copies of the Software  and","@@ -238 6 +238 8 @@ Additional characters must use code tagged characters  which are not yet support          return ' '.join(header)        def _fixFigChars(self): +        # Height must be constant for all FIGcharacters. +        # Width can vary  but must be consistent for all rows within a FIGcharacter.          height = 0          charWidth: dict[int  int] = {}          maxWidth = 0 @@ -247 7 +249 7 @@ Additional characters must use code tagged characters  which are not yet support              for ii ","add missing docstring","fix clarify _fixfigchars with comments within the"
"601e50d5b5ed36b3fabd11afa704150df89df937","Give error if you try to load HTML/SVG  - DRY: Make decode_based_on_file_extension use format_from_extension. - If you try to load .html  .htm  .svg  (or ._rich_console_markup) file    show an error instead of loading as text. The text would be much   larger than a document you saved in this format  and it wouldn't give   you what you expect  unless you're wanting to load an arbitrary text   file for viewing  and for some reason choose this program to do it.","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","@@ -1174 20 +1174 22 @@ class AnsiArtDocument:          Raises UnicodeDecodeError  which can be a very long message  so make sure to handle it!          Raises UnidentifiedImageError if the format is not detected.          """""" - -        file_ext_with_dot = os.path.splitext(file_path)[1].lower() -        print(""File extension:""  file_ext_with_dot) -        ext_to_id = Image.registered_extensions() # maps extension to format ID  e.g. '.jp2': 'JPEG2000' (most format IDs are similar to the extension) -        ","add a comment","add give error if you try to load html/svg - dry :"
"6a3ab712a5743af2a134d14a8af12db37e4a4f81","Include error traceback in message boxes  shown by clicking Show Details","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","@@ -2216 7 +2216 7 @@ class PaintApp(App[None]):                      backup_image = AnsiArtDocument.from_text(backup_content)                      # TODO: make backup use image format when appropriate              except Exception as e: -                self.message_box(_(""Paint"")  _(""A backup file was found  but was not recovered."") + ""\n"" + _(""An unexpected error occurred while reading %1.""  backup_file_path) + ""\n\n"" + repr(e)  ""ok"") +                self.message_box(_(""Paint"")  _(""A backup file was fou","add a note about the error","add include error traceback in message boxes   sho"
"6a3ab712a5743af2a134d14a8af12db37e4a4f81","Include error traceback in message boxes  shown by clicking Show Details","windows.py","from typing import Any  Optional  Callable from typing_extensions import Self from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import ge","from typing import Any  Optional  Callable from typing_extensions import Self from textual import events  on from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n impor","@@ -1 6 +1 6 @@  from typing import Any  Optional  Callable  from typing_extensions import Self -from textual import events +from textual import events  on  from textual.message import Message  from textual.app import ComposeResult  from textual.containers import Container @@ -584 6 +584 7 @@ class MessageBox(DialogWindow):          button_types: str = ""ok""           icon_widget: Optional[Widget]           handle_button: Callable[[Button]  None]  +        error: Exception | None = None           **kwargs: A","add missing docstrings","add include error traceback in message boxes   sho"
"55419d671e53dd0d43a2238836b810fe7fadca6d","Fix API breakage from changes in textual 0.23.0","enhanced_directory_tree.py","import os from pathlib import Path from typing import Iterable from textual.widgets import DirectoryTree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):     def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:         return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]      def expand_to_path(self  target_path: str) -> None:         ""","import os from pathlib import Path from typing import Iterable from textual.widgets import DirectoryTree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):     def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:         return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]      def expand_to_path(self  target_path: str) -> None:         ""","@@ -23 8 +23 7 @@ class EnhancedDirectoryTree(DirectoryTree):          node = self.root          def get_node_name(node: TreeNode[DirEntry]) -> str:              assert node.data -            return os.path.basename(node.data.path.rstrip(os.path.sep)) -            # return os.path.basename(node.data.path.rstrip(""/\\"")) +            return os.path.basename(node.data.path)          for path_segment in target_path.split(os.path.sep):              # Find the child node with the right name.              for chil","add missing docstring","update fix api breakage from changes in textual 0."
"55419d671e53dd0d43a2238836b810fe7fadca6d","Fix API breakage from changes in textual 0.23.0","file_dialogs.py","import os from typing import Any  Callable from textual.containers import Container from textual.widget import Widget from textual.widgets import Button  Input  Tree  Label from textual.containers import Horizontal from textual.widgets._directory_tree import DirEntry from textual.containers import Container from localization.i18n import get as _ from windows import DialogWindow from enhanced_directory_tree import EnhancedDirectoryTree  class FileDialogWindow(DialogWindow):     """"""A dialog window that lets t","import os from typing import Any  Callable from textual.containers import Container from textual.widget import Widget from textual.widgets import Button  Input  Tree  Label from textual.containers import Horizontal from textual.widgets._directory_tree import DirEntry from textual.containers import Container from localization.i18n import get as _ from windows import DialogWindow from enhanced_directory_tree import EnhancedDirectoryTree  class FileDialogWindow(DialogWindow):     """"""A dialog window that lets t","@@ -85 11 +85 11 @@ class FileDialogWindow(DialogWindow):          DirectoryTree gives FileSelected  but only for files  not folders.          """"""          assert event.node.data -        if event.node.data.is_dir: -            self._directory_tree_selected_path = event.node.data.path +        if event.node.data.path.is_dir(): +            self._directory_tree_selected_path = str(event.node.data.path)          elif event.node.parent:              assert event.node.parent.data -            self._directory_tr","update directory tree dialog window","update fix api breakage from changes in textual 0."
"8458ccf3c9a2e400f2971b806c2471f202b1ced3","Visualize cell bucketing for debug","cspell.json","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""*.egg-info/**/*"" 	]  	""words"": [ 		""appscript""  		""asyncio""  		""bezier""  		""Bresenham""  		""Bresen","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""*.egg-info/**/*"" 	]  	""words"": [ 		""appscript""  		""asyncio""  		""bezier""  		""Bresenham""  		""Bresen","@@ -28 6 +28 7 @@  		""Bresenham""   		""Bresenham's""   		""cmdpxl""  +		""dasharray""   		""Deutsch""   		""DIALOGEX""   		""Figlet""  ","add missing test case","update visualize cell bucketing for debug add miss"
"8458ccf3c9a2e400f2971b806c2471f202b1ced3","Visualize cell bucketing for debug","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","@@ -1189 6 +1189 19 @@ class AnsiArtDocument:          """"""          import xml.etree.ElementTree as ET          root = ET.fromstring(svg) + +        def add_debug_marker(x: float  y: float  color: str) -> None: +            """"""Adds a circle to the SVG at the given position  for debugging."""""" +            # without the namespace  it won't show up! +            marker = ET.Element(""{http://www.w3.org/2000/svg}circle"") +            marker.attrib[""cx""] = str(x) +            marker.attrib[""cy""] = str(y) +       ","add a new marker to ansiart document","add visualize cell bucketing for debug a new marke"
"d618cab0c9f9b4deae9e8aa25a6e0aac2f4969f6","Make debug visuals line up when grid origin is not at (0 0)  as is the case with the pathological SVG test case (combative_character_grid.svg)","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","@@ -1298 11 +1298 11 @@ class AnsiArtDocument:                  return None            for rect in rects: -            x = (float(rect.attrib[""x""]) + float(rect.attrib[""width""])/2 - min_x) -            y = (float(rect.attrib[""y""]) + float(rect.attrib[""height""])/2 - min_y) +            x = (float(rect.attrib[""x""]) + float(rect.attrib[""width""])/2) +            y = (float(rect.attrib[""y""]) + float(rect.attrib[""height""])/2)              add_debug_marker(x  y  ""red"") -            x = int(x / cell_width) -       ","add debug marker for ansiart document","add make debug visuals line up when grid origin is"
"d323c25ed44ab43a99279b8884474d5cac4dacf8","Add debug markers for grid bounds (min/max)","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style f","@@ -1265 6 +1265 8 @@ class AnsiArtDocument:          min_y = min(float(rect.attrib[""y""]) for rect in rects)          max_x = max(float(rect.attrib[""x""]) + float(rect.attrib[""width""]) for rect in rects)          max_y = max(float(rect.attrib[""y""]) + float(rect.attrib[""height""]) for rect in rects) +        add_debug_marker(min_x  min_y  ""blue"") +        add_debug_marker(max_x  max_y  ""blue"")          width = int((max_x - min_x) / cell_width)          height = int((max_y - min_y) / cell_height)          # Adj","add debug markers","add debug markers for grid bounds ( min/max ) add"
"453111269e7164199ca4fc0d3bed2aed19f7e905","VS Code: fix auto-imports for textual modules","settings.json","{     ""css.validate"": false }","{     ""python.analysis.packageIndexDepths"": [         // The default depth is 1 (top-level only)          // which doesn't let auto-imports work for Textual          // i.e. the Quick Fix for missing names  and         // maybe an auto-complete feature that I don't use.         // (2 might be sufficient.)         // https://github.com/Textualize/textual/issues/2104         {""name"": ""textual""  ""depth"": 5}     ]      ""css.validate"": false }","@@ -1 3 +1 12 @@  { +    ""python.analysis.packageIndexDepths"": [ +        // The default depth is 1 (top-level only)  +        // which doesn't let auto-imports work for Textual  +        // i.e. the Quick Fix for missing names  and +        // maybe an auto-complete feature that I don't use. +        // (2 might be sufficient.) +        // https://github.com/Textualize/textual/issues/2104 +        {""name"": ""textual""  ""depth"": 5} +    ]       ""css.validate"": false  } \ No newline at end of file ","add missing packageindexdepths section","add vs code : fix auto-imports for textual modules"
"14725279c968eec3895e19132c9b373093966d7c","Got it working  It handles the pathological character grid test case SVG I devised  as well as loading the SVG as saved by the app.  It's a little weird that I managed to get the pathological case working before the simple rigid grid  but it was what I was shooting for  and the main problem with the rigid grid was the spanned rects  which I didn't think of when making the test case SVG.  It does have one problem left; characters that are wider than a cell  when saved as SVG  take up two cells  but in my SVG loading code  they're just placed in one cell  so  when saving and loading  it shifts content to the right of the wide character rightwards  expanding the region of the background from the wide character's cell. But it converges now.","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  NamedTuple  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style im","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  NamedTuple  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style im","@@ -1266 13 +1266 22 @@ class AnsiArtDocument:          def rect_center(rect: ET.Element  coord_attrib: str) -> float:              return float(rect.attrib[coord_attrib]) + float(rect.attrib[""width"" if coord_attrib == ""x"" else ""height""]) / 2          for (coord_attrib  min_rect_size) in [(""x""  min_width)  (""y""  min_height)]: -            tracks = [Track([rect]  rect_center(rect  coord_attrib)  rect_center(rect  coord_attrib)) for rect in rects] +            # size_attrib = ""width"" if coord_attrib == ""x"" el","add track example","add got it working it handles the pathological cha"
"53928645521cee72ac6d72fd8126b753b978e00f","Update readme regarding SVG loading  Not sure if some of this should go in Known Issues  maybe with a ""see Known Issues"" reference  but I might just fix these things soon.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -25 7 +25 10 @@ This is a TUI (Text User Interface) image editor  inspired by MS Paint  built wi    - File formats  chosen by typing a file extension in the Save As dialog:      - [x] ANSI (.ans) — Note that while it handles many more ANSI control codes when loading than those that it uses to save files  you may have limited success loading other ANSI files that you find on the web  or create with other tools. ANSI files can vary a lot and even encode animations!      - [x] Plain Text (.txt) — discards c","add note about save file extension","fix update readme regarding svg loading not sure i"
"445d29268fa99214ba0eef32755712a9100c7a57","Fix type checker error","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  NamedTuple  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style im","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Generator  List  NamedTuple  Optional  Callable  Iterator  Tuple  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style im","@@ -1326 7 +1326 8 @@ class AnsiArtDocument:              return Track(track1.rects + track2.rects  min(track1.min_center  track2.min_center)  max(track1.max_center  track2.max_center))          def rect_center(rect: ET.Element  coord_attrib: str) -> float:              return float(rect.attrib[coord_attrib]) + float(rect.attrib[""width"" if coord_attrib == ""x"" else ""height""]) / 2 -        for (coord_attrib  min_rect_size) in [(""x""  min_width)  (""y""  min_height)]: +        axes: list[tuple[str  float]] = [(""x","fix track center in ansiart","update fix type checker error fix track center in"
"e9755637d6f94272bf77879854a6a10a107235f2","Update Textual to 0.26.0  Both issues I opened have been fixed! :)","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -195 8 +195 6 @@ To preview ANSI art files in file managers like Nautilus  Thunar  Nemo  or Caja   - Menu items like Copy/Cut/Paste are not grayed out when inapplicable. Only unimplemented items are grayed out.  - Set As Wallpaper may not work on your system. For me  on Ubuntu  the wallpaper setting is updated but the picture is not  unless I manually pick it. There is however untested support for many platforms  and you may have better luck than me.  - If you paste and then stamp the selection with Ctrl","add description of wallpaper menu item","add update textual to 0.26.0 both issues i opened"
"e9755637d6f94272bf77879854a6a10a107235f2","Update Textual to 0.26.0  Both issues I opened have been fixed! :)","requirements.txt","appscript==1.2.2; sys_platform == 'darwin' Pillow==9.5.0 psutil==5.9.0 pyfiglet==0.8.post1 # PyGObject==3.42.1 pyperclip==1.8.2 pyxdg==0.28 rich==13.3.5 stransi==0.3.0 textual[dev]==0.24.1 watchdog==3.0.0 ","appscript==1.2.2; sys_platform == 'darwin' Pillow==9.5.0 psutil==5.9.0 pyfiglet==0.8.post1 # PyGObject==3.42.1 pyperclip==1.8.2 pyxdg==0.28 rich==13.3.5 stransi==0.3.0 textual[dev]==0.26.0 watchdog==3.0.0 ","@@ -7 5 +7 5 @@ pyperclip==1.8.2  pyxdg==0.28  rich==13.3.5  stransi==0.3.0 -textual[dev]==0.24.1 +textual[dev]==0.26.0  watchdog==3.0.0 ","update perclip version","update update textual to 0.26.0 both issues i open"
"0edd1712336d5a1e4d73375c7fa00dfeb3416bb7","Clean up imports  I had kept these around because several of these I'll want to use  and the auto-import feature wasn't working  but I've since found a fix for that (in 453111269e7164199ca4fc0d3bed2aed19f7e905). I'm also adding rich here to fix auto-imports from rich.","settings.json","{     ""python.analysis.packageIndexDepths"": [         // The default depth is 1 (top-level only)          // which doesn't let auto-imports work for Textual          // i.e. the Quick Fix for missing names  and         // maybe an auto-complete feature that I don't use.         // (2 might be sufficient.)         // https://github.com/Textualize/textual/issues/2104         {""name"": ""textual""  ""depth"": 5}     ]      ""css.validate"": false }","{     ""python.analysis.packageIndexDepths"": [         // The default depth is 1 (top-level only)          // which doesn't let auto-imports work for Textual          // i.e. the Quick Fix for missing names  and         // maybe an auto-complete feature that I don't use.         // (2 might be sufficient.)         // https://github.com/Textualize/textual/issues/2104         {""name"": ""textual""  ""depth"": 5}          {""name"": ""rich""  ""depth"": 5}      ]      ""css.validate"": false }","@@ -6 7 +6 8 @@          // maybe an auto-complete feature that I don't use.          // (2 might be sufficient.)          // https://github.com/Textualize/textual/issues/2104 -        {""name"": ""textual""  ""depth"": 5} +        {""name"": ""textual""  ""depth"": 5}  +        {""name"": ""rich""  ""depth"": 5}       ]       ""css.validate"": false  } \ No newline at end of file ","add missing comment","add clean up imports i had kept these around becau"
"0edd1712336d5a1e4d73375c7fa00dfeb3416bb7","Clean up imports  I had kept these around because several of these I'll want to use  and the auto-import feature wasn't working  but I've since found a fix for that (in 453111269e7164199ca4fc0d3bed2aed19f7e905). I'm also adding rich here to fix auto-imports from rich.","edit_colors.py","from typing import Any  Union  Optional  Callable from textual import events from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _ from windows import DialogWindow","from typing import Any  Callable from textual.containers import Container from textual.widget import Widget from textual.widgets import Button from textual.containers import Container from localization.i18n import get as _ from windows import DialogWindow   # https://github.com/kouzhudong/win2k/blob/ce6323f76d5cd7d136b74427dad8f94ee4c389d2/trunk/private/shell/win16/comdlg/color.c#L38-L43 # These are a fallback in case colors are not received from some driver. # const default_basic_colors = [ # 	""#8080FF""  ""","@@ -1 14 +1 8 @@ -from typing import Any  Union  Optional  Callable -from textual import events -from textual.message import Message -from textual.app import ComposeResult +from typing import Any  Callable  from textual.containers import Container -from textual.geometry import Offset -from textual.reactive import var  from textual.widget import Widget -from textual.widgets import Button  Static -from textual.containers import Container  Horizontal  Vertical -from textual.css.query import NoMatches +from tex","add missing import","add clean up imports i had kept these around becau"
"85ec3627cdd264fa4e815e42c34c96c6d10a89f5","Fix Path vs str type error  It didn't actually cause an error at runtime because format_from_extension just uses os.path.splitext  which uses os.fspath which converts Path objects to path strings.","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  NamedTuple  Optional  Callable  Iterator  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.con","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  NamedTuple  Optional  Callable  Iterator  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.con","@@ -4451 9 +4451 9 @@ if args.recode_samples:          """"""Re-encodes a single sample file.""""""          print(f""Re-encoding {file_path}"")          with open(file_path  ""rb"") as f: -            image = AnsiArtDocument.decode_based_on_file_extension(f.read()  file_path) +            image = AnsiArtDocument.decode_based_on_file_extension(f.read()  str(file_path))          with open(file_path  ""wb"") as f: -            f.write(image.encode_based_on_file_extension(file_path)) +            f.write(image.encode_base","add comment","add fix path vs str type error it did n't actually"
"7f28470f78752be59158a3a4e3d30ab3c3dfe389","Note an issue","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -198 6 +198 7 @@ To preview ANSI art files in file managers like Nautilus  Thunar  Nemo  or Caja   - The Open dialog's file tree view doesn't scroll down to the initially selected file/folder.  - ANSI files (.ans) are treated as UTF-8 when saving and loading  rather than CP437 or Windows-1252 or any other encodings. Unicode is nice and modern terminals support it  but it's not the standard for ANSI files. There isn't really a standard for ANSI files.  - ANSI files are loaded with a white background. This","add a note about the encoding of .ans files","add note an issue a note about the encoding of .an"
"2aea62bff5395985e314c2d47166f090014d51c5","Fix NoMatches crash if you tab to the color grid and then use arrows","edit_colors.py","from typing import Any  Callable from textual import events  on from textual.containers import Container from textual.widget import Widget from textual.widgets import Button from textual.containers import Container from localization.i18n import get as _ from windows import DialogWindow   # https://github.com/kouzhudong/win2k/blob/ce6323f76d5cd7d136b74427dad8f94ee4c389d2/trunk/private/shell/win16/comdlg/color.c#L38-L43 # These are a fallback in case colors are not received from some driver. # const default_b","from typing import Any  Callable from textual import events  on from textual.containers import Container from textual.css.query import NoMatches from textual.widget import Widget from textual.widgets import Button from textual.containers import Container from localization.i18n import get as _ from windows import DialogWindow   # https://github.com/kouzhudong/win2k/blob/ce6323f76d5cd7d136b74427dad8f94ee4c389d2/trunk/private/shell/win16/comdlg/color.c#L38-L43 # These are a fallback in case colors are not rece","@@ -1 6 +1 7 @@  from typing import Any  Callable  from textual import events  on  from textual.containers import Container +from textual.css.query import NoMatches  from textual.widget import Widget  from textual.widgets import Button  from textual.containers import Container @@ -76 7 +77 10 @@ class ColorGrid(Container):            def _navigate_relative(self  delta: int) -> None:          """"""Navigate to a color relative to the currently focused color."""""" -        focused = self.query_one("".selected""  But","add missing docstrings","add fix nomatches crash if you tab to the color gr"
"cf979114a9c930e1b98b897c95a6cd749c9877dc","Refactor: remove class LabeledInput so it's easy to get at the Inputs  Now that I'm creating the inputs dynamically  it doesn't help to have a class for labeled inputs. And `self._inputs_by_letter[component_letter] = labeled_inputs[-1].query_one(Input)` failed  because it's not mounted yet.","edit_colors.py","from typing import Any  Callable from rich.color import Color as RichColor from rich.segment import Segment from rich.style import Style from textual import events  on from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.strip import Strip from textual.color import Color as TextualColor from textual.widget import Widget from textual.widgets import Button  Input  Label  Place","from typing import Any  Callable from rich.color import Color as RichColor from rich.segment import Segment from rich.style import Style from textual import events  on from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.strip import Strip from textual.color import Color as TextualColor from textual.widget import Widget from textual.widgets import Button  Input  Label  Place","@@ -137 22 +137 6 @@ class ColorGrid(Container):      #     """"""Called when a color button is clicked.""""""      #     self.selected_color = self._color_by_button[event.control]   -class LabeledInput(Container): -    """"""A label and an input field."""""" - -    def __init__(self  label_text: str  value: str | None = None  **kwargs: Any) -> None: -        """"""Initialize the LabeledInput."""""" -        super().__init__(**kwargs) -        self.label_text = label_text -        self.value = value - -    def compose(self) ","add missing docstrings","remove refactor : class labeledinput so it 's easy"
"cf979114a9c930e1b98b897c95a6cd749c9877dc","Refactor: remove class LabeledInput so it's easy to get at the Inputs  Now that I'm creating the inputs dynamically  it doesn't help to have a class for labeled inputs. And `self._inputs_by_letter[component_letter] = labeled_inputs[-1].query_one(Input)` failed  because it's not mounted yet.","paint.css","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128);     overflow: auto; } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width:","Screen {     layers: window menu-popup;     overflow: hidden; }  #paint {     layout: vertical; }  #main_horizontal_split {     layout: horizontal; }  #editing_area {     width: 1fr;     background: rgb(128  128  128);     overflow: auto; } .-dark-mode #editing_area {     background: $surface-lighten-2; }   #canvas {     width: auto;     height: auto;     margin: 1 2; }  #tools_box {     layout: grid;     grid-size: 2;     grid-gutter: 0 1;     grid-columns: 6;     grid-rows: 3;     padding: 0 1;     width:","@@ -363 16 +363 16 @@ EditColorsDialogWindow Vertical {      height: auto;      width: auto;  } -EditColorsDialogWindow LabeledInput { +EditColorsDialogWindow .input_container {      width: 16;      height: auto;      margin-bottom: 1;      layout: horizontal;  } -EditColorsDialogWindow LabeledInput Input { +EditColorsDialogWindow .input_container Input {      width: 8;  } -EditColorsDialogWindow LabeledInput Label { +EditColorsDialogWindow .input_container Label {      width: 1fr;      height: auto;      t","add missing margin-bottom to editcolorsdialogwindow","remove refactor : class labeledinput so it 's easy"
"6f1476be8f6a2cb1714935e0f2d7bf2603f35945","Handle min/max in IntegerInput  and fix flicker and invisible cursor  - Handle validation in one place. - This fixes a flicker when typing an invalid character. - This fixes the cursor becoming invisible after typing an invalid character  when the cursor was at the end  and thus the length of the text shrinks to where the cursor further to the right than the end of the text. (I'm guessing that the cursor position may not be updated in some way.)","edit_colors.py","from typing import Any  Callable from rich.segment import Segment from rich.style import Style from textual import events from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.reactive import reactive  var from textual.strip import Strip from textual.color import Color as Color from textual.widget import Widget from textual.widgets import Button  Input  Label from textual.con","from typing import Any  Callable from rich.segment import Segment from rich.style import Style from textual import events from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.reactive import reactive  var from textual.strip import Strip from textual.color import Color as Color from textual.widget import Widget from textual.widgets import Button  Input  Label from textual.con","@@ -297 15 +297 33 @@ class ColorPreview(Widget):  class IntegerInput(Input):      """"""An input that only accepts integers.""""""   +    def __init__(self  min: int  max: int  **kwargs: Any) -> None: +        """"""Initialize the IntegerInput."""""" +        super().__init__(**kwargs) +        self.min = min +        self.max = max +     +    @property +    def value_as_int(self) -> int: +        """"""Return the value as an integer  or 0 if invalid."""""" +        try: +            return int(self.value) +        except V","add colorpreview example","fix handle min/max in integerinput   and fix flick"
"c0f088dd4df0b7f48b5554e34532cacea118ae93","Hide ""Expand All Visible"" button since it's confusing  - I wanted it to expand all  not just one level   (but named it according to how it ended up functioning.) - It's not that helpful since the Inspect Element feature works great. - It's especially confusing now that there's multiple tree views.   It doesn't affect the Properties view  but it's not visually tied to   the DOM tree view except by proximity. - I'd rather make the DOM tree default to (mostly) expanded  rather than   have a button you have to click  anyways.","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container from textual.dom import DOMNode from textual.errors import","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container from textual.dom import DOMNode from textual.errors import","@@ -416 9 +416 9 @@ class Inspector(Container):      def compose(self) -> ComposeResult:          """"""Add sub-widgets.""""""          inspect_icon = ""⇱"" # Alternatives: 🔍 🎯 🮰 🮵 ⮹ ⇱ 🢄 🡴 🡤 🡔 🢰 (↖️ arrow emoji unreliable) -        expand_icon = ""+"" # Alternatives: + ⨁ 🪜 🎊 🐡 🔬 (↕️ arrow emoji unreliable) +        # expand_icon = ""+"" # Alternatives: + ⨁ 🪜 🎊 🐡 🔬 (↕️ arrow emoji unreliable)          yield Button(f""{inspect_icon} Inspect Element""  classes=""inspect_button"") -        yield Button(f""{expand_icon} Expand A","add expand button to inspector","add hide `` expand all visible '' button since it"
"e1d5739ec8fee843f0d69f6b51f550e24fbdf16f","Use tabs for inspector details views  TODO: fix bottom of contents cut off when scrolled to bottom in TabPanes","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container from textual.dom import DOMNode from textual.errors import","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container  VerticalScroll from textual.dom import DOMNode from textu","@@ -11 14 +11 14 @@ from textual import events  from textual.app import ComposeResult  from textual.case import camel_to_snake  from textual.color import Color -from textual.containers import Container +from textual.containers import Container  VerticalScroll  from textual.dom import DOMNode  from textual.errors import NoWidget  from textual.geometry import Offset  from textual.message import Message  from textual.reactive import var  from textual.widget import Widget -from textual.widgets import Button  La","add missing import","add use tabs for inspector details views todo : fi"
"177cae974cdd7c7a9baf0ffe46d360cc95062d1d","DRY and improve error handling for getters  - DRY adding nodes with enumerate() vs dir() - Don't show the error message as a quoted string value   (This was super simple  but ambiguous and potentially confusing.) - Make the error handling look nice with colors","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container  VerticalScroll from textua","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","@@ -5 6 +5 7 @@ import inspect  import pathlib  from types import EllipsisType  from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard +from rich.markup import escape  from rich.text import Text  from rich.highlighter import ReprHighlighter  # from rich.syntax import Syntax @@ -191 6 +192 10 @@ class PropertiesTree(Tree[object]):              event.node.remove()              self._populate_node(event.node.parent  load_more=True)   +    # @property +    # def AAA_test_property_that_raises_ex","add missing doc block","add dry and improve error handling for getters - d"
"f6983ea5f782147288f671bb1c71a0f91719f6a8","Fix and ignore type checking errors in inspector module  Also  object | None is redundant.","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","@@ -20 7 +20 7 @@ from textual.geometry import Offset  from textual.message import Message  from textual.reactive import var  from textual.widget import Widget -from textual.widgets import Button  Label  Static  TabPane  TabbedContent  Tree +from textual.widgets import Button  Static  TabPane  TabbedContent  Tree  from textual.widgets.tree import TreeNode  from textual.css._style_properties import BorderDefinition   @@ -156 7 +156 7 @@ class PropertiesTree(Tree[object]):      def __init__(          self    ","add missing docstrings","add fix and ignore type checking errors in inspect"
"5d3383d960a551a1a3fa4a0507ae240288f2b37b","Use a unique sentinel value instead of Ellipsis for the ellipsis node  This fixes the expansion logic applying to ellipsis objects in arbitrary places.","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","@@ -148 6 +148 11 @@ class DOMTree(Tree[DOMNode]):              self.post_message(self.Hovered(self  node  node.data))          # TODO: post when None? it seems to be reset anyways? but not if you move the mouse off the whole tree without moving it off a node   +class _ShowMoreSentinelType: pass +_ShowMoreSentinel = _ShowMoreSentinelType() +""""""A sentinel that represents an ellipsis that can be clicked to load more properties."""""" +del _ShowMoreSentinelType +  class PropertiesTree(Tree[object]):      """"""A wid","add docs for propertiestree","fix use a unique sentinel value instead of ellipsi"
"fb4ff044eaea1b04ec035573982ba0d17afc6614","Fix broken (escaped) markup  and add more styling  - Fix accidentally escaped `[link]` markup   (broken in 1dbf02e94158969061205483d1473bc694d6f984) - Using Text type will help avoid this problem in the future.   Don't just make it work  make it so it must work!   Make it strongly typed  not stringly typed. - Use `css_identifier_styled` instead of `css_identifier` - Add colors to exceptional case handling","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","@@ -427 7 +427 7 @@ class NodeInfo(Container):              for value in cls.__dict__.values():                  if isinstance(value  type) and issubclass(value  Message):                      available_events.append(value) -        def message_info(message_class: Type[Message]) -> str: +        def message_info(message_class: Type[Message]) -> Text:              """"""Return a description of a message class  listing any handlers.""""""              # A. Ideally Message would have a static method that returns the","add missing docstring","add fix broken ( escaped ) markup   and more styli"
"efc7130fcad0d255b372637242617ffb1da89a90","Fix doubling number of nodes added when clicking ""...""  - Fix bug where the number of nodes added when clicking the ellipsis   node would double each time. - Fix duplicate ellipsis nodes when collapsing and expanding. - Fix other nodes being added when collapsing and expanding.   New nodes should only be added when initially expanding  or when   clicking the ellipsis node. - `count` now includes filtered out keys.","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","@@ -181 8 +181 10 @@ class PropertiesTree(Tree[object]):          """"""A mapping of tree nodes to the keys that have already been loaded.                    This allows the tree to be collapsed and expanded without duplicating nodes. -        It's also used for lazy-loading nodes when clicking the ellipsis in long lists. +        It's also used for lazy-loading nodes when clicking the ellipsis in long lists...          """""" +        self._num_keys_accessed: dict[TreeNode[object]  int] = {} +        """"""A mappin","add missing docstring","add fix doubling number of nodes when clicking ``"
"247f78d65771fb3e82f278bc887e984a51f1e601","Ignore two type checker errors","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from types import EllipsisType from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Contai","@@ -368 10 +368 10 @@ class PropertiesTree(Tree[object]):                  Text.from_markup(f""[b]{escape(name)}[/b]"")                   Text.from_markup(f""[#808080]({length})[/#808080]"")                   Text(""="")  -                PropertiesTree.highlighter(repr(data)) +                PropertiesTree.highlighter(repr(data))  # type: ignore              ))              # Can I perhaps DRY with with_name() with with_name taking a length parameter? In other words: -            # Can I perhaps DRY with with_n","add missing semicolon","add ignore two type checker errors missing semicol"
"fc279f0574bb602a89a8925637071eac33f11ec1","Fix type checker errors and ignore one","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container  VerticalScroll from textua","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container  VerticalScroll from textua","@@ -853 6 +853 7 @@ class Inspector(Container):          used_boxes: list[Container] = []          def show_box(name: str  region: Region  color: str) -> None:              """"""Draw a box to the screen."""""" +            assert isinstance(dom_node  Widget)  ""dom_node needed for association with highlight box  but got: "" + repr(dom_node)              try:                  box = self._highlight_boxes[dom_node][name]              except KeyError: @@ -877 7 +878 7 @@ class Inspector(Container):          # show_box","add missing docstring","update fix type checker errors and ignore one add"
"ef107b0da3bcbb3a17ee65a5311f086c2438d5d4","Add types  and workaround list[str | None] return type","launch_editor.py","#!/usr/bin/env python3  """"""Launches an editor with a given file and line number  based on what is running.  Based on https://github.com/facebook/create-react-app/blob/0f5e990b8a04f53861d64ff53751517bbf73d867/packages/react-dev-utils/launchEditor.js Ported to Python using ChatGPT. """"""  import os import shlex import subprocess import platform import re import sys  __license__ = """""" MIT License  Copyright (c) 2013-present  Facebook  Inc.  Permission is hereby granted  free of charge  to any person obtaining a ","#!/usr/bin/env python3  """"""Launches an editor with a given file and line number  based on what is running.  Based on https://github.com/facebook/create-react-app/blob/0f5e990b8a04f53861d64ff53751517bbf73d867/packages/react-dev-utils/launchEditor.js Ported to Python using ChatGPT. """"""  import os import shlex import subprocess import platform import re import sys from typing import Any  TypeGuard  __license__ = """""" MIT License  Copyright (c) 2013-present  Facebook  Inc.  Permission is hereby granted  free of ","@@ -12 6 +12 7 @@ import subprocess  import platform  import re  import sys +from typing import Any  TypeGuard    __license__ = """"""  MIT License @@ -38 8 +39 7 @@ SOFTWARE.  """"""     - -def is_terminal_editor(editor): +def is_terminal_editor(editor: str) -> bool:      terminal_editors = ['vim'  'emacs'  'nano']      return editor in terminal_editors   @@ -136 12 +136 12 @@ COMMON_EDITORS_WIN = [  WINDOWS_FILE_NAME_WHITELIST = re.compile(r""^([A-Za-z]:[/\\])?(?:[\x2D-9A-Z\\_a-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF","add missing license","add types   and workaround list [ str | none ] ret"
"bae5eceb511fad01a2dc76adc62fe3bf9beff002","Narrow exception catching","launch_editor.py","#!/usr/bin/env python3  """"""Launches an editor with a given file and line number  based on what is running.  Based on https://github.com/facebook/create-react-app/blob/0f5e990b8a04f53861d64ff53751517bbf73d867/packages/react-dev-utils/launchEditor.js Ported to Python using ChatGPT. """"""  import os import shlex import subprocess import platform import re import sys from typing import Any  TypeGuard  __license__ = """""" MIT License  Copyright (c) 2013-present  Facebook  Inc.  Permission is hereby granted  free of ","#!/usr/bin/env python3  """"""Launches an editor with a given file and line number  based on what is running.  Based on https://github.com/facebook/create-react-app/blob/0f5e990b8a04f53861d64ff53751517bbf73d867/packages/react-dev-utils/launchEditor.js Ported to Python using ChatGPT. """"""  import os import shlex import subprocess import platform import re import sys from typing import Any  TypeGuard  __license__ = """""" MIT License  Copyright (c) 2013-present  Facebook  Inc.  Permission is hereby granted  free of ","@@ -199 7 +199 7 @@ def guess_editor() -> list[str | None]:              for process_name in process_names:                  if process_name in output:                      return [COMMON_EDITORS_LINUX[process_name]] -    except Exception as e: +    except subprocess.CalledProcessError:          pass        # Last resort  use old skool env vars ","add new editor script","add narrow exception catching new editor script"
"605a048fc70c0f5466a92005e6e0073ba92609e8","Launch code editor from inspector panel  Disable stdout which crashes when run in Textual due to StdoutRedirector","inspector.py","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect import pathlib from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.case import camel_to_snake from textual.color import Color from textual.containers import Container  VerticalScroll from textua","""""""Layout inspector development tool for Textual.""""""  import asyncio import inspect from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard  from rich.markup import escape from rich.text import Text from rich.highlighter import ReprHighlighter # from rich.syntax import Syntax from textual import events from textual.app import ComposeResult from textual.color import Color from textual.containers import Container  VerticalScroll from textual.dom import DOMNode from textual.errors import NoWidg","@@ -2 15 +2 14 @@    import asyncio  import inspect -import pathlib  from typing import Any  Iterable  NamedTuple  Optional  Type  TypeGuard +  from rich.markup import escape  from rich.text import Text  from rich.highlighter import ReprHighlighter  # from rich.syntax import Syntax  from textual import events  from textual.app import ComposeResult -from textual.case import camel_to_snake  from textual.color import Color  from textual.containers import Container  VerticalScroll  from textual.dom import DOMNo","add missing import","add launch code editor from inspector panel disabl"
"605a048fc70c0f5466a92005e6e0073ba92609e8","Launch code editor from inspector panel  Disable stdout which crashes when run in Textual due to StdoutRedirector","launch_editor.py","#!/usr/bin/env python3  """"""Launches an editor with a given file and line number. If TEXTUAL_EDITOR environment variable is set  it will be used as the editor. Otherwise  the editor will be detected based on what processes are running  falling back to VISUAL or EDITOR environment variables.  Note that ""Textual"" here refers to the TUI framework; it's not meant to contrast with ""visual""  as you may very well prefer a graphical editor while working on a TUI app.  Based on https://github.com/facebook/create-reac","#!/usr/bin/env python3  """"""Launches an editor with a given file and line number. If TEXTUAL_EDITOR environment variable is set  it will be used as the editor. Otherwise  the editor will be detected based on what processes are running  falling back to VISUAL or EDITOR environment variables.  Note that ""Textual"" here refers to the TUI framework; it's not meant to contrast with ""visual""  as you may very well prefer a graphical editor while working on a TUI app.  Based on https://github.com/facebook/create-reac","@@ -303 9 +303 9 @@ def launch_editor(file_name: str  line_number: int|None=None  col_number: int|No      if platform.system() == 'Windows':          # On Windows  launch the editor in a shell because spawn can only          # launch .exe files. -        _child_process = subprocess.Popen(['cmd.exe'  '/C'  editor] + args  stdin=sys.stdin  stdout=sys.stdout  stderr=sys.stderr) +        _child_process = subprocess.Popen(['cmd.exe'  '/C'  editor] + args) #  stdin=sys.stdin  stdout=sys.stdout  stderr=sys.stderr)","fix editor launch on windows","update launch code editor from inspector panel dis"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","__init__.py","""""""MS Paint for the terminal  built with Textual.""""""  __author__ = ""Isaiah Odhner"" __copyright__ = ""Copyright Isaiah Odhner"" __credits__ = [""Isaiah Odhner""] __maintainer__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.1.0"" __license__ = ""MIT""  # For relative imports to work in Python 3.6 import os  sys; sys.path.append(os.path.dirname(os.path.realpath(__file__))) ","""""""MS Paint for the terminal  built with Textual.""""""  __author__ = ""Isaiah Odhner"" __copyright__ = ""Copyright Isaiah Odhner"" __credits__ = [""Isaiah Odhner""] __maintainer__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.1.0"" __license__ = ""MIT"" ","@@ -7 6 +7 3 @@ __maintainer__ = ""Isaiah Odhner""  __email__ = ""isaiahodhner@gmail.com""  __version__ = ""0.1.0""  __license__ = ""MIT"" - -# For relative imports to work in Python 3.6 -import os  sys; sys.path.append(os.path.dirname(os.path.realpath(__file__))) ","add missing version and license","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","edit_colors.py","from typing import Any  Callable from rich.segment import Segment from rich.style import Style from textual import events from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.reactive import reactive  var from textual.strip import Strip from textual.color import Color as Color from textual.widget import Widget from textual.widgets import Button  Input  Label from textual.con","from typing import Any  Callable  from rich.segment import Segment from rich.style import Style from textual import events from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.reactive import reactive  var from textual.strip import Strip from textual.color import Color as Color from textual.widget import Widget from textual.widgets import Button  Input  Label from textual.co","@@ -1 4 +1 5 @@  from typing import Any  Callable +  from rich.segment import Segment  from rich.style import Style  from textual import events @@ -12 8 +13 9 @@ from textual.color import Color as Color  from textual.widget import Widget  from textual.widgets import Button  Input  Label  from textual.containers import Container -from localization.i18n import get as _ -from windows import DialogWindow + +from .localization.i18n import get as _ +from .windows import DialogWindow      # https://github.com/kouz","add missing import","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","enhanced_directory_tree.py","import os from pathlib import Path from typing import Iterable from textual.widgets import DirectoryTree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):     def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:         return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]      def expand_to_path(self  target_path: str) -> None:         ""","import os from pathlib import Path from typing import Iterable  from textual.widgets import DirectoryTree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):     def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:         return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]      def expand_to_path(self  target_path: str) -> None:         ","@@ -1 6 +1 7 @@  import os  from pathlib import Path  from typing import Iterable +  from textual.widgets import DirectoryTree  from textual.widgets._tree import TreeNode  from textual.widgets._directory_tree import DirEntry ","add missing import","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","file_dialogs.py","import os from typing import Any  Callable from textual.containers import Container from textual.widget import Widget from textual.widgets import Button  Input  Tree  Label from textual.containers import Horizontal from textual.widgets._directory_tree import DirEntry from textual.containers import Container from localization.i18n import get as _ from windows import DialogWindow from enhanced_directory_tree import EnhancedDirectoryTree  class FileDialogWindow(DialogWindow):     """"""A dialog window that lets t","import os from typing import Any  Callable  from textual.containers import Container from textual.widget import Widget from textual.widgets import Button  Input  Tree  Label from textual.containers import Horizontal from textual.widgets._directory_tree import DirEntry from textual.containers import Container  from .localization.i18n import get as _ from .windows import DialogWindow from .enhanced_directory_tree import EnhancedDirectoryTree  class FileDialogWindow(DialogWindow):     """"""A dialog window that l","@@ -1 14 +1 16 @@  import os  from typing import Any  Callable +  from textual.containers import Container  from textual.widget import Widget  from textual.widgets import Button  Input  Tree  Label  from textual.containers import Horizontal  from textual.widgets._directory_tree import DirEntry  from textual.containers import Container -from localization.i18n import get as _ -from windows import DialogWindow -from enhanced_directory_tree import EnhancedDirectoryTree + +from .localization.i18n import get as _","add missing imports","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","inspector.py","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","@@ -57 7 +57 7 @@ from textual.widgets import Button  Static  TabPane  TabbedContent  Tree  from textual.widgets.tree import TreeNode  # from textual.css._style_properties import BorderDefinition   -from launch_editor import launch_editor +from .launch_editor import launch_editor    # Instrument style setting in order to link to the source code where inline styles are set.  inline_style_call_stacks: dict[DOMNode  dict[str  list[inspect.FrameInfo]]] = {} ","add missing import","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","menus.py","import re from typing import Any  Callable from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from textual.dom import NoScreen from rich.text import Text from localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub('([","import re from typing import Any  Callable  from textual import events from textual.containers import Container from textual.reactive import var from textual.widgets import Button  Static from textual.message import Message from textual.dom import NoScreen from rich.text import Text  from .localization.i18n import markup_hotkey  get_hotkey  get_direction  def to_snake_case(name: str) -> str:     name = re.sub('(.)([A-Z][a-z]+)'  r'\1_\2'  name)     name = re.sub('__([A-Z])'  r'_\1'  name)     name = re.sub(","@@ -1 5 +1 6 @@  import re  from typing import Any  Callable +  from textual import events  from textual.containers import Container  from textual.reactive import var @@ -7 7 +8 8 @@ from textual.widgets import Button  Static  from textual.message import Message  from textual.dom import NoScreen  from rich.text import Text -from localization.i18n import markup_hotkey  get_hotkey  get_direction + +from .localization.i18n import markup_hotkey  get_hotkey  get_direction    def to_snake_case(name: str) -> str: ","add missing import","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  NamedTuple  Optional  Callable  Iterator  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.con","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  NamedTuple  Optional  Callable  Iterator  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.con","@@ -36 15 +36 15 @@ from textual.color import Color  ColorParseError  from PIL import Image  UnidentifiedImageError  from pyfiglet import Figlet  FigletFont   -from menus import MenuBar  Menu  MenuItem  Separator -from inspector import Inspector -from windows import Window  DialogWindow  CharacterSelectorDialogWindow  MessageBox  get_warning_icon  get_question_icon -from file_dialogs import SaveAsDialogWindow  OpenDialogWindow -from edit_colors import EditColorsDialogWindow -from localization.i18n import ge","add missing imports","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","repack_font.py","#!/usr/bin/env python3  import os from PIL import Image  from figlet_font_writer import FIGletFontWriter  block_char_lookup = {     0x0: ' '      0x1: '▘'      0x2: '▝'      0x3: '▀'      0x4: '▖'      0x5: '▌'      0x6: '▞'      0x7: '▛'      0x8: '▗'      0x9: '▚'      0xA: '▐'      0xB: '▜'      0xC: '▄'      0xD: '▙'      0xE: '▟'      0xF: '█'  }  def extract_textures(image_path: str):     """"""Removes the border around glyphs in an image  creates a new image without the border  and converts the image in","#!/usr/bin/env python3  import os from PIL import Image  from .figlet_font_writer import FIGletFontWriter  block_char_lookup = {     0x0: ' '      0x1: '▘'      0x2: '▝'      0x3: '▀'      0x4: '▖'      0x5: '▌'      0x6: '▞'      0x7: '▛'      0x8: '▗'      0x9: '▚'      0xA: '▐'      0xB: '▜'      0xC: '▄'      0xD: '▙'      0xE: '▟'      0xF: '█'  }  def extract_textures(image_path: str):     """"""Removes the border around glyphs in an image  creates a new image without the border  and converts the image i","@@ -3 7 +3 7 @@  import os  from PIL import Image   -from figlet_font_writer import FIGletFontWriter +from .figlet_font_writer import FIGletFontWriter    block_char_lookup = {      0x0: ' '  ","add missing import","add convert to relative imports it no longer runs"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","windows.py","from typing import Any  Callable from typing_extensions import Self from textual import events  on from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from localization.i18n import get as _","from typing import Any  Callable from typing_extensions import Self  from textual import events  on from textual.message import Message from textual.app import ComposeResult from textual.containers import Container from textual.geometry import Offset from textual.reactive import var from textual.widget import Widget from textual.widgets import Button  Static  DataTable from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches  from .localization.i18n import get a","@@ -1 5 +1 6 @@  from typing import Any  Callable  from typing_extensions import Self +  from textual import events  on  from textual.message import Message  from textual.app import ComposeResult @@ -10 7 +11 8 @@ from textual.widget import Widget  from textual.widgets import Button  Static  DataTable  from textual.containers import Container  Horizontal  Vertical  from textual.css.query import NoMatches -from localization.i18n import get as _ + +from .localization.i18n import get as _    class WindowTitleB","add missing doc blocks","add convert to relative imports it no longer runs"
"349f87c3e7bc5b3c6c36d295457a36d87ad094f3","Disable automatic updating of CLI info on the readme  This caused an error when running from the console entry point  as it's not intended to work in production/release.","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  NamedTuple  Optional  Callable  Iterator  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.con","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import sys import psutil import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  NamedTuple  Optional  Callable  Iterator  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer import stransi from rich.segment import Segment from rich.style import Style from rich.con","@@ -166 34 +166 38 @@ parser.add_argument('--recode-samples'  action='store_true'  help='Open and save    parser.add_argument('filename'  nargs='?'  default=None  help='Path to a file to open. File will be created if it doesn\'t exist.')   -# Automatically update the readme with the current arguments. -# TODO: disable for release builds (or I could make this another dev flag  but I like the idea of it being automatic) -# (maybe a pre-commit hook!? That might be ideal  but it might also be cumbersome to set ","add help for --recode-samples","add disable automatic update of cli info on the re"
"4e1f11ab23091a6b596068cdffbfe7d6e5a8f625","Fix expanding directory tree to current folder  in file dialogs  - This regressed due to updates in Textual 0.25.0    because DirectoryTree now loads directory contents in a worker:   https://github.com/Textualize/textual/issues/2456 - Directory tree expansion may be more robust now  although it's using   more internals now  and it still needs timers for whatever reason.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <!-- GitHub doesn't support line-height style in markdown  so I can't use inline HTML for the screenshot without seams between rows of text. But I can include the HTML inside <foreignObject> in an SVG file and include that as an <img> element. --> <!-- GitHub doesn't support figure/figcaption in markdown  so I have to use a t","@@ -195 7 +195 6 @@ To preview ANSI art files in file managers like Nautilus  Thunar  Nemo  or Caja   - Menu items like Copy/Cut/Paste are not grayed out when inapplicable. Only unimplemented items are grayed out.  - Set As Wallpaper may not work on your system. For me  on Ubuntu  the wallpaper setting is updated but the picture is not  unless I manually pick it. There is however untested support for many platforms  and you may have better luck than me.  - If you paste and then stamp the selection with Ctrl","add description of wallpaper menu item","add fix expanding directory tree to current folder"
"4e1f11ab23091a6b596068cdffbfe7d6e5a8f625","Fix expanding directory tree to current folder  in file dialogs  - This regressed due to updates in Textual 0.25.0    because DirectoryTree now loads directory contents in a worker:   https://github.com/Textualize/textual/issues/2456 - Directory tree expansion may be more robust now  although it's using   more internals now  and it still needs timers for whatever reason.","enhanced_directory_tree.py","import os from pathlib import Path from typing import Iterable  from textual.widgets import DirectoryTree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):     def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:         return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]      def expand_to_path(self  target_path: str) -> None:         ","from pathlib import Path from typing import Iterable  from rich.text import TextType from textual.widgets import DirectoryTree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):     def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:         return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]      def _go_to_node(self  node: TreeNode[Di","@@ -1 7 +1 7 @@ -import os  from pathlib import Path  from typing import Iterable   +from rich.text import TextType  from textual.widgets import DirectoryTree  from textual.widgets._tree import TreeNode  from textual.widgets._directory_tree import DirEntry @@ -10 58 +10 60 @@ class EnhancedDirectoryTree(DirectoryTree):      def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:          return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startsw","add example for enhanceddirectorytree","add fix expanding directory tree to current folder"
"93d176e656a20d0c98fa7a0440ec2f316873ffb3","Pyright: ignore build folder  Python files get copied to the build folder. It's kinda confusing to see type checking errors for old versions of files.","pyrightconfig.json","{ 	""include"": [ 		""**/*.py""  	]  	""exclude"": [ 		""**/node_modules""  		""**/__pycache__""  		""**/.*"" 	]  	""strict"": [ 		""**/*.py"" 	]  	""reportOptionalMemberAccess"": false }","{ 	""include"": [ 		""**/*.py""  	]  	""exclude"": [ 		""**/node_modules""  		""**/__pycache__""  		""**/build""  		""**/.*"" 	]  	""strict"": [ 		""**/*.py"" 	]  	""reportOptionalMemberAccess"": false }","@@ -5 6 +5 7 @@  	""exclude"": [  		""**/node_modules""   		""**/__pycache__""  +		""**/build""   		""**/.*""  	]   	""strict"": [ ","exclude node_modules in cache config","update pyright : ignore build folder python files"
"bf675e4c5156e4758faecd128a7f9b7ac15f154a","Fix two related type checking errors","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual.containers","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -9 7 +9 7 @@ import argparse  import asyncio  from enum import Enum  from random import randint  random -from typing import Any  NamedTuple  Optional  Callable  Iterator +from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator    import stransi  from rich.segment import Segment @@ -4407 7 +4407 7 @@ if args.recode_samples:      async def recode_samples() -> None:          """"""Re-encodes all sample files in parallel.""""""          samples_folder = os.path.join(os.path.dirname(__file__)  ""","add comment","add fix two related type checking errors comment"
"8911c406bee89e5109ee37be29fc31567caa68d6","Add error handling for inline style editing  breaking ""(edited)"" marks  Using .merge() isn't tracked by the call stack recording (yet)  so it can no longer attribute inline styles to editing with the inspector  but this lack of tracking was already a problem  it just highlights it.","inspector.py","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","@@ -42 9 +42 12 @@ from textual import events  from textual.app import ComposeResult  from textual.color import Color  ColorParseError  from textual.containers import Container  VerticalScroll +from textual.css.errors import DeclarationError  from textual.css.match import match  from textual.css.model import RuleSet +from textual.css.parse import parse_declarations  from textual.css.styles import RulesMap  Styles +from textual.css.tokenizer import TokenError  from textual.dom import DOMNode  from textual.er","add missing imports","add error handling for inline style editing   brea"
"8ec9056bdf0c6219fb3f1408063dc31cdb12b14a","Fix ""Nothing selected"" text getting pushed down in Keys tab  This is just a workaround.","inspector.py","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","@@ -664 8 +664 12 @@ class NodeInfo(Container):              with TabPane(""CSS""  id=""styles""):                  yield VerticalScroll(self.StaticWithLinkSupport(self  classes=""styles tab_content_static""))              with TabPane(""Keys""  id=""key_bindings""): -                yield VerticalScroll(DataTable[Text | str](classes=""key_bindings"")) +                # TODO: why does DataTable take up space in the VerticalScroll +                # when display == False? +                # For now I've swapped the ord","add key_bindings to the node","add fix `` nothing selected '' text getting pushed"
"0a176fc1a4469c313cf57a9f4620ab5152975a8d","Prevent unloading document if save fails","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -2717 7 +2717 15 @@ class PaintApp(App[None]):                  return              async def async_handle_button(button: Button):                  if button.has_class(""yes""): -                    await self.save() +                    # If save fails  such as due to an unknown file extension  +                    # doing nothing (after the error message) is fine for New  but confusing for Open. +                    # It might be better to show Save As  but note that currently any file dialog is closed w","add comment","add prevent unloading document if save fails comme"
"29e9e7a384703d306cf42bdb2d142ba68904c979","Refactor some `encode_based_on_file_extension` into `encode_to_format`  This avoids duplicately detecting the format from the file extension in one case  and in the other case  avoids using a bogus file name to implement a default fallback file format.","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -761 7 +761 10 @@ class AnsiArtDocument:        def encode_based_on_file_extension(self  file_path: str) -> bytes:          """"""Encode the image according to the file extension."""""" -        format_id = self.format_from_extension(file_path) +        return self.encode_to_format(self.format_from_extension(file_path)) + +    def encode_to_format(self  format_id: str | None) -> bytes: +        """"""Encode the image into the given file format.""""""          # print(""Supported image formats for writing:""  Image.SAV","add missing docstring","implement refactor some ` encode_based_on_file_ext"
"572d60076f033d271e48fb1140636234c2315b14","Duplicate error handling for reloading after information loss on save","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -2557 12 +2557 21 @@ class PaintApp(App[None]):          - doesn't short circuit when the file path matches the current file path  crucially          - skips backup management          - skips the file system  which is more efficient -        - fails to handle errors... FIXME          """""" -        self.resize_document(self.image.width  self.image.height) # (hackily) make this undoable -        new_image = AnsiArtDocument.decode_based_on_file_extension(content  file_path) -        self.canvas.image = self","add comment","update duplicate error handling for reloading afte"
"7b32452066d71d49bae1b3af47d25d54e2e6c3d6","Abort if error occurred when reloading to show information loss during save  I'm not sure about this...","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -2550 7 +2550 7 @@ class PaintApp(App[None]):              self.message_box(dialog_title  _(""An unexpected error occurred while writing %1.""  file_path)  ""ok""  error=e)          return False   -    def reload_after_save(self  content: bytes  file_path: str) -> None: +    def reload_after_save(self  content: bytes  file_path: str) -> bool:          """"""Reload the document from saved content  to show information loss from the file format.                    Unlike `open_from_file_path`  this method: @@ -256","add missing docstring","add abort if error occurred when reloading to show"
"53a733ae32ea418420ce23214993670aebd6f83c","Suggest installing from requirements.txt  I had to blow away my virtual environment  and installing from requirements.txt worked whereas the existing line didn't  I guess due to the fixed version number of textual. I don't know exactly  but it seems pretty silly to try to maintain this list of requirements separately.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y","@@ -203 7 +203 7 @@ source .venv/bin/activate    Install Textual and other dependencies:  ```bash -pip install ""textual[dev]"" stransi psutil watchdog pyperclip pyright +pip install -r requirements.txt  ```    Run via Textual's CLI for live-reloading CSS support  and enable other development features: ","update description of missing dependency","update suggest installing from requirements.txt i"
"87e2ff9b5fa1e9bd6b64ccc22b84c44fe0e5461e","Move one-off scripts outside of package  (breaking relative paths)","generate_font_template.py","","","","fix bug in test-http-client","update move one-off scripts outside of package ( b"
"87e2ff9b5fa1e9bd6b64ccc22b84c44fe0e5461e","Move one-off scripts outside of package  (breaking relative paths)","generate_gradient_test.py","","","","fix bug in test-http-client","update move one-off scripts outside of package ( b"
"87e2ff9b5fa1e9bd6b64ccc22b84c44fe0e5461e","Move one-off scripts outside of package  (breaking relative paths)","repack_font.py","","","","fix bug in test-http-client","update move one-off scripts outside of package ( b"
"f194583760bca211cbf6ce63b517d6e2753c0fe6","Fix error due to trying to reload after saving non-openable format","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -2814 7 +2814 9 @@ class PaintApp(App[None]):          # TODO: consider overlap between non-openable format and information loss warnings          non_openable = (format_id in (""HTML""  ""RICH_CONSOLE_MARKUP"")) or (format_id in Image.SAVE and not format_id in Image.OPEN)          if non_openable: -            self.confirm_save_non_openable_file(lambda: callback(True)) +            # The callback argument is whether there's information loss. +            # If True  it will try to load the file to show the l","add comment about confirm_save_non_openable_file","add fix error due to trying to reload after saving"
"6b9c01f196360cb5816ecfdea49e3fb9e98ae099","Fix handling of read-only formats (like .cur)  When attempting to save in a format only supported for opening  it tripped the assertion here  which I'm removing. (This code was a little complicated to reason about  and I thought I was oversimplifying  when restructuring to handle the overlap of warnings  but I couldn't place what case I was missing  until testing this.)","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -2831 13 +2831 16 @@ class PaintApp(App[None]):                  self.confirm_save_non_openable_file(lambda: callback(False))              else:                  callback(False) -        else: -            # Image formats -            assert format_id in Image.SAVE  f""Unknown format ID: {format_id!r}"" +        elif format_id in Image.SAVE: +            # Image formats Pillow supports for writing              if non_openable:                  self.confirm_save_non_openable_file(lambda: self.confirm_lose_t","add missing check","add fix handling of read-only formats ( like .cur"
"b6bea36590927e1cb6d2a0d536482b1273c081d3","Simplify: avoid passing fake format ID for unknown format case","paint.py","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","#!/usr/bin/env python3  import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResult from textual","@@ -2596 7 +2596 7 @@ class PaintApp(App[None]):              format_id = AnsiArtDocument.format_from_extension(self.file_path)              # Note: `should_reload` implies information loss  but information loss doesn't imply `should_reload`.              # In the case of write-only formats  this function should return False. -            should_reload = await self.confirm_information_loss_async(format_id or ""ANSI"") +            should_reload = await self.confirm_information_loss_async(format_id)           ","fix example","update simplify : avoid passing fake format id for"
"cd1161d454d907118f2173195fc7d74e58c6a687","Disable writing debug.svg","paint.py","#!/usr/bin/env python3  import base64 import html import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ","#!/usr/bin/env python3  import base64 import html import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ","@@ -45 7 +45 7 @@ from .auto_restart import restart_on_changes  restart_program  from .__init__ import __version__    MAX_FILE_SIZE = 500000 # 500 KB - +DEBUG_SVG_LOADING = False # writes debug.svg when flexible character grid loader is used    # These can go away now that args are parsed up top  ascii_only_icons = False @@ -1128 6 +1128 8 @@ class AnsiArtDocument:            def add_debug_marker(x: float  y: float  color: str) -> None:              """"""Adds a circle to the SVG at the given position  for deb","add debug_marker to ansiartdocument","update disable writing debug.svg add debug_marker"
"12d579592ee7cbb3c58a9b5d4c2f841c8de4cf97","Fix exception handler catching wrong exception","auto_restart.py","""""""Automatically restarts the program when a file is changed.""""""  from __future__ import annotations  from typing import TYPE_CHECKING import os import sys import psutil from textual.dom import NoScreen  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer  if TYPE_CHECKING:     from .paint import PaintApp  def restart_program():     """"""Restarts the current program  after resetting terminal state  and cleaning ","""""""Automatically restarts the program when a file is changed.""""""  from __future__ import annotations  from typing import TYPE_CHECKING import os import sys import psutil from textual.app import ScreenStackError  from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED from watchdog.observers import Observer  if TYPE_CHECKING:     from .paint import PaintApp  def restart_program():     """"""Restarts the current program  after resetting terminal state  and c","@@ -6 7 +6 7 @@ from typing import TYPE_CHECKING  import os  import sys  import psutil -from textual.dom import NoScreen +from textual.app import ScreenStackError    from watchdog.events import PatternMatchingEventHandler  FileSystemEvent  EVENT_TYPE_CLOSED  EVENT_TYPE_OPENED  from watchdog.observers import Observer @@ -69 7 +69 7 @@ class RestartHandler(PatternMatchingEventHandler):          print(""Reloading due to FS change:""  event.event_type  event.src_path)          try:              _app.screen.styles","add restarthandler example","add fix exception handler catching wrong exception"
"a2000e73749a23f65d521bb777936fd9a8e9c69a","Recover from backup file after Save As; fix backup files left behind  Note: ""the backup file will be deleted on close"" was no longer true since making it check `self.backup_checked_for`.","paint.py","#!/usr/bin/env python3  import base64 import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResul","#!/usr/bin/env python3  import base64 import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResul","@@ -2698 11 +2698 12 @@ class PaintApp(App[None]):                                  return                          saved_future.set_result(None)   -                    # TODO: should this look for a backup file and offer to recover it? -                    # Seems kinda weird? But the backup file will be deleted on close  -                    # so it also seems weird to just silently delete it. -                    # Could give a different message  or could rename the backup file so it's not deleted. -    ","add comment","fix recover from backup file after save as ; backu"
"3a0552ada6d6dff22160433044cb7b728187eca2","Fix wrapping focus within dialog windows (with Tab)  (broken in last commit)","paint.py","#!/usr/bin/env python3  import base64 import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResul","#!/usr/bin/env python3  import base64 import io import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events from textual.message import Message from textual.app import App  ComposeResul","@@ -3548 13 +3548 23 @@ Columns: {len(palette) // 2}      def action_stretch_skew(self) -> None:          self.message_box(_(""Paint"")  ""Not implemented.""  ""ok"")   -    def action_invert_colors_unless_should_switch_focus(self) -> None: +    async def action_invert_colors_unless_should_switch_focus(self) -> None:          """"""Try to distinguish between Tab and Ctrl+I scenarios.""""""          # pretty simple heuristic  but seems effective          # I didn't make the dialogs modal  but it's OK if this          # ","add a comment","add fix wrapping focus within dialog windows ( wit"
"645f1ec12741c8046c09b079c6c3273e2bf0a439","Add missing duplicate error handling for Paste From","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","@@ -3189 6 +3189 12 @@ class PaintApp(App[None]):                      # TODO: handle pasting image files                      self.paste(f.read())                  window.close() +            except UnicodeDecodeError: +                self.message_box(_(""Open"")  file_path + ""\n"" + _(""Paint cannot read this file."") + ""\n"" + _(""Unexpected file format."")  ""ok"") +            except UnidentifiedImageError as e: +                self.message_box(_(""Open"")  _(""This is not a valid bitmap file  or its format is no","add error message to paint app","add missing duplicate error handling for paste fro"
"6a4351d824b324f0a2583b0bf23bcc50669380ae","Handle arbitrary exceptions when deleting backup","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","@@ -3115 6 +3115 11 @@ class PaintApp(App[None]):              os.remove(backup_file_path)          except FileNotFoundError:              pass +        except Exception as e: +            # e.g. PermissionError when running with +            # `python -m src.textual_paint.paint /root/some_file_which_can_be_nonexistent` +            # (and then exiting) +            self.message_box(_(""Paint"")  _(""An unexpected error occurred while deleting %1.""  backup_file_path)  ""ok""  error=e)        def discard_backup_a","add missing line to error message","update handle arbitrary exceptions when deleting b"
"489bd95a2080c001274c0eb82901b2c3513e8962","Ignore permission errors when deleting backup  and improve error message in the general (fallback) case","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","@@ -3115 11 +3115 16 @@ class PaintApp(App[None]):              os.remove(backup_file_path)          except FileNotFoundError:              pass -        except Exception as e: -            # e.g. PermissionError when running with +        except PermissionError: +            # This can happen when running with              # `python -m src.textual_paint.paint /root/some_file_which_can_be_nonexistent`              # (and then exiting) -            self.message_box(_(""Paint"")  _(""An unexpected error occurred","add missing line to error message","add ignore permission errors when deleting backup"
"c97203e8829e283a5ed5a4daf599b2e075b0b025","Add more error handling to Get Colors","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","@@ -3460 9 +3460 21 @@ class PaintApp(App[None]):      def action_get_colors(self) -> None:            def handle_selected_file_path(file_path: str) -> None: -            with open(file_path  ""r"") as f: -                self.load_palette(f.read()) -            window.close() +            try: +                with open(file_path  ""r"") as f: +                    self.load_palette(f.read()) +            except UnicodeDecodeError: +                self.message_box(_(""Open"")  file_path + ""\n"" + _(""Paint cannot ","add support for unicode file path","add more error handling to get colors add support"
"54f29eabf11d6e62c260349cb35cfdd4518cb794","Fix false positives and false negatives for when to populate file name  When opening the Open dialog  it shouldn't populate the file name input  but when clicking a file  it should fill in the clicked file's name.  The `_expanding_directory_tree` flag gave false positives: - When opening a file in a directory the program doesn't have permissions to via the CLI    such as with `python -m src.textual_paint.paint /root/nonexistent`    opening the Open dialog  and clicking a file  it wasn't populating the filename input    because the flag was never cleared if it couldn't find (access) the   directories and file matching any of the path parts  working down the directory structure.      This was broken in [b3ca55a3b1430c77f376c2fe9eba9668b337959f] ""Use new callback to remove race condition""   but before  it just cleared the flag after a delay  so it wasn't a good solution   It also gave false negatives: - When opening the Open dialog  it was populating the name input field   with the file selected programmatically with `expand_to_path`    instead of leaving it blank.      The automatic expansion was broken in [e9755637d6f94272bf77879854a6a10a107235f2] ""Update Textual to 0.26.0""   due to changes 0.25.0  since directory contents are now loaded in a worker.   This flag's behavior was broken since rewriting the code to handle asynchronous directory loading in   [4e1f11ab23091a6b596068cdffbfe7d6e5a8f625] ""Fix expanding directory tree to current folder  in file dialogs""  An alternative I considered was to create a new message such as `EnhancedDirectoryTree.NodeHighlighted`  but let's call it `EnhancedNodeHighlighted`  then to have `on_tree_node_highlighted` in `EnhancedDirectoryTree` which sends `EnhancedNodeHighlighted` always with `from_expand_to_path=False`  and then do:      | # Suppress EnhancedNodeHighlighted with from_expand_to_path=False     | with self.prevent(self.EnhancedNodeHighlighted):     | 	self.select_node(node)     | # Send it with the flag set     | self.post_message(self.EnhancedNodeHighlighted(...  from_expand_to_path=True))  The solution I settled on was to add an `on_tree_node_highlighted` method to my `EnhancedDirectoryTree` for the purpose of clearing the flag  with still a further delay so that the app's `on_tree_node_highlighted` can use the flag before its cleared.  (I left `_expanding_directory_tree` in at this commit for comparison of the behavior. For a fair estimate of the complexity of this change  include the following cleanup in the diff.)","enhanced_directory_tree.py","from pathlib import Path from typing import Callable  Iterable  from rich.text import TextType from textual.widgets import DirectoryTree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):     def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:         return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]      def _go_to_node(self  node: T","from pathlib import Path from typing import Callable  Iterable  from rich.text import TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._tree import TreeNode from textual.widgets._directory_tree import DirEntry  class EnhancedDirectoryTree(DirectoryTree):      node_highlighted_by_expand_to_path = var(False)     """"""Whether a NodeHighlighted event was triggered by expand_to_path.          (An alternative would be to create a new message type wrappin","@@ -2 25 +2 77 @@ from pathlib import Path  from typing import Callable  Iterable    from rich.text import TextType -from textual.widgets import DirectoryTree +from textual.reactive import var +from textual.widgets import DirectoryTree  Tree  from textual.widgets._tree import TreeNode  from textual.widgets._directory_tree import DirEntry    class EnhancedDirectoryTree(DirectoryTree): + +    node_highlighted_by_expand_to_path = var(False) +    """"""Whether a NodeHighlighted event was triggered by expand_to_pat","add a missing docstring","remove fix false positives and false negatives for"
"54f29eabf11d6e62c260349cb35cfdd4518cb794","Fix false positives and false negatives for when to populate file name  When opening the Open dialog  it shouldn't populate the file name input  but when clicking a file  it should fill in the clicked file's name.  The `_expanding_directory_tree` flag gave false positives: - When opening a file in a directory the program doesn't have permissions to via the CLI    such as with `python -m src.textual_paint.paint /root/nonexistent`    opening the Open dialog  and clicking a file  it wasn't populating the filename input    because the flag was never cleared if it couldn't find (access) the   directories and file matching any of the path parts  working down the directory structure.      This was broken in [b3ca55a3b1430c77f376c2fe9eba9668b337959f] ""Use new callback to remove race condition""   but before  it just cleared the flag after a delay  so it wasn't a good solution   It also gave false negatives: - When opening the Open dialog  it was populating the name input field   with the file selected programmatically with `expand_to_path`    instead of leaving it blank.      The automatic expansion was broken in [e9755637d6f94272bf77879854a6a10a107235f2] ""Update Textual to 0.26.0""   due to changes 0.25.0  since directory contents are now loaded in a worker.   This flag's behavior was broken since rewriting the code to handle asynchronous directory loading in   [4e1f11ab23091a6b596068cdffbfe7d6e5a8f625] ""Fix expanding directory tree to current folder  in file dialogs""  An alternative I considered was to create a new message such as `EnhancedDirectoryTree.NodeHighlighted`  but let's call it `EnhancedNodeHighlighted`  then to have `on_tree_node_highlighted` in `EnhancedDirectoryTree` which sends `EnhancedNodeHighlighted` always with `from_expand_to_path=False`  and then do:      | # Suppress EnhancedNodeHighlighted with from_expand_to_path=False     | with self.prevent(self.EnhancedNodeHighlighted):     | 	self.select_node(node)     | # Send it with the flag set     | self.post_message(self.EnhancedNodeHighlighted(...  from_expand_to_path=True))  The solution I settled on was to add an `on_tree_node_highlighted` method to my `EnhancedDirectoryTree` for the purpose of clearing the flag  with still a further delay so that the app's `on_tree_node_highlighted` can use the flag before its cleared.  (I left `_expanding_directory_tree` in at this commit for comparison of the behavior. For a fair estimate of the complexity of this change  include the following cleanup in the diff.)","file_dialogs.py","import os from typing import Any  Callable  from textual.containers import Container from textual.widget import Widget from textual.widgets import Button  Input  Tree  Label from textual.containers import Horizontal from textual.widgets._directory_tree import DirEntry from textual.containers import Container  from .localization.i18n import get as _ from .windows import DialogWindow from .enhanced_directory_tree import EnhancedDirectoryTree  class FileDialogWindow(DialogWindow):     """"""A dialog window that l","import os from typing import Any  Callable  from textual.containers import Container from textual.widget import Widget from textual.widgets import Button  Input  Tree  Label from textual.containers import Horizontal from textual.widgets._directory_tree import DirEntry from textual.containers import Container  from .localization.i18n import get as _ from .windows import DialogWindow from .enhanced_directory_tree import EnhancedDirectoryTree  class FileDialogWindow(DialogWindow):     """"""A dialog window that l","@@ -114 7 +114 17 @@ class FileDialogWindow(DialogWindow):              assert event.node.parent.data              self._directory_tree_selected_path = str(event.node.parent.data.path)              name = os.path.basename(event.node.data.path) -            if not self._expanding_directory_tree: +            assert isinstance(event.control  EnhancedDirectoryTree) +            print( +                ""self._expanding_directory_tree""  +                self._expanding_directory_tree  +                ""event.con","add missing test","remove fix false positives and false negatives for"
"16f4bc0a88342159a29da9036b30cf039e14547d","Fix some mypy errors (and a couple pyright errors)","edit_colors.py","from typing import Any  Callable  from rich.segment import Segment from rich.style import Style from textual import events from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.reactive import reactive  var from textual.strip import Strip from textual.color import Color as Color from textual.widget import Widget from textual.widgets import Button  Input  Label from textual.co","from typing import Any  Callable  from rich.segment import Segment from rich.style import Style from textual import events from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.geometry import Offset from textual.message import Message from textual.reactive import reactive  var from textual.strip import Strip from textual.color import Color as Color from textual.widget import Widget from textual.widgets import Button  Input  Label from textual.co","@@ -57 7 +57 7 @@ class ColorGrid(Container):              self.color_grid = color_grid              self.index = index   -    color_list = var(list[str]  init=False) +    color_list: var[list[str]] = var(list[str]  init=False)      """"""The list of colors to display. NOT TO BE CONFUSED WITH `colors` defined by `Widget`.""""""        def __init__(self  color_list: list[str]  selected_color: str  **kwargs: Any) -> None: @@ -337 9 +337 9 @@ class EditColorsDialogWindow(DialogWindow):      def __init__(self  *child","add colorgrid and editcolorsdialogwindow classes","fix some mypy errors ( and a couple pyright errors"
"16f4bc0a88342159a29da9036b30cf039e14547d","Fix some mypy errors (and a couple pyright errors)","i18n.py","import os import json import re  translations: dict[str  str] = {} base_language = ""en"" current_language = base_language localization_folder = os.path.dirname(__file__) untranslated_file = os.path.join(localization_folder  ""untranslated.txt"")  TRACK_UNTRANSLATED = False """"""Whether to update the untranslated.txt file with any untranslated strings.  This should be disabled in production. A better way to do this would be static source code analysis  using xgettext  pybabel  or xpot. https://docs.python.org/3/l","import os import json import re  translations: dict[str  str] = {} base_language = ""en"" current_language = base_language localization_folder = os.path.dirname(__file__) untranslated_file = os.path.join(localization_folder  ""untranslated.txt"")  TRACK_UNTRANSLATED = False """"""Whether to update the untranslated.txt file with any untranslated strings.  This should be disabled in production. A better way to do this would be static source code analysis  using xgettext  pybabel  or xpot. https://docs.python.org/3/l","@@ -92 7 +92 7 @@ def get(base_language_str: str  *interpolations: str) -> str:    		return base_language_str   -	def interpolate(text: str  interpolations: tuple[str]): +	def interpolate(text: str  interpolations: tuple[str  ...]):  		for i in range(len(interpolations)):  			text = text.replace(f""%{i + 1}""  interpolations[i])  		return text ","add missing parens","fix some mypy errors ( and a couple pyright errors"
"16f4bc0a88342159a29da9036b30cf039e14547d","Fix some mypy errors (and a couple pyright errors)","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","@@ -1303 8 +1303 8 @@ class AnsiArtDocument:          if ansi_el is not None:              if ansi_el.text is None:                  return AnsiArtDocument(1  1  default_bg  default_fg) -            text = base64.b64decode(ansi_el.text).decode(""utf-8"") -            return AnsiArtDocument.from_ansi(text  default_bg  default_fg) +            ansi_text = base64.b64decode(ansi_el.text).decode(""utf-8"") +            return AnsiArtDocument.from_ansi(ansi_text  default_bg  default_fg)            def add_debug_marke","add missing line","fix some mypy errors ( and a couple pyright errors"
"6f5cee0f7c8397c4a21282dd2699add2056aa5f4","Disable reportUnknownMemberType Pyright error","cspell.json","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""APNG""  		""appcode""  		""appscript""  		""asyncio""  		""bezier""","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""APNG""  		""appcode""  		""appscript""  		""asyncio""  		""bezier""","@@ -39 6 +39 7 @@  		""disambiguates""   		""dockable""   		""domtree""  +		""Dunder""   		""emacsclient""   		""executablepath""   		""Figlet""  ","add missing test case","update disable reportunknownmembertype pyright err"
"6f5cee0f7c8397c4a21282dd2699add2056aa5f4","Disable reportUnknownMemberType Pyright error","pyrightconfig.json","{ 	""include"": [ 		""**/*.py""  	]  	""exclude"": [ 		""**/node_modules""  		""**/__pycache__""  		""**/build""  		""**/.*"" 	]  	""strict"": [ 		""**/*.py"" 	]  	""reportOptionalMemberAccess"": false }","{ 	""include"": [ 		""**/*.py""  	]  	""exclude"": [ 		""**/node_modules""  		""**/__pycache__""  		""**/build""  		""**/.*"" 	]  	""strict"": [ 		// ""**/*.py"" 	]   	// CUSTOMIZATIONS 	""reportOptionalMemberAccess"": ""warning""  	// reportUnknownMemberType caused numerous bogus errors  	// with Textual's generic App[ResultType] and Screen[ScreenResultType] classes. 	""reportUnknownMemberType"": false   	// STRICT PROFILE 	// As far as I know  there's no way to inherit from strict and then loosen any rules  	// so I've copied fr","@@ -9 7 +9 88 @@  		""**/.*""  	]   	""strict"": [ -		""**/*.py"" +		// ""**/*.py""  	]  -	""reportOptionalMemberAccess"": false + +	// CUSTOMIZATIONS +	""reportOptionalMemberAccess"": ""warning""  +	// reportUnknownMemberType caused numerous bogus errors  +	// with Textual's generic App[ResultType] and Screen[ScreenResultType] classes. +	""reportUnknownMemberType"": false  + +	// STRICT PROFILE +	// As far as I know  there's no way to inherit from strict and then loosen any rules  +	// so I've copied from the table and am","add missing missing dot in docstrings","update disable reportunknownmembertype pyright err"
"87f1f50f06b5538652ab88d76b326193bb8863a1","Fix some stupid pyright errors","inspector.py","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","@@ -749 6 +749 7 @@ class NodeInfo(Container):              return False          def trace_inline_style(rule: str) -> tuple[str  int] | Literal[""EDITED_WITH_INSPECTOR""] | None:              """"""Returns the location where a style is set  or None if it can't be found."""""" +            assert dom_node is not None  ""trace_inline_style should only be called when a node is selected""              try:                  source = inline_style_call_stacks[dom_node]                  frame_infos = source[rule] ","fix error in trace_inline_style","fix some stupid pyright errors fix error in trace_"
"87f1f50f06b5538652ab88d76b326193bb8863a1","Fix some stupid pyright errors","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","@@ -99 8 +99 14 @@ def update_cli_help_on_readme():          parser.formatter_class = old_formatter_class                    md = f.read() -        start = readme_help_start.search(md).end() -        end = readme_help_end.search(md  start).start() +        start_match = readme_help_start.search(md) +        if start_match is None: +            raise Exception(""Couldn't find help section in readme"") +        start = start_match.end() +        end_match = readme_help_end.search(md  start) +        if end_matc","fix error when help section is missing","fix some stupid pyright errors fix error when help"
"1ce0487a52b971debb5e258a9dfeb82434b60339","Fix reportOptionalMemberAccess errors for width/height","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.message import Message from textual.app import A","@@ -2120 10 +2120 14 @@ class Canvas(Widget):        def get_content_width(self  container: Size  viewport: Size) -> int:          """"""Defines the intrinsic width of the widget."""""" +        if self.image is None: +            return 0 # shouldn't really happen          return self.image.width * self.magnification        def get_content_height(self  container: Size  viewport: Size  width: int) -> int:          """"""Defines the intrinsic height of the widget."""""" +        if self.image is None: +            retur","add magnification to canvas","update fix reportoptionalmemberaccess errors for w"
"1c737fada2783b4527ce5eff8c39d7785c5a548f","Avoid shell=True and fix mypy errors about mismatching type for `args`","wallpaper.py","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","@@ -117 8 +117 8 @@ def set_wallpaper(file_loc: str  first_run: bool = True):      ## see http://blog.zx2c4.com/699 for a solution that might work      elif desktop_env in [""kde3""  ""trinity""]:          # From http://ubuntuforums.org/archive/index.php/t-803417.html -        args = 'dcop kdesktop KBackgroundIface setWallpaper 0 ""%s"" 6' % file_loc -        subprocess.Popen(args shell=True) +        args = [""dcop""  ""kdesktop""  ""KBackgroundIface""  ""setWallpaper""  ""0""  file_loc  ""6""] +        subprocess.Popen(arg","add setwallpaper to kde3 desktop","fix avoid shell=true and mypy errors about mismatc"
"d5669f434f80eac7b76680b124144dab4f41a0a6","Fix type mismatch in unused code  error: Incompatible types in assignment (expression has type ""None""  variable has type ""bool"")  [assignment]","parse_rc_file.py","# Based on https://github.com/1j01/jspaint/blob/4a9163fb6dbb321ef07ed85bb5d5ce980e1a4866/localization/parse-rc-file.js # Originally based on https://github.com/evernote/serge/blob/master/lib/Serge/Engine/Plugin/parse_rc.pm  import re  def parse_rc_file(rc_file_text: str) -> list[str]:     """"""     Parses a Windows RC file and returns a list of strings.     """"""     strings: list[str] = []     menu = dialog = False     # stringtable = False     block_level = 0     id_str = dialog_id = orig_str = None     # hin","# Based on https://github.com/1j01/jspaint/blob/4a9163fb6dbb321ef07ed85bb5d5ce980e1a4866/localization/parse-rc-file.js # Originally based on https://github.com/evernote/serge/blob/master/lib/Serge/Engine/Plugin/parse_rc.pm  import re  def parse_rc_file(rc_file_text: str) -> list[str]:     """"""     Parses a Windows RC file and returns a list of strings.     """"""     strings: list[str] = []     menu = dialog = False     # stringtable = False     block_level = 0     id_str = dialog_id = orig_str = None     # hin","@@ -35 7 +35 8 @@ def parse_rc_file(rc_file_text: str) -> list[str]:          if norm_line == 'END':              block_level -= 1              if block_level == 0: -                menu = dialog = dialog_id = None +                menu = dialog = False +                dialog_id = None                  # stringtable = False            if dialog and not block_level: ","fix dialog in parse_rc_file","update fix type mismatch in unused code error : in"
"96b2d08789fa8e46c76eec96575e6007d628cae4","Ignore all but one last Pyright error  (on pyright v1.1.314)","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.mess","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.mess","@@ -33 7 +33 7 @@ from textual.widgets import Button  Static  Input  Header  RadioSet  RadioButton  from textual.binding import Binding  from textual.color import Color  ColorParseError  from PIL import Image  UnidentifiedImageError -from pyfiglet import Figlet  FigletFont +from pyfiglet import Figlet  FigletFont  # type: ignore    from .menus import MenuBar  Menu  MenuItem  Separator  from .windows import Window  DialogWindow  CharacterSelectorDialogWindow  MessageBox  get_warning_icon  get_question_icon  ","add missing import","update ignore all but one last pyright error ( on"
"96b2d08789fa8e46c76eec96575e6007d628cae4","Ignore all but one last Pyright error  (on pyright v1.1.314)","wallpaper.py","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","@@ -95 7 +95 7 @@ def set_wallpaper(file_loc: str  first_run: bool = True):              from gi.repository import Gio  # type: ignore              SCHEMA = ""org.gnome.desktop.background""              KEY = ""picture-uri"" -            gsettings = Gio.Settings.new(SCHEMA) +            gsettings = Gio.Settings.new(SCHEMA)  # type: ignore              gsettings.set_string(KEY  uri)          except Exception:              args = [""gsettings""  ""set""  ""org.gnome.desktop.background""  ""picture-uri""  uri] @@ -217 7 +","add comment","add ignore all but one last pyright error ( on pyr"
"f21899fd1d9c15733fc4ee03e6e85df058d138b1","Use `LineFilter` to avoid private `_segments` access  This fixes the last pyright error (on pyright v1.1.314)","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.mess","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.filt","@@ -20 6 +20 7 @@ from rich.style import Style  from rich.console import Console  from rich.text import Text  from textual import events  on +from textual.filter import LineFilter  from textual.message import Message  from textual.app import App  ComposeResult  from textual.containers import Container  Vertical  Horizontal @@ -381 6 +382 17 @@ class CharInput(Input  inherit_bindings=False):              self.char = char              super().__init__()   +    class Recolor(LineFilter): +        """"""Replaces f","add missing docstrings","fix use ` linefilter ` to avoid private ` _segment"
"15b35eaf5c28ebcb15b9daced1163850241f91ff","Fix new errors after updating pyright (v1.1.314 -> v1.1.317)  → PYRIGHT_PYTHON_FORCE_VERSION=latest pyright  added 1 package  and audited 2 packages in 4s  found 0 vulnerabilities /home/io/Projects/textual-paint/src/textual_paint/paint.py   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1173:64 - error: Condition will always evaluate to True since the types ""Never"" and ""None"" have no overlap (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1214:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1217:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1220:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1223:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1229:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1233:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison) 7 errors  0 warnings  0 informations","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.filt","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on from textual.filt","@@ -1124 7 +1124 7 @@ class AnsiArtDocument:          y = 0          bg_color = default_bg          fg_color = default_fg -        instruction: Instruction[object] | str +        instruction: Instruction[Any] | str          for instruction in ansi.instructions():              if isinstance(instruction  str):                  # Text and control characters other than escape sequences ","add missing docstring","add fix new errors after update pyright ( v1.1.314"
"321dd1284f9cf1ebb4b04033f61191aa1de6856e","Move ""type: ignore"" comment now serving a different purpose  Before this was presumably suppressing the `self.app` bogus error.","inspector.py","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","@@ -934 12 +934 16 @@ class NodeInfo(Container):                      binding.action                       binding.description                       check_mark if binding.show else """"  -                    (self.app.get_key_display(binding.key) or binding.key.upper()) if binding.key_display is None else binding.key_display   # type: ignore +                    (self.app.get_key_display(binding.key) or binding.key.upper()) if binding.key_display is None else binding.key_display                       check_ma","add missing grammar","add move `` type : ignore '' comment now serving a"
"82dd98d8cb5a0bb6bf4b54401a1d51c40d062c8a","Fix invalid assertion on mac  os.name == ""posix"" (!)","wallpaper.py","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","import os import sys import subprocess  # There are too many desktop environment names and programs  # it would pollute the spellings list (unless I moved this file # to a folder and made a separate dictionary). # spell-checker:disable  def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environm","@@ -191 8 +191 8 @@ def set_wallpaper(file_loc: str  first_run: bool = True):      elif desktop_env==""mac"": #Not tested since I do not have a mac          #From https://stackoverflow.com/questions/431205/how-can-i-programatically-change-the-background-in-mac-os-x          try: -            assert os.name == ""mac""  # avoid 'Import ""appscript"" could not be resolved' on other platforms -            from appscript import app  mactypes +            # appscript is only installed for mac  ignore `Import ""appscript","add mac test for set_wallpaper","add fix invalid assertion on mac os.name == `` pos"
"5c7272db913893a40a7053a02d9855ce3295776e","Clean up Tk root widget  I was hoping this would fix the Python rocket icon showing in the dock on macOS  but it doesn't. It still stays until the program exits. Might still be good to do though.","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import event","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import event","@@ -3618 7 +3618 9 @@ Columns: {len(palette) // 2}              import tkinter              root = tkinter.Tk()              root.withdraw() -            return root.winfo_screenwidth()  root.winfo_screenheight() +            size = root.winfo_screenwidth()  root.winfo_screenheight() +            root.destroy() +            return size          except Exception as e:              print(""Failed to get screen size:""  e)              return 1920  1080 ","get screen size in pixels","fix clean up tk root widget i was hoping this woul"
"f865acd56c60508b82de9074806dbfd19827f1d3","Fix error handling for Set As Wallpaper worker thread","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random import sys from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual i","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random import sys from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual i","@@ -3602 7 +3602 9 @@ Columns: {len(palette) // 2}              new_im.save(image_path)              set_wallpaper(image_path)          except Exception as e: -            self.message_box(_(""Paint"")  _(""Failed to set the wallpaper."")  ""ok""  error=e) +            # self.message_box(_(""Paint"")  _(""Failed to set the wallpaper."")  ""ok""  error=e) +            # Because this is running in a thread  we can't directly access the UI. +            self.call_from_thread(self.message_box  _(""Paint"")  _(""Failed to set ","update image.py","update fix error handling for set as wallpaper wor"
"6864790efb90bf55b553ca434a6d6e4e1c551a57","Improve error message when opening binary file in Get Colors dialog","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random import sys from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual i","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random import sys from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual i","@@ -3519 13 +3519 23 @@ class PaintApp(App[None]):          self.query_one(ColorsBox).update_palette()        def action_get_colors(self) -> None: +        """"""Show a dialog to select a palette file to load.""""""            def handle_selected_file_path(file_path: str) -> None:              try:                  with open(file_path  ""r""  encoding=""utf-8"") as f:                      self.load_palette(f.read())              except UnicodeDecodeError: -                self.message_box(_(""Open"")  file_path + ""\n"" ","add a dialog to load a palette file","add improve error message when opening binary file"
"ebab889eaf4e8c1bdc2140a166bfa86a35ab82e3","Ignore 'Type of ""get_current_worker"" is partially unknown'  $ PYRIGHT_PYTHON_FORCE_VERSION=1.1.316 pyright WARNING: there is a new pyright version available (v1.1.316 -> v1.1.317). Please install the new version or set PYRIGHT_PYTHON_FORCE_VERSION to `latest`  /home/io/Projects/textual-paint/src/textual_paint/paint.py   /home/io/Projects/textual-paint/src/textual_paint/paint.py:39:28 - error: Type of ""get_current_worker"" is partially unknown     Type of ""get_current_worker"" is ""() -> Worker[Unknown]"" (reportUnknownVariableType) 1 error  0 warnings  0 informations","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random import sys from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual i","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import argparse import asyncio from enum import Enum from random import randint  random import sys from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual i","@@ -36 7 +36 7 @@ from textual.widgets import Button  Static  Input  Header  RadioSet  RadioButton  from textual.binding import Binding  from textual.color import Color  ColorParseError  from PIL import Image  UnidentifiedImageError -from textual.worker import get_current_worker +from textual.worker import get_current_worker  # type: ignore  from pyfiglet import Figlet  FigletFont  # type: ignore    from .menus import MenuBar  Menu  MenuItem  Separator ","add missing import","add ignore 'type of `` get_current_worker '' is pa"
"aad51d2978298132d063a561f9b28c5035c687b4","Note Ctrl+V issue in Windows Terminal app","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y","@@ -234 7 +234 10 @@ The default Terminal has missing characters  causing misalignment of everything    Textual Paint works with the new [Windows Terminal](https://learn.microsoft.com/windows/terminal/install)  however  the Fill With Color tool icon is missing (shows as tofu)  and the Pencil emoji causes misalignment of everything to the right of it  including the canvas.   -It will not work properly with the old Windows console  which lacks emoji/Unicode support and true color support. +Ctrl+V does not wor","add note about color tool icon in console","add note ctrl+v issue in windows terminal app note"
"aad51d2978298132d063a561f9b28c5035c687b4","Note Ctrl+V issue in Windows Terminal app","cspell.json","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""Andale""  		""APNG""  		""appcode""  		""appscript""  		""asyncio""","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""Andale""  		""APNG""  		""appcode""  		""appscript""  		""asyncio""","@@ -35 6 +35 7 @@  		""Cascadia""   		""clion""   		""cmdpxl""  +		""conhost""   		""Consola""   		""Consolas""   		""Cour""  ","add missing test case","update note ctrl+v issue in windows terminal app a"
"c70f3e35e378a8bf3b114a6552579f14b647db7e","Note powershell prompt/TUI clashing bugginess","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y","@@ -237 6 +237 11 @@ Textual Paint works with the new [Windows Terminal](https://learn.microsoft.com/  Ctrl+V does not work to paste  but **Edit > Paste** does work.  It may be possible to unbind Ctrl+V to fix this  see [this issue](https://github.com/microsoft/terminal/issues/11267).   +Running in Powershell  there seems to be a bug where the powershell prompt will be active at the same time as the TUI  +and commands can be typed and run  and the output will be interwoven with the TUI. +Running a second in","add note about powershell prompt","update note powershell prompt/tui clashing buggine"
"c70f3e35e378a8bf3b114a6552579f14b647db7e","Note powershell prompt/TUI clashing bugginess","cspell.json","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""Andale""  		""APNG""  		""appcode""  		""appscript""  		""asyncio""","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""Andale""  		""APNG""  		""appcode""  		""appscript""  		""asyncio""","@@ -121 6 +121 7 @@  		""Thunar""   		""tkinter""   		""tlaplus""  +		""tput""   		""truecolor""   		""tspan""   		""tspans""  ","add more tags","update note powershell prompt/tui clashing buggine"
"bc3dba29fc45d66cbff359dea9b954f3f28c3b19","Reword prompt/TUI clash bug description and clarify cmd vs conhost","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y","@@ -237 12 +237 13 @@ Textual Paint works with the new [Windows Terminal](https://learn.microsoft.com/  Ctrl+V does not work to paste  but **Edit > Paste** does work.  It may be possible to unbind Ctrl+V to fix this  see [this issue](https://github.com/microsoft/terminal/issues/11267).   -Running in Powershell  there seems to be a bug where the powershell prompt will be active at the same time as the TUI  -and commands can be typed and run  and the output will be interwoven with the TUI. -Running a second i","add note about powershell prompt","add reword prompt/tui clash bug description and cl"
"c5809c3695f8fc43d622554739e3b2ccaa265f47","Confirm Ctrl+V fix for Windows Terminal  and list steps","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y","@@ -234 14 +234 34 @@ The default Terminal has missing characters  causing misalignment of everything    Textual Paint works with the new [Windows Terminal](https://learn.microsoft.com/windows/terminal/install).   -Ctrl+V does not work to paste  but **Edit > Paste** does work. -It may be possible to unbind Ctrl+V to fix this  see [this issue](https://github.com/microsoft/terminal/issues/11267). +#### Pasting in Windows Terminal + +[<kbd>Ctrl</kbd>+<kbd>V</kbd> does not work](https://github.com/microsoft/ter","fix paste in windows terminal","update confirm ctrl+v fix for windows terminal   a"
"efba3fb54c608c88d4889bb4f65afd10db2e04ba","Use absolute URL to fix screenshot on PyPI","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  <img src=""screenshot.svg"" alt=""MS Paint like interface"" />  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a temporary `.ans~` backup file alongside the file y"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Automatically saves a tempor","@@ -6 7 +6 7 @@ MS Paint in your terminal.    This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).   -<img src=""screenshot.svg"" alt=""MS Paint like interface"" /> +![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)    ## Features   ","add ms paint image to the terminal","fix use absolute url to screenshot on pypi add ms"
"3b42656f487d87d0c330018bcfbaf80c42a0f48f","Add `less` pager to sample gallery command  It fails to display the 4x4_font_template.ans but other than that it's fine  and that's not really an artwork anyways.","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -152 7 +152 7 @@ cat samples/ship.ans  To view all the sample files  run:    ```bash -find samples -type f -exec file --mime-type {} \; | grep -v -e ""image/png"" -e ""image/svg"" | cut -d: -f1 | sort | xargs -I{} sh -c 'echo ""File: {}""; cat ""{}""; echo ""\n-----------------------\n""' +find samples -type f -exec file --mime-type {} \; | grep -v -e ""image/png"" -e ""image/svg"" | cut -d: -f1 | sort | xargs -I{} sh -c 'echo ""File: {}""; cat ""{}""; echo ""\n-----------------------\n""' | less --RAW-CONTROL-CHARS  ```  <","add more examples to annymatch example","add ` less ` pager to sample gallery command it fa"
"833f0fac48e8108a6a41f70b4e158a761081bffb","Recommend pipx for installation  Closes https://github.com/1j01/textual-paint/issues/3","CHANGELOG.md","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Changed  - `--ascii-only-icons` now uses color  and has been otherwise tweaked to make tools easier to distinguish. - `--ascii-only-icons` now affects the icons in the Stretch/Skew dialog  and the Help window icon  not just tool icons.  #","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Changed  - `--ascii-only-icons` now uses color  and has been otherwise tweaked to make tools easier to distinguish. - `--ascii-only-icons` now affects the icons in the Stretch/Skew dialog  and the Help window icon  not just tool icons. - ","@@ -11 6 +11 7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0    - `--ascii-only-icons` now uses color  and has been otherwise tweaked to make tools easier to distinguish.  - `--ascii-only-icons` now affects the icons in the Stretch/Skew dialog  and the Help window icon  not just tool icons. +- It is now recommended to install using `pipx` instead of `pip`; to switch to `pipx`  run `pip uninstall textual-paint && pipx install textual-paint`.    ### Added   ","add description of --ascii-only-icons","update recommend pipx for installation closes http"
"833f0fac48e8108a6a41f70b4e158a761081bffb","Recommend pipx for installation  Closes https://github.com/1j01/textual-paint/issues/3","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -39 6 +39 13 @@ Python 3.10 or later is required. See [Compatibility](#compatibility) for detail    ### Installation   +Use `pipx` to install globally  without installing dependencies globally: +```bash +pip install --upgrade pipx  # or in Arch Linux  sudo pacman -S python-pipx +pipx install textual-paint +``` + +Alternatively  you can install using `pip`:  ```bash  pip install textual-paint  ``` ","add more information to install sequence","add recommend pipx for installation closes https :"
"833f0fac48e8108a6a41f70b4e158a761081bffb","Recommend pipx for installation  Closes https://github.com/1j01/textual-paint/issues/3","cspell.json","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""afterstep""  		""Andale""  		""APNG""  		""appcode""  		""appscrip","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""afterstep""  		""Andale""  		""APNG""  		""appcode""  		""appscrip","@@ -102 6 +102 7 @@  		""openbox""   		""Openbox""   		""osascript""  +		""pacman""   		""pagedown""   		""pageup""   		""palettized""  @@ -109 6 +110 7 @@  		""performantly""   		""phpstorm""   		""pipreqs""  +		""pipx""   		""Playscii""   		""polyline""   		""psutil""  ","add more more macos names","update recommend pipx for installation closes http"
"e2005015183e749d23a0f1baf0118fe6416901ce","Ignore some private accesses  It's fiiiiine... (until these things change  and the type: ignore comment starts hiding an actual problem)","enhanced_directory_tree.py","from pathlib import Path from typing import Callable  Iterable from rich.style import Style  from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._tree import TreeNode  TOGGLE_STYLE from textual.widgets._directory_tree import DirEntry  from .args import args  # Vague skeuomorphism # FILE_ICON = Text.from_markup(""[#aaaaaa on #ffffff]=[/] "" if args.ascii_only else ""📄 "") # FOLDER_OPEN_ICON = Text.from_markup(""[rgb(128 128 64)","from pathlib import Path from typing import Callable  Iterable from rich.style import Style  from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._tree import TreeNode  TOGGLE_STYLE from textual.widgets._directory_tree import DirEntry  from .args import args  # Vague skeuomorphism # FILE_ICON = Text.from_markup(""[#aaaaaa on #ffffff]=[/] "" if args.ascii_only else ""📄 "") # FOLDER_OPEN_ICON = Text.from_markup(""[rgb(128 128 64)","@@ -166 10 +166 10 @@ class EnhancedDirectoryTree(DirectoryTree):          Returns:              A Rich Text object containing the label.          """""" -        node_label = node._label.copy() +        node_label = node._label.copy()  # type: ignore          node_label.stylize(style)   -        if node._allow_expand: +        if node._allow_expand:  # type: ignore              prefix = (FOLDER_OPEN_ICON if node.is_expanded else FOLDER_CLOSED_ICON)              prefix.stylize_before(base_style + TOGGLE_STYLE)","fix styling of enhanced directory tree","update ignore some private accesses it 's fiiiiine"
"eeef27e99b382b2d9d80ad8652c1548a43eb2f2b","Disable ugly debug styles","gallery.css","GalleryItem {     layout: vertical;     width: 100%;     content-align: center middle;     align: center middle; }  .image {     height: auto;     width: auto;     align: center middle; } .caption {     dock: bottom;     text-align: center;     background: blue;     color: yellow; } ","GalleryItem {     layout: vertical;     width: 100%;     content-align: center middle;     align: center middle; }  .image {     height: auto;     width: auto;     align: center middle; } .caption {     dock: bottom;     text-align: center;     # background: blue;     # color: yellow; } ","@@ -13 6 +13 6 @@ GalleryItem {  .caption {      dock: bottom;      text-align: center; -    background: blue; -    color: yellow; +    # background: blue; +    # color: yellow;  } ","add missing caption style","add disable ugly debug styles missing caption styl"
"bf8b60f5e0c3336e07b122e81a63dc6ee5581939","Show directory better in case of error","gallery.py","""""""ANSI art gallery TUI""""""  import argparse import os from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .paint import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery'  usage='%(prog)s [folder]'  prog=""py","""""""ANSI art gallery TUI""""""  import argparse import os from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .paint import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery'  usage='%(prog)s [folder]'  prog=""py","@@ -91 7 +91 7 @@ class GalleryApp(App[None]):      def _load(self) -> None:          """"""Load the folder specified on the command line.""""""          if args.folder is None: -            gallery_folder = Path(os.path.dirname(__file__)  ""../../samples"") +            gallery_folder = Path(os.path.dirname(__file__)  ""../../samples"").resolve()          else:              gallery_folder = Path(args.folder)   ","add missing import","update show directory better in case of error add"
"9c2b48ec216ca91468adadaeb33e62413e67c2f5","Fix --restart-on-changes  This fixes ""NameError: name 'PaintApp' is not defined""  PaintApp is only defined during type checking (i.e. if TYPE_CHECKING). It would be nice if the type checker warned about usage of such vars outside of type annotations.","auto_restart.py","""""""Automatically restarts the program when a file is changed.""""""  from __future__ import annotations  from typing import TYPE_CHECKING import os import sys from textual.app import ScreenStackError  if TYPE_CHECKING:     from .paint import PaintApp     from .gallery import GalleryApp  def restart_program() -> None:     """"""Restarts the current program  after resetting terminal state  and cleaning up file objects and descriptors.""""""      if hasattr(_app  ""discard_backup""):         try:             _app.discard","""""""Automatically restarts the program when a file is changed.""""""  from __future__ import annotations  from typing import TYPE_CHECKING import os import sys from textual.app import ScreenStackError  if TYPE_CHECKING:     from .paint import PaintApp     from .gallery import GalleryApp  def restart_program() -> None:     """"""Restarts the current program  after resetting terminal state  and cleaning up file objects and descriptors.""""""      if hasattr(_app  ""discard_backup""):         try:             _app.discard","@@ -82 7 +82 7 @@ def restart_on_changes(app: PaintApp|GalleryApp) -> None:              # or else nothing happens.              # However  when _app.action_reload is called from the key binding               # it seems to work fine with or without unsaved changes. -            if isinstance(_app  PaintApp) and _app.is_document_modified(): +            if hasattr(app  ""is_document_modified"") and _app.is_document_modified():  # type: ignore                  _app.call_from_thread(_app.action_reload)          ","fix crash in restart_on_changes","fix fix -- restart-on-changes this fix `` nameerro"
"9c2b48ec216ca91468adadaeb33e62413e67c2f5","Fix --restart-on-changes  This fixes ""NameError: name 'PaintApp' is not defined""  PaintApp is only defined during type checking (i.e. if TYPE_CHECKING). It would be nice if the type checker warned about usage of such vars outside of type annotations.","gallery.py","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .paint import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery'  usage='%(pr","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .paint import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery'  usage='%(pr","@@ -61 8 +61 8 @@ class GalleryApp(App[None]):          # dev helper          # f5 would be more traditional  but I need something not bound to anything          # in the context of the terminal in VS Code  and not used by this app  like Ctrl+R  and detectable in the terminal. -        # This shouldn't be important now that I have automatic reloading  -        # but I still use it regularly  since restart_program isn't working! +        # This isn't that important since I have automatic reloading  +        ","add a comment","add fix -- restart-on-changes this fix `` nameerro"
"5441c0d3b0e118cc3f6d7411e5efb65ff4cbcb9a","Extract AnsiArtDocument and friends to files  This fixes the gallery app's --help  because before it was importing the ""paint"" module  which imported ""args""  which parsed arguments for the paint app instead of the gallery app.  This is also a refactor I've been meaning to do — since the very beginning  really — and it would've been a lot less trouble if I could've done it from the beginning  but I couldn't get imports to work. Yeah  really. Sounds pretty stupid 'cause it is. Python's module system is terrible.","ansi_art_document.py","","""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" import base64 import io import math import os import re from random import randint from typing import Any  NamedTuple  Optional  import stransi from PIL import Image from rich.console import Console from rich.segment import Segment from rich.style import Style from rich.text import Text from stransi.instruction import Instruction from textual.color import Color  ColorParseError from textual.geometry import Offset  Region  from textua","@@ -0 0 +1 1110 @@ +""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" +import base64 +import io +import math +import os +import re +from random import randint +from typing import Any  NamedTuple  Optional + +import stransi +from PIL import Image +from rich.console import Console +from rich.segment import Segment +from rich.style import Style +from rich.text import Text +from stransi.instruction import Instruction +from textual.color import Color  ColorParseError +from textual.geomet","add missing imports","fix extract ansiartdocument and friends to files t"
"5441c0d3b0e118cc3f6d7411e5efb65ff4cbcb9a","Extract AnsiArtDocument and friends to files  This fixes the gallery app's --help  because before it was importing the ""paint"" module  which imported ""args""  which parsed arguments for the paint app instead of the gallery app.  This is also a refactor I've been meaning to do — since the very beginning  really — and it would've been a lot less trouble if I could've done it from the beginning  but I couldn't get imports to work. Yeah  really. Sounds pretty stupid 'cause it is. Python's module system is terrible.","export_templates.py","","""""""Templates for exporting to SVG and HTML.""""""  # This SVG template is based on the template in rich/_export_format.py # It removes the simulated window frame  and crops the SVG to just the terminal content. # It also adds a placeholder for ANSI data to be stored in the SVG  # in order to support opening the file after saving it  in a perfectly lossless way. # (I have also implemented a more general SVG loading mechanism  but it's now a fallback.) # It was very nice during development to automate saving a f","@@ -0 0 +1 82 @@ +""""""Templates for exporting to SVG and HTML."""""" + +# This SVG template is based on the template in rich/_export_format.py +# It removes the simulated window frame  and crops the SVG to just the terminal content. +# It also adds a placeholder for ANSI data to be stored in the SVG  +# in order to support opening the file after saving it  in a perfectly lossless way. +# (I have also implemented a more general SVG loading mechanism  but it's now a fallback.) +# It was very nice during developme","add comment about the template","fix extract ansiartdocument and friends to files t"
"5441c0d3b0e118cc3f6d7411e5efb65ff4cbcb9a","Extract AnsiArtDocument and friends to files  This fixes the gallery app's --help  because before it was importing the ""paint"" module  which imported ""args""  which parsed arguments for the paint app instead of the gallery app.  This is also a refactor I've been meaning to do — since the very beginning  really — and it would've been a lot less trouble if I could've done it from the beginning  but I couldn't get imports to work. Yeah  really. Sounds pretty stupid 'cause it is. Python's module system is terrible.","gallery.py","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .paint import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery'  usage='%(pr","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .ansi_art_document import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery' ","@@ -13 7 +13 7 @@ from textual.widgets import Footer  Header  Static    from .__init__ import __version__  from .auto_restart import restart_on_changes  restart_program -from .paint import AnsiArtDocument +from .ansi_art_document import AnsiArtDocument    parser = argparse.ArgumentParser(description='ANSI art gallery'  usage='%(prog)s [folder]'  prog=""python -m src.textual_paint.gallery"")  parser.add_argument('folder'  nargs='?'  default=None  help='Path to a folder containing ANSI art.') ","add help for gallery command","fix extract ansiartdocument and friends to files t"
"5441c0d3b0e118cc3f6d7411e5efb65ff4cbcb9a","Extract AnsiArtDocument and friends to files  This fixes the gallery app's --help  because before it was importing the ""paint"" module  which imported ""args""  which parsed arguments for the paint app instead of the gallery app.  This is also a refactor I've been meaning to do — since the very beginning  really — and it would've been a lot less trouble if I could've done it from the beginning  but I couldn't get imports to work. Yeah  really. Sounds pretty stupid 'cause it is. Python's module system is terrible.","paint.py","#!/usr/bin/env python3  import base64 import io import math import os from pathlib import Path import re import shlex import asyncio from enum import Enum from random import randint  random import sys from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator from uuid import uuid4  import stransi from stransi.instruction import Instruction from rich.segment import Segment from rich.style import Style from rich.console import Console from rich.text import Text from textual import events  on","#!/usr/bin/env python3  import math import os from pathlib import Path import re import shlex import asyncio from enum import Enum from random import random import sys from typing import Any  Coroutine  Optional  Callable  Iterator from uuid import uuid4  from rich.segment import Segment from rich.style import Style from rich.text import Text from textual import events  on  work from textual.filter import LineFilter from textual.message import Message from textual.app import App  ComposeResult from textual.","@@ -1 7 +1 5 @@  #!/usr/bin/env python3   -import base64 -import io  import math  import os  from pathlib import Path @@ -9 16 +7 13 @@ import re  import shlex  import asyncio  from enum import Enum -from random import randint  random +from random import random  import sys -from typing import Any  Coroutine  NamedTuple  Optional  Callable  Iterator +from typing import Any  Coroutine  Optional  Callable  Iterator  from uuid import uuid4   -import stransi -from stransi.instruction import Instruction  from ric","add missing import","fix extract ansiartdocument and friends to files t"
"5441c0d3b0e118cc3f6d7411e5efb65ff4cbcb9a","Extract AnsiArtDocument and friends to files  This fixes the gallery app's --help  because before it was importing the ""paint"" module  which imported ""args""  which parsed arguments for the paint app instead of the gallery app.  This is also a refactor I've been meaning to do — since the very beginning  really — and it would've been a lot less trouble if I could've done it from the beginning  but I couldn't get imports to work. Yeah  really. Sounds pretty stupid 'cause it is. Python's module system is terrible.","palette_data.py",""," DEFAULT_PALETTE = [     ""rgb(0 0 0)""   # Black     ""rgb(128 128 128)""   # Dark Gray     ""rgb(128 0 0)""   # Dark Red     ""rgb(128 128 0)""   # Pea Green     ""rgb(0 128 0)""   # Dark Green     ""rgb(0 128 128)""   # Slate     ""rgb(0 0 128)""   # Dark Blue     ""rgb(128 0 128)""   # Lavender     ""rgb(128 128 64)""      ""rgb(0 64 64)""      ""rgb(0 128 255)""      ""rgb(0 64 128)""      ""rgb(64 0 255)""      ""rgb(128 64 0)""       ""rgb(255 255 255)""   # White     ""rgb(192 192 192)""   # Light Gray     ""rgb(255 0 0)""   # Brigh","@@ -0 0 +1 51 @@ + +DEFAULT_PALETTE = [ +    ""rgb(0 0 0)""   # Black +    ""rgb(128 128 128)""   # Dark Gray +    ""rgb(128 0 0)""   # Dark Red +    ""rgb(128 128 0)""   # Pea Green +    ""rgb(0 128 0)""   # Dark Green +    ""rgb(0 128 128)""   # Slate +    ""rgb(0 0 128)""   # Dark Blue +    ""rgb(128 0 128)""   # Lavender +    ""rgb(128 128 64)""  +    ""rgb(0 64 64)""  +    ""rgb(0 128 255)""  +    ""rgb(0 64 128)""  +    ""rgb(64 0 255)""  +    ""rgb(128 64 0)""  + +    ""rgb(255 255 255)""   # White +    ""rgb(192 192 192)""   # Lig","add missing punctuation","fix extract ansiartdocument and friends to files t"
"f1d6b266aa1692c3080961fde0ad3879e172576b","Fix multiple error cases reached  With `textual run --dev ""src.textual_paint.gallery foobar""` it output:      Folder not found: foobar     Not a folder: foobar     No ANSI art (*.ans  *.txt) found in folder: foobar      NOTE: 3 errors shown above.  Now it correctly outputs only:      Folder not found: foobar","gallery.py","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .ansi_art_document import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery' ","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .auto_restart import restart_on_changes  restart_program from .ansi_art_document import AnsiArtDocument  parser = argparse.ArgumentParser(description='ANSI art gallery' ","@@ -99 9 +99 12 @@ class GalleryApp(App[None]):            if not gallery_folder.exists():              self.exit(None  f""Folder not found: {gallery_folder}"") +            return            if not gallery_folder.is_dir(): +            # TODO: allow showing a specific file  and load whatever folder it's in              self.exit(None  f""Not a folder: {gallery_folder}"") +            return            exts = ("".ans""  "".txt"")   @@ -129 6 +132 7 @@ class GalleryApp(App[None]):            # Debugging          # s","add documentation for gallery","add fix multiple error cases reached with ` textua"
"1df201ae62a7f7a241ba7477b9200cd22413739f","Check earlier for if no paths were matched  This could make debugging less confusing if the nearby debugging code were enabled and there were no paths found  but also I'm planning on changing how gallery items are loaded  making it load progressively  and decoupling this logic from the UI helps prepare for that.","gallery.py","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .ansi_art_document import AnsiArtDocument from .auto_restart import restart_on_changes  restart_program  parser = argparse.ArgumentParser(description='ANSI art gallery' ","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .ansi_art_document import AnsiArtDocument from .auto_restart import restart_on_changes  restart_program  parser = argparse.ArgumentParser(description='ANSI art gallery' ","@@ -155 6 +155 10 @@ class GalleryApp(App[None]):              # Hide some uninteresting files              paths = [path for path in paths if not re.match(""0x0|1x1|2x2|4x4_font_template|gradient_test|pipe_strip_mega|cp437_as_utf8|galaxies_v1""  path.name)]   +        if len(paths) == 0: +            self.exit(None  f""No ANSI art ({'  '.join(f'*{ext}' for ext in exts)}) found in folder: {gallery_folder}"") +            return +          # Debugging          # self.exit(None  ""\n"".join(str(path) for path in pa","add example for gallery app","add check earlier for if no paths were matched thi"
"9a0a2c4f29bf72cd8a26871fa22cebc043d2250e","Virtualize scrolling in gallery  - Make it more efficient by loading files progressively. - Remove the HorizontalScroll  and instead position items absolutely  animating offsets to imitate the movement of scrolling horizontally.   - This fixes the left/right bindings not showing in the footer  due to ScrollableContainer's hidden left/right bindings.   - This also removes the possibility of scrolling half-way away from an item.   - This also fixes a problem where you could lose track of the currently viewed item when resizing the terminal  due to the 100% width of gallery items not jiving with the absolute notion of scroll position. (If the scroll position were stored as a fraction  it wouldn't have been a problem.) - Simplify the keyboard navigation logic by storing an index into the gallery  instead of having to figure out what item is centered.","gallery.css","GalleryItem {     layout: vertical;     width: 100%;     align: center middle; }  .image {     width: auto;     height: auto; }  .caption {     dock: bottom;     text-align: center; } ","GalleryItem {     layout: vertical;     width: 100%;     align: center middle;     dock: top; }  .image {     width: auto;     height: auto; }  .caption {     dock: bottom;     text-align: center; } ","@@ -2 6 +2 7 @@ GalleryItem {      layout: vertical;      width: 100%;      align: center middle; +    dock: top;  }    .image { ","add missing properties to galleryitem","remove virtualize scrolling in gallery - make it m"
"9a0a2c4f29bf72cd8a26871fa22cebc043d2250e","Virtualize scrolling in gallery  - Make it more efficient by loading files progressively. - Remove the HorizontalScroll  and instead position items absolutely  animating offsets to imitate the movement of scrolling horizontally.   - This fixes the left/right bindings not showing in the footer  due to ScrollableContainer's hidden left/right bindings.   - This also removes the possibility of scrolling half-way away from an item.   - This also fixes a problem where you could lose track of the currently viewed item when resizing the terminal  due to the 100% width of gallery items not jiving with the absolute notion of scroll position. (If the scroll position were stored as a fraction  it wouldn't have been a problem.) - Simplify the keyboard navigation logic by storing an index into the gallery  instead of having to figure out what item is centered.","gallery.py","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import HorizontalScroll  ScrollableContainer from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .ansi_art_document import AnsiArtDocument from .auto_restart import restart_on_changes  restart_program  parser = argparse.ArgumentParser(description='ANSI art gallery' ","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import Container  ScrollableContainer from textual.reactive import Reactive  var from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .ansi_art_document import AnsiArtDocument from .auto_restart import restart_on_changes  restart_program  parser = argparse.ArgumentPa","@@ -8 7 +8 8 @@ from pathlib import Path    from textual.app import App  ComposeResult  from textual.binding import Binding -from textual.containers import HorizontalScroll  ScrollableContainer +from textual.containers import Container  ScrollableContainer +from textual.reactive import Reactive  var  from textual.widgets import Footer  Header  Static    from .__init__ import __version__ @@ -31 6 +32 8 @@ def _(text: str) -> str:  class GalleryItem(ScrollableContainer):      """"""An image with a caption.""""""   ","add missing docstrings","remove virtualize scrolling in gallery - make it m"
"4456455c4da074c87c7b0fc56a7356bcc99b5b49","Fix usage of incorrect index  The dict is sparse  so its indices are not always the gallery's indices. This fixes the behavior when passing a file as an argument.  (I already fixed this code and must've undone it somehow! I was losing my mind over here!)","gallery.py","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path from rich.text import Text  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import Container  ScrollableContainer from textual.reactive import Reactive  var from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .ansi_art_document import AnsiArtDocument from .auto_restart import restart_on_changes  restart_program  p","""""""ANSI art gallery TUI""""""  import argparse import locale import os import re from pathlib import Path from rich.text import Text  from textual.app import App  ComposeResult from textual.binding import Binding from textual.containers import Container  ScrollableContainer from textual.reactive import Reactive  var from textual.widgets import Footer  Header  Static  from .__init__ import __version__ from .ansi_art_document import AnsiArtDocument from .auto_restart import restart_on_changes  restart_program  p","@@ -226 7 +226 8 @@ class GalleryApp(App[None]):      def watch_path_index(self  current_index: int) -> None:          """"""Called when the path index is changed.""""""          self._load_upcoming_images() -        for item_index  (path  gallery_item) in enumerate(self.gallery_item_by_path.items()): +        for path  gallery_item in self.gallery_item_by_path.items(): +            item_index = self.paths.index(path)              # gallery_item.set_class(item_index < current_index  ""previous"")              # gal","update galleryapp.py","fix fix usage of incorrect index the dict is spars"
"bcfddbe2fad0c2256f98487a15beafb823e40c48","Add first baseline for visual regression testing  It works!","test_snapshots.ambr","","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","@@ -0 0 +1 512 @@ +# serializer version: 1 +# name: test_gallery_app +  ''' +  <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg""> +      <!-- Generated with Rich https://www.textualize.io --> +      <style> +   +      @font-face { +          font-family: ""Fira Code""; +          src: local(""FiraCode-Regular"")  +                  url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")  +                  url(""htt","add fira code example","add first baseline for visual regression testing i"
"f09f5fbf5544a2c806a806cd1e3a1c602241bf96","Test light and dark theme variations with a pytest fixture  First I tried setting PYTEST_TEXTUAL_PAINT_ARGS as an environment variable  to be interpreted by args.py  but it turns out args.py is only executed once  not once per test. It's not using subprocesses  only importing and reimporting the app code  and instantiating new App instances  so parts of the code that are at the top level of modules is only evaluated once.  So I found a new strategy  of importing the `args` object in the test fixture and modifying it directly.  I also realized the --ascii-only option permanently modifies Textual's widgets and borders  and my own widgets  for the life of the process  so I'm holding off on that one. I should be able to make --ascii-only mode more dynamic  and could even target it as a runtime toggle  as a goal  since that's basically what I'll need to achieve to get it working for the tests  but thinking of it as a feature is more fun.","args.py","""""""Command line arguments for the app.""""""  import argparse import os import re import sys  from textual_paint.__init__ import DEVELOPMENT  __version__  PYTEST = ""pytest"" in sys.modules  parser = argparse.ArgumentParser(description='Paint in the terminal.'  usage='%(prog)s [options] [filename]'  prog=""textual-paint"") parser.add_argument('--version'  action='version'  version=f'%(prog)s {__version__}') parser.add_argument('--theme'  default='light'  help='Theme to use  either ""light"" or ""dark""'  choices=['lig","""""""Command line arguments for the app.""""""  import argparse import os import re import sys  from textual_paint.__init__ import DEVELOPMENT  __version__  PYTEST = ""pytest"" in sys.modules  parser = argparse.ArgumentParser(description='Paint in the terminal.'  usage='%(prog)s [options] [filename]'  prog=""textual-paint"") parser.add_argument('--version'  action='version'  version=f'%(prog)s {__version__}') parser.add_argument('--theme'  default='light'  help='Theme to use  either ""light"" or ""dark""'  choices=['lig","@@ -72 6 +72 7 @@ if DEVELOPMENT:      # while working on the project.      update_cli_help_on_readme()   +# args = parser.parse_args(os.environ.get(""PYTEST_TEXTUAL_PAINT_ARGS""  """").split("" "")) if PYTEST else parser.parse_args()  args = parser.parse_args([]) if PYTEST else parser.parse_args()  """"""Parsed command line arguments.""""""   ","add python-test env to test-cli-help","add test light and dark theme variations with a py"
"f09f5fbf5544a2c806a806cd1e3a1c602241bf96","Test light and dark theme variations with a pytest fixture  First I tried setting PYTEST_TEXTUAL_PAINT_ARGS as an environment variable  to be interpreted by args.py  but it turns out args.py is only executed once  not once per test. It's not using subprocesses  only importing and reimporting the app code  and instantiating new App instances  so parts of the code that are at the top level of modules is only evaluated once.  So I found a new strategy  of importing the `args` object in the test fixture and modifying it directly.  I also realized the --ascii-only option permanently modifies Textual's widgets and borders  and my own widgets  for the life of the process  so I'm holding off on that one. I should be able to make --ascii-only mode more dynamic  and could even target it as a runtime toggle  as a goal  since that's basically what I'll need to achieve to get it working for the tests  but thinking of it as a feature is more fun.","test_snapshots.ambr","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","@@ -164 7 +164 234 @@        '''  # --- -# name: test_paint_app +# name: test_paint_app[dark_unicode] +  ''' +  <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg""> +      <!-- Generated with Rich https://www.textualize.io --> +      <style> +   +      @font-face { +          font-family: ""Fira Code""; +          src: local(""FiraCode-Regular"")  +                  url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""wo","add missing fira code font","add test light and dark theme variations with a py"
"f09f5fbf5544a2c806a806cd1e3a1c602241bf96","Test light and dark theme variations with a pytest fixture  First I tried setting PYTEST_TEXTUAL_PAINT_ARGS as an environment variable  to be interpreted by args.py  but it turns out args.py is only executed once  not once per test. It's not using subprocesses  only importing and reimporting the app code  and instantiating new App instances  so parts of the code that are at the top level of modules is only evaluated once.  So I found a new strategy  of importing the `args` object in the test fixture and modifying it directly.  I also realized the --ascii-only option permanently modifies Textual's widgets and borders  and my own widgets  for the life of the process  so I'm holding off on that one. I should be able to make --ascii-only mode more dynamic  and could even target it as a runtime toggle  as a goal  since that's basically what I'll need to achieve to get it working for the tests  but thinking of it as a feature is more fun.","test_snapshots.py","from pathlib import Path  import pytest  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the entire paint app.""""""  def test_paint_app(snap_compare):     assert snap_compare(PAINT  terminal_size=LARGER)  def test_paint_stretch_skew_dialog(snap_compare):     assert snap_compare(PAINT  press=[""ctrl+w""])  def test_paint_flip_rotate_dialog(snap_compare):     asser","import os from pathlib import Path from typing import Literal  import pytest  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the entire paint app.""""""  # def each_theme(func): #     @pytest.mark.parametrize(""theme""  [""light""  ""dark""]) #     @pytest.mark.parametrize(""ui_charset""  [""unicode""  ""ascii""]) #     def wrapper(*args  theme: Literal[""light""  ""dark""]  u","@@ -1 4 +1 6 @@ +import os  from pathlib import Path +from typing import Literal    import pytest   @@ -10 31 +12 63 @@ GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38)  """"""Large enough to show the entire paint app.""""""   -def test_paint_app(snap_compare): +# def each_theme(func): +#     @pytest.mark.parametrize(""theme""  [""light""  ""dark""]) +#     @pytest.mark.parametrize(""ui_charset""  [""unicode""  ""ascii""]) +#     def wrapper(*args  theme: Literal[""light""  ""dark""]  ui_charset: Literal[""unicode""  ""ascii""] ","add test for gallery large enough to show","add test light and dark theme variations with a py"
"8a4ca8d38027b45258e01e79e6c55e82e14016d5","Fix toggling light/dark mode not affecting file/folder icons in tree  I already fixed my first bug caught by the snapshot testing! These variables were intended as constants  but were being mutated. I recall writing it as `prefix = (...).stylize_before(...)` and then moving it to a new line when I realized it was mutation-style method  not so much the chaining-style factory that I wanted  but I conceived of it too much as a stylistic distinction in the moment  looking back. Mutation style means mutation!  Side note: tests also showed a spurious change of a cursor blinking. I don't really know whether that's in this changeset or not  because the workflow involves re-running the tests to update the baseline  and the nice visual diffs provided in the snapshot report aren't available when viewing the commit diff. 1. If the SVGs were separate files  I could see the diffs on GitHub    or in GitHub Desktop  and maybe some other Git clients.    It would also make it a lot easier to simply view the baselines     which is useful in general. 2. It would be nice if built-in components didn't cause spurious diffs     including the Input's cursor blinking and the Header's clock ticking.    I already removed the clock from my gallery app  because it's a sort    of trivial decision  but Inputs I'll have to reckon with.","enhanced_directory_tree.py","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  from textual_paint.args import args  # Vague skeuomorphism # FILE_ICON = ","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  from textual_paint.args import args  # Vague skeuomorphism # FILE_ICON = ","@@ -172 13 +172 13 @@ class EnhancedDirectoryTree(DirectoryTree):          node_label.stylize(style)            if node._allow_expand:  # type: ignore -            prefix = (FOLDER_OPEN_ICON if node.is_expanded else FOLDER_CLOSED_ICON) +            prefix = (FOLDER_OPEN_ICON if node.is_expanded else FOLDER_CLOSED_ICON).copy()              prefix.stylize_before(base_style + TOGGLE_STYLE)              node_label.stylize_before(                  self.get_component_rich_style(""directory-tree--folder""  partial=T","fix style in enhanceddirectorytree","fix fix toggling light/dark mode not affecting fil"
"8a4ca8d38027b45258e01e79e6c55e82e14016d5","Fix toggling light/dark mode not affecting file/folder icons in tree  I already fixed my first bug caught by the snapshot testing! These variables were intended as constants  but were being mutated. I recall writing it as `prefix = (...).stylize_before(...)` and then moving it to a new line when I realized it was mutation-style method  not so much the chaining-style factory that I wanted  but I conceived of it too much as a stylistic distinction in the moment  looking back. Mutation style means mutation!  Side note: tests also showed a spurious change of a cursor blinking. I don't really know whether that's in this changeset or not  because the workflow involves re-running the tests to update the baseline  and the nice visual diffs provided in the snapshot report aren't available when viewing the commit diff. 1. If the SVGs were separate files  I could see the diffs on GitHub    or in GitHub Desktop  and maybe some other Git clients.    It would also make it a lot easier to simply view the baselines     which is useful in general. 2. It would be nice if built-in components didn't cause spurious diffs     including the Input's cursor blinking and the Header's clock ticking.    I already removed the clock from my gallery app  because it's a sort    of trivial decision  but Inputs I'll have to reckon with.","test_snapshots.ambr","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","@@ -2175 212 +2175 211 @@            font-weight: 700;        }     -      .terminal-1430801634-matrix { +      .terminal-249775458-matrix {            font-family: Fira Code  monospace;            font-size: 20px;            line-height: 24.4px;            font-variant-east-asian: full-width;        }     -      .terminal-1430801634-title { +      .terminal-249775458-title {            font-size: 18px;            font-weight: bold;            font-family: arial;        }     -      .terminal-1430801634-r1 ","add missing font properties","fix fix toggling light/dark mode not affecting fil"
"90f52f065563704e7881988cf0c40fd4f338c1d6","It's not flaky... it's really the dark mode tests that are failing","test_snapshots.py","from pathlib import Path  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the entire paint app."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which is a bit oversized.""""""  # Prevent flaky tests due to timing issues. Input.","from pathlib import Path  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the entire paint app."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which is a bit oversized.""""""  # Prevent flaky tests due to timing issues. Input.","@@ -17 8 +17 8 @@ LARGEST = (107  42)  """"""Large enough to show the Edit Colors dialog  which is a bit oversized.""""""    # Prevent flaky tests due to timing issues. -Input.cursor_blink = False -paint.DOUBLE_CLICK_TIME = 2.0 +Input.cursor_blink = False  # type: ignore +paint.DOUBLE_CLICK_TIME = 20.0  # seconds; ridiculously high    @pytest.fixture(params=[      {""theme"": ""light""  ""ascii_only"": False}  ","fix flaky test","update it 's not flaky ... it 's really the dark m"
"1b9cfe51b39161d5e0a6e92bd33f47275bf37430","Fix dark mode tests failing to open dialogs  This was kind of mind-boggling  narrowing it down to dark mode  and then to dark mode *but not CSS*. I kept narrowing it down  and looked into how dark mode was implemented  and finally figured this out. `app.call_later(app.refresh_css)` in `App.watch_dark` causes a timing issue.","test_snapshots.py","from pathlib import Path  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the entire paint app."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which is a bit oversized.""""""  # Prevent flaky tests due to timing issues. Input.","from pathlib import Path  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the entire paint app."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which is a bit oversized.""""""  # Prevent flaky tests due to timing issues. Input.","@@ -74 17 +74 25 @@ def test_swap_selected_colors(snap_compare):      assert snap_compare(PAINT  run_before=swap_selected_colors)    def test_paint_character_picker_dialog(snap_compare  each_theme): -    async def open_character_picker(pilot: Pilot): +    async def open_character_picker(pilot: Pilot[None]): +        # app.dark = True caused it to fail to open the dialog in the dark theme  +        # due to `self.call_later(self.refresh_css)` in `watch_dark` in `App` +        # (verified by replacing `app.da","add test for painting character picker dialog","add fix dark mode tests failing to open dialogs th"
"628170d213c7f8dded9d48b166bacc3537375e63","Test error dialog  It's pretty ridiculous in the expanded state  but better to show it. Also  the button text isn't switching to ""Hide Details"".","test_snapshots.ambr","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","@@ -2998 6 +2998 710 @@        '''  # --- +# name: test_paint_error_dialog[dark_ascii] +  ''' +  <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg""> +      <!-- Generated with Rich https://www.textualize.io --> +      <style> +   +      @font-face { +          font-family: ""Fira Code""; +          src: local(""FiraCode-Regular"")  +                  url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")  +        ","add missing font-face in test","add test error dialog it 's pretty ridiculous in t"
"628170d213c7f8dded9d48b166bacc3537375e63","Test error dialog  It's pretty ridiculous in the expanded state  but better to show it. Also  the button text isn't switching to ""Hide Details"".","test_snapshots.py","from pathlib import Path  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the Textual Paint app's main UI and most dialogs comfortably."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which is a bit oversized.""""""  # Prevent ","from pathlib import Path from typing import TYPE_CHECKING  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the Textual Paint app's main UI and most dialogs comfortably."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which i","@@ -1 4 +1 5 @@  from pathlib import Path +from typing import TYPE_CHECKING    import pytest  from textual.pilot import Pilot @@ -18 7 +19 7 @@ LARGEST = (107  42)    # Prevent flaky tests due to timing issues.  Input.cursor_blink = False  # type: ignore -paint.DOUBLE_CLICK_TIME = 20.0  # seconds; ridiculously high +# paint.DOUBLE_CLICK_TIME = 20.0  # seconds; ridiculously high; probably ineffective since paint.py is re-evaluated for each test    @pytest.fixture(params=[      {""theme"": ""light""  ""ascii_only""","fix flaky test","fix test error dialog it 's pretty ridiculous in t"
"ad9ff303f148d807304dcaedbf39261654166f1f","Update fixture docstring","test_snapshots.py","from pathlib import Path from typing import TYPE_CHECKING  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the Textual Paint app's main UI and most dialogs comfortably."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which i","from pathlib import Path from typing import TYPE_CHECKING  import pytest from textual.pilot import Pilot from textual.widgets import Input  from textual_paint import paint  # These paths are treated as relative to this file. APPS_DIR = Path(""../src/textual_paint"") PAINT = APPS_DIR / ""paint.py"" GALLERY = APPS_DIR / ""gallery.py""  LARGER = (81  38) """"""Large enough to show the Textual Paint app's main UI and most dialogs comfortably."""""" LARGEST = (107  42) """"""Large enough to show the Edit Colors dialog  which i","@@ -28 7 +28 7 @@ Input.cursor_blink = False  # type: ignore      {""theme"": ""dark""  ""ascii_only"": True}   ]  ids=lambda param: f""{param['theme']}_{'ascii' if param['ascii_only'] else 'unicode'}"")  def each_theme(request): -    """"""Fixture to set the PYTEST_TEXTUAL_PAINT_ARGS environment variable."""""" +    """"""Fixture to test each combination of UI styles.""""""      theme = request.param.get(""theme"")      ascii_only = request.param.get(""ascii_only"")      # os.environ[""PYTEST_TEXTUAL_PAINT_ARGS""] = f""--theme {them","fix tests","update update fixture docstring fix tests"
"2e89e73f37757bcad23c7929970c392a9ac4d48c","Fix About Paint dialog test failing due to version string changes  Make version info static when running in pytest.  I also tried adding in test_snapshots.py:      import textual_paint     textual_paint.__version__ = ""snapshot test edition 1""      import textual_paint.__init__ as init     init.__version__ = ""snapshot test edition 2""  which seemed to have no effect.  Since I already have special case logic for __version__ in __init__.py  I'm reasonably happy with this solution.","__init__.py","""""""MS Paint for the terminal  built with Textual.""""""  __author__ = ""Isaiah Odhner"" __copyright__ = ""Copyright Isaiah Odhner"" __credits__ = [""Isaiah Odhner""] __maintainer__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.2.0"" __license__ = ""MIT""  # Set version string when in a git repository # to distinguish production from development versions.  from os.path import dirname  exists from subprocess import check_output  DEVELOPMENT = exists(dirname(__file__) + ""/../../.git"") """"""Whether ","""""""MS Paint for the terminal  built with Textual.""""""  __author__ = ""Isaiah Odhner"" __copyright__ = ""Copyright Isaiah Odhner"" __credits__ = [""Isaiah Odhner""] __maintainer__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.2.0"" __license__ = ""MIT""  # Set version string when in a git repository # to distinguish production from development versions.  from os.path import dirname  exists from subprocess import check_output  DEVELOPMENT = exists(dirname(__file__) + ""/../../.git"") """"""Whether ","@@ -17 5 +17 14 @@ from subprocess import check_output  DEVELOPMENT = exists(dirname(__file__) + ""/../../.git"")  """"""Whether running from a Git repository.""""""   +import sys + +PYTEST = ""pytest"" in sys.modules +""""""Whether running from pytest."""""" +  if DEVELOPMENT:      __version__ = ""development "" + check_output([""git""  ""describe""  ""--tags""]  cwd=dirname(__file__)).strip().decode() + +if PYTEST: +    # Avoid version string in About Paint dialog affecting snapshots. +    __version__ = ""snapshot test edition :)","add version string in release dialog","add fix about paint dialog test failing due to ver"
"2e89e73f37757bcad23c7929970c392a9ac4d48c","Fix About Paint dialog test failing due to version string changes  Make version info static when running in pytest.  I also tried adding in test_snapshots.py:      import textual_paint     textual_paint.__version__ = ""snapshot test edition 1""      import textual_paint.__init__ as init     init.__version__ = ""snapshot test edition 2""  which seemed to have no effect.  Since I already have special case logic for __version__ in __init__.py  I'm reasonably happy with this solution.","test_snapshots.ambr","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","# serializer version: 1 # name: test_gallery_app   '''   <svg class=""rich-terminal"" viewBox=""0 0 994 635.5999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/ajax","@@ -187 163 +187 163 @@            font-weight: 700;        }     -      .terminal-2452316265-matrix { +      .terminal-1645961354-matrix {            font-family: Fira Code  monospace;            font-size: 20px;            line-height: 24.4px;            font-variant-east-asian: full-width;        }     -      .terminal-2452316265-title { +      .terminal-1645961354-title {            font-size: 18px;            font-weight: bold;            font-family: arial;        }     -      .terminal-2452316265-r1 ","add missing font properties","add fix about paint dialog test failing due to ver"
"dbc8acaa39efde09585b8887bdf792d1d4966817","WIP: Try to fix premature closing of polygon  Try to prevent double click logic from triggering when mouse moves between first and second clicks significantly","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from enum import Enum from pathlib import Path from random import random from typing import Any  Callable  Coroutine  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from pyfiglet import Figlet  FigletFont  # type: ignore from rich.segment import Segment from rich.style import Style from rich.text ","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from enum import Enum from pathlib import Path from random import random from typing import Any  Callable  Coroutine  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from pyfiglet import Figlet  FigletFont  # type: ignore from rich.segment import Segment from rich.style import Style from rich.text ","@@ -3746 8 +3746 12 @@ Columns: {len(palette) // 2}              )              double_clicked = (                  time_since_last_click < double_click_threshold_seconds and +                # Distance from second click press to release                  abs(self.mouse_at_start.x - event.x) <= double_click_threshold_cells and -                abs(self.mouse_at_start.y - event.y) <= double_click_threshold_cells +                abs(self.mouse_at_start.y - event.y) <= double_click_threshold_cells and +       ","fix double click in table header","fix wip : try to premature closing of polygon try"
"dedeedb12946a67153edccf28e6f73995fb18b77","Debug Polygon test by running interactively","draw_polygon.py","","from textual.geometry import Offset from textual.pilot import Pilot from textual.widget import Widget from textual_paint.paint import PaintApp   async def draw_polygon(pilot: Pilot[None]):     tool_buttons = pilot.app.query(""ToolsBox Button"")     color_buttons = pilot.app.query(""ColorsBox Button"")     for button in tool_buttons:         if button.tooltip == ""Polygon"":             polygon_tool_button = button             break     else:         raise Exception(""Couldn't find Polygon tool button"")      async ","@@ -0 0 +1 42 @@ +from textual.geometry import Offset +from textual.pilot import Pilot +from textual.widget import Widget +from textual_paint.paint import PaintApp + + +async def draw_polygon(pilot: Pilot[None]): +    tool_buttons = pilot.app.query(""ToolsBox Button"") +    color_buttons = pilot.app.query(""ColorsBox Button"") +    for button in tool_buttons: +        if button.tooltip == ""Polygon"": +            polygon_tool_button = button +            break +    else: +        raise Exception(""Couldn't find P","add polygon example","add debug polygon test by running interactively po"
"8a2f4d6b726163e4ce2f3ac01da67091d9cbad82","WIP on stepwise undo app lifecycle  No error... until 30s passes. WaitForScreenTimeout: Timed out while waiting for widgets to process pending messages.","pilot_recorder.py","import os from typing import Callable from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual_paint.paint import PaintApp  def unique_file(path: str) -> str:     filename  extension = os.path.splitext(path)     counter = 1      while os.path.exists(path):         path = f""{filename}_{counter}{ex","import os from typing import Callable from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual_paint.paint import PaintApp  def unique_file(path: str) -> str:     filename  extension = os.path.splitext(path)     counter = 1      while os.path.exists(path):         path = f""{filename}_{counter}{ex","@@ -18 6 +18 9 @@ def unique_file(path: str) -> str:        return path   +def indent(text: str  spaces: int) -> str: +    return ""\n"".join("" "" * spaces + line for line in text.splitlines()) +  OUTPUT_FILE = unique_file(""tests/test_paint_something.py"")    steps: list[tuple[Event  Offset  str  int|None]] = [] @@ -66 15 +69 16 @@ async def on_event(self: PaintApp  event: Event) -> None:  app: PaintApp | None = None  next_after_exit: Callable[[]  None] | None = None   -async def async_exec(code: str) -> object","add test for","add wip on stepwise undo app lifecycle no error .."
"941b2b52e6046623f2391853c1d85f820d9b1d8f","Auto-save replay code for debugging purposes","pilot_recorder.py","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual_paint.paint import PaintApp  def unique_file(path: str) -> str:     filename  extension = os.path.split","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual_paint.paint import PaintApp  def unique_file(path: str) -> str:     filename  extension = os.path.split","@@ -91 14 +91 21 @@ class PilotRecorder():                  return              offset = event.screen_offset - widget.region.offset              self.steps.append((event  offset  *get_selector(widget))) +            self.steps_changed()          elif isinstance(event  Key):              if event.key == ""ctrl+z"" and self.steps:                  self.steps.pop() +                self.steps_changed()                  self.run()  # restart the app to replay up to this point              elif event.key == ""ctrl+","fix pilot recorder","fix auto-save replay code for debugging purposes p"
"a2e1b6cfd86dc2048d1c710bb8a1675c4c7f1ab5","Record events before they're handled normally  This might fix a race condition that lead to a `query` raising `NoMatches`  but this is just theoretical. Regardless  this seems like the way to go. Generating the selectors to match the clicked widget needs a view of the DOM before the widget is removed from it (or reordered in the DOM etc.)","pilot_recorder.py","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual_paint.paint import PaintApp  def unique_file(path: str) -> str:     filename  extension = os.path.split","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual_paint.paint import PaintApp  def unique_file(path: str) -> str:     filename  extension = os.path.split","@@ -52 9 +52 6 @@ def get_selector(target: DOMNode) -> tuple[str  int|None]:      try:          query_result = app.query_one(selector)      except TooManyMatches: -        # FIXME: I think this can fail due to a race condition  -        # when clicking a button that closes a dialog  removing the button from the DOM. -        # Maybe intercept events differently  like by overriding post_message?          return selector  app.query(selector).nodes.index(target)  # type: ignore          # smarter differentiato","fix bug in get_selector","fix record events before they 're handled normally"
"402b46c7df481a6dabc1ad0a0efa80de152b44fa","Make failing to create a selector non-fatal","pilot_recorder.py","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable  from rich.text import Text from textual.app import App from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen  from textual_paint.paint import PaintApp   def unique_file(","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable  from rich.text import Text from textual.app import App from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen  from textual_paint.paint import PaintApp   def unique_file(","@@ -104 7 +104 16 @@ class PilotRecorder():              except NoWidget:                  return              offset = event.screen_offset - widget.region.offset -            self.steps.append((event  offset  *get_selector(widget))) +            try: +                selector  index = get_selector(widget) +            except Exception as e: +                # e.g. Scrollbar can't be queried for +                # Currently this means you can't drag a scrollbar +                # in a test recording  but if","add a try/except block to pilotrecorder","update make failing to create a selector non-fatal"
"f62c8ff6c928792d61cd99e24b2caee3c118d5c8","Highlight active step during playback  I love when GitHub Copilot suggests code using an API (or language feature / idiom etc.) that I didn't even know about. More often it'll just make something up  but `highlight_lines` actually exists!  Anyways  I'm doing a hacky thing to get it to highlight lines of code during execution  prepending code (invisibly) to each line  except lines that would cause a syntax error.  Also  the steps view isn't updating reliably (even when adding steps).","pilot_recorder.py","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable from rich.syntax import Syntax  from rich.text import Text from textual.app import App from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual.widgets import S","""""""Record interactions and save as an automated test.""""""  import os from typing import Any  Callable from rich.syntax import Syntax  from rich.text import Text from textual.app import App from textual.css.query import NoMatches  TooManyMatches from textual.dom import DOMNode from textual.errors import NoWidget from textual.events import Event  Key  MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.screen import Screen from textual.widgets import S","@@ -142 21 +142 30 @@ class PilotRecorder():        def steps_changed(self) -> None:          """"""Update the steps view any time the steps change."""""" -        assert self.app is not None  ""app should be set if we're recording an event from it"" +        self.update_steps_view() + +    def update_steps_view(self  highlight_lines: set[int] | None = None) -> None: +        assert self.app is not None  ""app should be set when updating the steps view""          if self.steps_view.parent is None:              self.a","add missing assert","add highlight active step during playback i love w"
"d6399022ee6c8cc428d94c97f4f0848948688e6f","Fix/cleanup test_text_tool_cursor_keys_and_color  - Fix `APP_PATH` reference error - Hold Ctrl to set the foreground color (modifiers not recorded yet) - DRY `pilot.press` - Use same terminal size as many other tests - Seven isn't spelt with a 2  but zero is! ;)","test_snapshots.py","from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  import pytest from textual.geometry import Offset from textual.pilot import Pilot from textual.widget import Widget from textual.widgets import Input  if TYPE_CHECKING:     # When tests are run  paint.py is re-evaluated      # leading to a different class of the same name at runtime.     from textual_paint.paint import PaintApp   class SnapCompareType(Protocol):     """"""Type of the function returned ","from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  import pytest from textual.geometry import Offset from textual.pilot import Pilot from textual.widget import Widget from textual.widgets import Input  if TYPE_CHECKING:     # When tests are run  paint.py is re-evaluated      # leading to a different class of the same name at runtime.     from textual_paint.paint import PaintApp   class SnapCompareType(Protocol):     """"""Type of the function returned ","@@ -237 12 +237 12 @@ def test_text_tool_wrapping(snap_compare: SnapCompareType):  def test_text_tool_cursor_keys_and_color(snap_compare: SnapCompareType):      async def automate_app(pilot: Pilot[None]):           -        async def click_by_index(selector: str  index: int) -> None: +        async def click_by_index(selector: str  index: int  shift: bool = False  meta: bool = False  control: bool = False) -> None:              """"""Click on widget  query disambiguated by index""""""              # await pilot.p","add test for","add fix/cleanup test_text_tool_cursor_keys_and_col"
"bb8e968f6c9758c01102646f47c8d82d6aa7d638","Test Free-Form Select off-screen melding bug","test_snapshots.ambr","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","@@ -225 6 +225 232 @@        '''  # --- +# name: test_free_form_select_meld_negative_coords +  ''' +  <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg""> +      <!-- Generated with Rich https://www.textualize.io --> +      <style> +   +      @font-face { +          font-family: ""Fira Code""; +          src: local(""FiraCode-Regular"")  +                  url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")  +  ","add missing font-face in test","update test free-form select off-screen melding bu"
"bb8e968f6c9758c01102646f47c8d82d6aa7d638","Test Free-Form Select off-screen melding bug","test_snapshots.py","from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  import pytest from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_CHECKING:     # When tests are run  paint.py is re-evaluated      # leading to a different class of the same name at runtime.     from textual_paint.paint import PaintApp   class SnapCompareType(Protocol):   ","from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  import pytest from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_CHECKING:     # When tests are run  paint.py is re-evaluated      # leading to a different class of the same name at runtime.     from textual_paint.paint import PaintApp   class SnapCompareType(Protocol):   ","@@ -241 6 +241 22 @@ def test_free_form_select(snap_compare: SnapCompareType):        assert snap_compare(PAINT  run_before=automate_app  terminal_size=LARGER)   +# Don't run  so that it doesn't overwrite the snapshot with --snapshot-update +# You can run it to see the diff  but it's disabled to prevent accidentally committing a bad snapshot. +@pytest.mark.xfail(run=False  reason=""The Free-Form Select tool is currently buggy  melding incorrectly when off-screen to the left/top  but I've contrived the correc","add xfail test for free-form-select","add test free-form select off-screen melding bug x"
"370b497cc6f674b960f5cde115f00d64c2947c5b","VS Code: Add launch configuration for debugging tests  I just want to disable the external code skipping feature (""justMyCode"") but I seem to have to abandon the pytest integration to do so?","launch.json","{ 	// Use IntelliSense to learn about possible attributes. 	// Hover to view descriptions of existing attributes. 	// For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387 	""version"": ""0.2.0""  	""configurations"": [ 		{ 			""name"": ""Run Textual App""  			""type"": ""python""  			""request"": ""launch""  			// TODO: is there a way to get this from the environment  i.e. to use 			// the binary that `which textual` would return  			// or to use textual as ""module"" but still run the correct app? 			//","{ 	// Use IntelliSense to learn about possible attributes. 	// Hover to view descriptions of existing attributes. 	// For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387 	""version"": ""0.2.0""  	""configurations"": [ 		{ 			""name"": ""Run Textual App""  			""type"": ""python""  			""request"": ""launch""  			// TODO: is there a way to get this from the environment  i.e. to use 			// the binary that `which textual` would return  			// or to use textual as ""module"" but still run the correct app? 			//","@@ -47 6 +47 17 @@  			""args"": [""run""  ""--dev""  ""src.textual_paint.paint --clear-screen --restart-on-changes""]   			""console"": ""integratedTerminal""   			""justMyCode"": false -		} +		}  +		{ +            ""name"": ""Debug Tests""  +            ""type"": ""python""  +            ""request"": ""launch""  +			""program"": "".venv/bin/pytest""  +			// ""args"": [""tests/test_snapshots.py::test_paint_open_dialog""]  +            ""console"": ""integratedTerminal""  +            ""justMyCode"": false  +			// If using pytest-cov in the futur","add debug tests","add vs code : launch configuration for debugging t"
"7f91138a63ffc82b56b4111541567459d5a3d01f","Use pyfakefs for file dialog tests  - The app's directory structure is not a constant  and shouldn't play into this test. Aside from codebase restructuring  directories like `__pycache__` can come and go. - Even if a temporary directory were created with files enough to fill the view  the scrollbar would still change based on the folder structure outside of the temporary folder. - pyfakefs is one way to ensure a consistent view of a folder structure for testing. It allows adding real folders in a readonly way. It's more complicated than I thought it would be going in  since I had to add workarounds for pyfiglet and pytest-textual-snapshot  and handle an edge case in my EnhancedDirectoryTree (which got an error which seems to be swallowed?)  not to mention pyfakefs raises an error saying ""No such file or directory in the fake filesystem"" when actually it's the real directory not existing when trying to add it to the fake filesystem  and VS Code was hiding stack frames and refusing to step into library code  and it turned out that I was resolving the absolute path wrong  but it looked right to me because the only part that was missing was ""textual-paint""  when  at a glance it seemed present  since the ""textual_paint"" part was present. Ay-ay-ay! - I don't know if this will fix the problem I saw where these tests' snapshots all changed with no visual or even structural changes  just the IDs of elements changing. I don't know what caused that.  Oh yeah and this is still actually a problem: ============================================= short test summary info ============================================== FAILED tests/test_snapshots.py::test_paint_open_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? ========================== 8 failed  56 passed  1 xfailed  1 warning in 152.86s (0:02:32) ========================== It worked when running in debug  but not when running normally.","cspell.json","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""afterstep""  		""ambr""  		""Andale""  		""APNG""  		""appcode""  	","{ 	""files"": [ 		""**""  		"".*/**"" 	]  	""enableFiletypes"": [ 		""pip-requirements""  		""shellscript""  		""tlaplus_cfg""  // file type detected wrong  I'm just trying to match *.cfg 		""toml"" 	]  	""ignorePaths"": [ 		"".git""  		""*.(bmp|png|jpg|jpeg|gif|svg|ico|tiff|tif|ans|flf)""  		""*.log""  		""**/localization/*/**/*""  		""**/localization/*.sh""  		""**/typings/**/*""  		""**/samples/*""  		""**/samples/**/*""  		""__pycache__""  		""**/*.egg-info/**/*"" 	]  	""words"": [ 		""afterstep""  		""ambr""  		""Andale""  		""APNG""  		""appcode""  	","@@ -118 6 +118 7 @@  		""psutil""   		""pybabel""   		""pycache""  +		""pyfakefs""   		""pyfiglet""   		""Pylance""   		""pyobjc""  ","add missing packages","change use pyfakefs for file dialog tests - the ap"
"7f91138a63ffc82b56b4111541567459d5a3d01f","Use pyfakefs for file dialog tests  - The app's directory structure is not a constant  and shouldn't play into this test. Aside from codebase restructuring  directories like `__pycache__` can come and go. - Even if a temporary directory were created with files enough to fill the view  the scrollbar would still change based on the folder structure outside of the temporary folder. - pyfakefs is one way to ensure a consistent view of a folder structure for testing. It allows adding real folders in a readonly way. It's more complicated than I thought it would be going in  since I had to add workarounds for pyfiglet and pytest-textual-snapshot  and handle an edge case in my EnhancedDirectoryTree (which got an error which seems to be swallowed?)  not to mention pyfakefs raises an error saying ""No such file or directory in the fake filesystem"" when actually it's the real directory not existing when trying to add it to the fake filesystem  and VS Code was hiding stack frames and refusing to step into library code  and it turned out that I was resolving the absolute path wrong  but it looked right to me because the only part that was missing was ""textual-paint""  when  at a glance it seemed present  since the ""textual_paint"" part was present. Ay-ay-ay! - I don't know if this will fix the problem I saw where these tests' snapshots all changed with no visual or even structural changes  just the IDs of elements changing. I don't know what caused that.  Oh yeah and this is still actually a problem: ============================================= short test summary info ============================================== FAILED tests/test_snapshots.py::test_paint_open_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? ========================== 8 failed  56 passed  1 xfailed  1 warning in 152.86s (0:02:32) ========================== It worked when running in debug  but not when running normally.","requirements.txt","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","@@ -14 3 +14 4 @@ types-Pillow==10.0.0.1 # for development  types-psutil==5.9.5.15 # for development  pytest==7.4.1 # for development  pytest-textual-snapshot==0.4.0 # for development +pyfakefs==5.2.4 # for development ","add missing comment","change use pyfakefs for file dialog tests - the ap"
"7f91138a63ffc82b56b4111541567459d5a3d01f","Use pyfakefs for file dialog tests  - The app's directory structure is not a constant  and shouldn't play into this test. Aside from codebase restructuring  directories like `__pycache__` can come and go. - Even if a temporary directory were created with files enough to fill the view  the scrollbar would still change based on the folder structure outside of the temporary folder. - pyfakefs is one way to ensure a consistent view of a folder structure for testing. It allows adding real folders in a readonly way. It's more complicated than I thought it would be going in  since I had to add workarounds for pyfiglet and pytest-textual-snapshot  and handle an edge case in my EnhancedDirectoryTree (which got an error which seems to be swallowed?)  not to mention pyfakefs raises an error saying ""No such file or directory in the fake filesystem"" when actually it's the real directory not existing when trying to add it to the fake filesystem  and VS Code was hiding stack frames and refusing to step into library code  and it turned out that I was resolving the absolute path wrong  but it looked right to me because the only part that was missing was ""textual-paint""  when  at a glance it seemed present  since the ""textual_paint"" part was present. Ay-ay-ay! - I don't know if this will fix the problem I saw where these tests' snapshots all changed with no visual or even structural changes  just the IDs of elements changing. I don't know what caused that.  Oh yeah and this is still actually a problem: ============================================= short test summary info ============================================== FAILED tests/test_snapshots.py::test_paint_open_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? ========================== 8 failed  56 passed  1 xfailed  1 warning in 152.86s (0:02:32) ========================== It worked when running in debug  but not when running normally.","enhanced_directory_tree.py","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.ascii_mode impor","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.ascii_mode impor","@@ -163 7 +163 11 @@ class EnhancedDirectoryTree(DirectoryTree):            if callback is None:              callback = lambda: None -        self._expand_matching_child(self.root  target_path.parts[1:]  callback) +         +        remaining_parts = target_path.parts[1:] +        # True unless target_path is the root (edge case which occurs when testing with pyfakefs). +        if len(remaining_parts) > 1: +            self._expand_matching_child(self.root  remaining_parts  callback)        def render_lab","add a test for the fakefs root path","change use pyfakefs for file dialog tests - the ap"
"7f91138a63ffc82b56b4111541567459d5a3d01f","Use pyfakefs for file dialog tests  - The app's directory structure is not a constant  and shouldn't play into this test. Aside from codebase restructuring  directories like `__pycache__` can come and go. - Even if a temporary directory were created with files enough to fill the view  the scrollbar would still change based on the folder structure outside of the temporary folder. - pyfakefs is one way to ensure a consistent view of a folder structure for testing. It allows adding real folders in a readonly way. It's more complicated than I thought it would be going in  since I had to add workarounds for pyfiglet and pytest-textual-snapshot  and handle an edge case in my EnhancedDirectoryTree (which got an error which seems to be swallowed?)  not to mention pyfakefs raises an error saying ""No such file or directory in the fake filesystem"" when actually it's the real directory not existing when trying to add it to the fake filesystem  and VS Code was hiding stack frames and refusing to step into library code  and it turned out that I was resolving the absolute path wrong  but it looked right to me because the only part that was missing was ""textual-paint""  when  at a glance it seemed present  since the ""textual_paint"" part was present. Ay-ay-ay! - I don't know if this will fix the problem I saw where these tests' snapshots all changed with no visual or even structural changes  just the IDs of elements changing. I don't know what caused that.  Oh yeah and this is still actually a problem: ============================================= short test summary info ============================================== FAILED tests/test_snapshots.py::test_paint_open_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? ========================== 8 failed  56 passed  1 xfailed  1 warning in 152.86s (0:02:32) ========================== It worked when running in debug  but not when running normally.","test_snapshots.py","from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  import pytest from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_CHECKING:     # When tests are run  paint.py is re-evaluated      # leading to a different class of the same name at runtime.     from textual_paint.paint import PaintApp   class SnapCompareType(Protocol):   ","from pathlib import Path  PurePath from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable                      Protocol)  import pyfakefs import pytest from pyfakefs.fake_file import FakeDirectory from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag from textual_paint.figlet_font_writer import FIGletFontWriter  if TYPE_","@@ -1 12 +1 17 @@  from pathlib import Path  PurePath -from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol +from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable  +                    Protocol)   +import pyfakefs  import pytest +from pyfakefs.fake_file import FakeDirectory +from pyfakefs.fake_filesystem import FakeFilesystem  from textual.geometry import Offset  from textual.pilot import Pilot  from textual.widgets import Input    from tests.pilot_helpers import c","add missing import","change use pyfakefs for file dialog tests - the ap"
"dce55cd83306ecea2d0781578f8cfdea41b8a20f","Fix further errors with pyfakefs","__init__.py","""""""MS Paint for the terminal  built with Textual.""""""  __author__ = ""Isaiah Odhner"" __copyright__ = ""Copyright Isaiah Odhner"" __credits__ = [""Isaiah Odhner""] __maintainer__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.2.0"" __license__ = ""MIT""  # Set version string when in a git repository # to distinguish production from development versions.  from os.path import dirname  exists from subprocess import check_output  DEVELOPMENT = exists(dirname(__file__) + ""/../../.git"") """"""Whether ","""""""MS Paint for the terminal  built with Textual.""""""  __author__ = ""Isaiah Odhner"" __copyright__ = ""Copyright Isaiah Odhner"" __credits__ = [""Isaiah Odhner""] __maintainer__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.2.0"" __license__ = ""MIT""  # Set version string when in a git repository # to distinguish production from development versions.  from os.path import dirname  exists from subprocess import check_output  DEVELOPMENT = exists(dirname(__file__) + ""/../../.git"") """"""Whether ","@@ -22 9 +22 8 @@ import sys  PYTEST = ""pytest"" in sys.modules  """"""Whether running from pytest.""""""   -if DEVELOPMENT: -    __version__ = ""development "" + check_output([""git""  ""describe""  ""--tags""]  cwd=dirname(__file__)).strip().decode() -  if PYTEST:      # Avoid version string in About Paint dialog affecting snapshots.      __version__ = ""snapshot test edition :)"" +elif DEVELOPMENT: +    __version__ = ""development "" + check_output([""git""  ""describe""  ""--tags""]  cwd=dirname(__file__)).strip().decode() ","add version string in snapshot test","fix further errors with pyfakefs add version strin"
"dce55cd83306ecea2d0781578f8cfdea41b8a20f","Fix further errors with pyfakefs","args.py","""""""Command line arguments for the app.""""""  import argparse import os import re import sys  from textual_paint.__init__ import DEVELOPMENT  __version__  PYTEST = ""pytest"" in sys.modules  parser = argparse.ArgumentParser(description='Paint in the terminal.'  usage='%(prog)s [options] [filename]'  prog=""textual-paint"") parser.add_argument('--version'  action='version'  version=f'%(prog)s {__version__}') parser.add_argument('--theme'  default='light'  help='Theme to use  either ""light"" or ""dark""'  choices=['lig","""""""Command line arguments for the app.""""""  import argparse import os import re import sys  from textual_paint.__init__ import DEVELOPMENT  __version__  PYTEST = ""pytest"" in sys.modules  parser = argparse.ArgumentParser(description='Paint in the terminal.'  usage='%(prog)s [options] [filename]'  prog=""textual-paint"") parser.add_argument('--version'  action='version'  version=f'%(prog)s {__version__}') parser.add_argument('--theme'  default='light'  help='Theme to use  either ""light"" or ""dark""'  choices=['lig","@@ -65 7 +65 7 @@ def update_cli_help_on_readme():          f.write(md)          f.truncate()   -if DEVELOPMENT: +if DEVELOPMENT and not PYTEST:      # A pre-commit hook might technically be best for this       # but I doubt it's worth the complexity.      # I'm usually running with --restart-on-changes anyways  ","fix pre-commit hook","fix further errors with pyfakefs fix pre-commit ho"
"dce55cd83306ecea2d0781578f8cfdea41b8a20f","Fix further errors with pyfakefs","enhanced_directory_tree.py","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.ascii_mode impor","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.ascii_mode impor","@@ -104 6 +104 11 @@ class EnhancedDirectoryTree(DirectoryTree):          Once the last part of the path is reached  it scrolls to and selects the node.          """"""          # print(""_expand_matching_child""  node  remaining_parts) +        if not remaining_parts: +            # I noticed this happening when testing with pyfakefs. +            # os.cwd() is faked to return ""/"" by default  leading to this edge case +            # where the EnhancedDirectoryTree is ""expanded"" to the root. +            return ","add a comment","fix further errors with pyfakefs add a comment"
"dce55cd83306ecea2d0781578f8cfdea41b8a20f","Fix further errors with pyfakefs","test_snapshots.py","from pathlib import Path  PurePath from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable                      Protocol)  import pyfakefs import pytest from pyfakefs.fake_file import FakeDirectory from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag from textual_paint.figlet_font_writer import FIGletFontWriter  if TYPE_","from pathlib import Path  PurePath from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable                      Protocol)  import pyfakefs import pytest from pyfakefs.fake_file import FakeDirectory from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag from textual_paint.figlet_font_writer import FIGletFontWriter  if TYPE_","@@ -63 17 +63 21 @@ def each_theme(request: pytest.FixtureRequest):      args.theme = ""light""      args.ascii_only = False   -APPS_DIR_ABSOLUTE = (Path(__file__).parent / APPS_DIR).resolve() -TESTS_DIR_ABSOLUTE = Path(__file__).parent.resolve() +# APPS_DIR_ABSOLUTE = (Path(__file__).parent / APPS_DIR).resolve() +# TESTS_DIR_ABSOLUTE = Path(__file__).parent.resolve() +REPO_DIR_ABSOLUTE = Path(__file__).parent.parent.resolve()    @pytest.fixture  def my_fs(fs: FakeFilesystem) -> Generator[FakeFilesystem  None","fix tests","fix further errors with pyfakefs fix tests"
"d6705912b38603d35ed46e07f2095c0e1ace7ba2","Fix DirectoryTree retaining real pathlib access  This fixes the following error:      ----------------------------------------------- Captured stderr call -----------------------------------------------     ╭───────────────────── Traceback (most recent call last) ──────────────────────╮     │ /home/io/Projects/textual-paint/src/textual_paint/file_dialogs.py:86 in      │     │ on_mount                                                                     │     │                                                                              │     │    83 │   def on_mount(self) -> None:                                        │     │    84 │   │   """"""Called when the window is mounted.""""""                       │     │    85 │   │   self.content.mount(                                            │     │ ❱  86 │   │   │   EnhancedDirectoryTree(path=""/"")                            │     │    87 │   │   │   Horizontal(                                                │     │    88 │   │   │   │   Label(_(""File name:""))                                 │     │    89 │   │   │   │   Input(classes=""filename_input autofocus""  value=self._ │     │                                                                              │     │ ╭──────────────────── locals ────────────────────╮                           │     │ │ self = OpenDialogWindow(id='window_auto_id_0') │                           │     │ ╰────────────────────────────────────────────────╯                           │     │                                                                              │     │ in __init__:119                                                              │     │                                                                              │     │   116 │   │   self._load_queue: Queue[TreeNode[DirEntry]] = Queue()          │     │   117 │   │   super().__init__(                                              │     │   118 │   │   │   str(path)                                                  │     │ ❱ 119 │   │   │   data=DirEntry(self.PATH(path))                             │     │   120 │   │   │   name=name                                                  │     │   121 │   │   │   id=id                                                      │     │   122 │   │   │   classes=classes                                            │     │                                                                              │     │ ╭───────────────── locals ──────────────────╮                                │     │ │  classes = None                           │                                │     │ │ disabled = False                          │                                │     │ │       id = None                           │                                │     │ │     name = None                           │                                │     │ │     path = '/'                            │                                │     │ │     self = EnhancedDirectoryTree(         │                                │     │ │            │   id='some fake shit'        │                                │     │ │            │   name='some more fake shit' │                                │     │ │            )                              │                                │     │ ╰───────────────────────────────────────────╯                                │     │                                                                              │     │ in __new__:960                                                               │     │                                                                              │     │    957 │   def __new__(cls  *args  **kwargs):                                │     │    958 │   │   if cls is Path:                                               │     │    959 │   │   │   cls = WindowsPath if os.name == 'nt' else PosixPath       │     │ ❱  960 │   │   self = cls._from_parts(args)                                  │     │    961 │   │   if not self._flavour.is_supported:                            │     │    962 │   │   │   raise NotImplementedError(""cannot instantiate %r on your  │     │    963 │   │   │   │   │   │   │   │   │     % (cls.__name__ ))              │     │                                                                              │     │ ╭──────────── locals ─────────────╮                                          │     │ │   args = ('/' )                 │                                          │     │ │    cls = <class 'pathlib.Path'> │                                          │     │ │ kwargs = {}                     │                                          │     │ ╰─────────────────────────────────╯                                          │     │                                                                              │     │ in _from_parts:594                                                           │     │                                                                              │     │    591 │   │   # We need to call _parse_args on the instance  so as to get t │     │    592 │   │   # right flavour.                                              │     │    593 │   │   self = object.__new__(cls)                                    │     │ ❱  594 │   │   drv  root  parts = self._parse_args(args)                     │     │    595 │   │   self._drv = drv                                               │     │    596 │   │   self._root = root                                             │     │    597 │   │   self._parts = parts                                           │     │                                                                              │     │ ╭──────────────────────────── locals ─────────────────────────────╮          │     │ │ args = ('/' )                                                   │          │     │ │  cls = <class 'pathlib.Path'>                                   │          │     │ │ self = <repr-error ""'Path' object has no attribute '_flavour'""> │          │     │ ╰─────────────────────────────────────────────────────────────────╯          │     │                                                                              │     │ in _parse_args:587                                                           │     │                                                                              │     │    584 │   │   │   │   │   │   ""argument should be a str object or an os.Pat │     │    585 │   │   │   │   │   │   ""object returning str  not %r""                │     │    586 │   │   │   │   │   │   % type(a))                                    │     │ ❱  587 │   │   return cls._flavour.parse_parts(parts)                        │     │    588 │                                                                     │     │    589 │   @classmethod                                                      │     │    590 │   def _from_parts(cls  args):                                       │     │                                                                              │     │ ╭──────────── locals ────────────╮                                           │     │ │     a = '/'                    │                                           │     │ │  args = ('/' )                 │                                           │     │ │   cls = <class 'pathlib.Path'> │                                           │     │ │ parts = ['/']                  │                                           │     │ ╰────────────────────────────────╯                                           │     ╰──────────────────────────────────────────────────────────────────────────────╯     AttributeError: type object 'Path' has no attribute '_flavour'  ...which was itself masked by an error:      /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/_doc.py:136: in take_svg_screenshot         app.run(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1207: in run         asyncio.run(run_app())     /usr/lib/python3.10/asyncio/runners.py:44: in run         return loop.run_until_complete(main)     /usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete         return future.result()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1196: in run_app         await self.run_async(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1168: in run_async         await app._shutdown()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2186: in _shutdown         await self._close_all()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2166: in _close_all         await self._prune_node(stack_screen)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2656: in _prune_node         await asyncio.gather(*close_messages)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:453: in _close_messages         await self._task     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:469: in _process_messages         await self._pre_process()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:490: in _pre_process         self.app._handle_exception(error)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1822: in _handle_exception         self._fatal_error()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1827: in _fatal_error         traceback = Traceback(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:264: in __init__         trace = self.extract(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:449: in extract         locals={     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:450: in <dictcomp>         key: pretty.traverse(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:852: in traverse         node = _traverse(_object  root=True)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:647: in _traverse         args = list(iter_rich_args(rich_repr_result))     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:614: in iter_rich_args         for arg in rich_args:     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/widget.py:2516: in __rich_repr__         yield ""id""  self.id  None     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _      self = <[AttributeError(""'EnhancedDirectoryTree' object has no attribute '_id'"") raised in repr()] EnhancedDirectoryTree object at     0x7f06b38c89d0>          @property         def id(self) -> str | None:             """"""The ID of this node  or None if the node has no ID.""""""     >       return self._id     E       AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'?      /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/dom.py:483: AttributeError  ...which I worked around by adding class vars to EnhancedDirectoryTree:      _id = ""some fake shit""     _name = ""some more fake shit""  It was also a heisenbug. I was able to run the tests  even update snapshots  running in debug mode in VS Code.","enhanced_directory_tree.py","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.ascii_mode impor","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.ascii_mode impor","@@ -43 6 +43 9 @@ class EnhancedDirectoryTree(DirectoryTree):      method for this one thing.)      """"""   +    _id = ""some fake shit"" +    _name = ""some more fake shit"" +      def filter_paths(self  paths: Iterable[Path]) -> Iterable[Path]:          return [path for path in paths if not (path.name.startswith(""."") or path.name.endswith(""~"") or path.name.startswith(""~""))]   ","add missing class attribute","fix fix directorytree retaining real pathlib acces"
"d6705912b38603d35ed46e07f2095c0e1ace7ba2","Fix DirectoryTree retaining real pathlib access  This fixes the following error:      ----------------------------------------------- Captured stderr call -----------------------------------------------     ╭───────────────────── Traceback (most recent call last) ──────────────────────╮     │ /home/io/Projects/textual-paint/src/textual_paint/file_dialogs.py:86 in      │     │ on_mount                                                                     │     │                                                                              │     │    83 │   def on_mount(self) -> None:                                        │     │    84 │   │   """"""Called when the window is mounted.""""""                       │     │    85 │   │   self.content.mount(                                            │     │ ❱  86 │   │   │   EnhancedDirectoryTree(path=""/"")                            │     │    87 │   │   │   Horizontal(                                                │     │    88 │   │   │   │   Label(_(""File name:""))                                 │     │    89 │   │   │   │   Input(classes=""filename_input autofocus""  value=self._ │     │                                                                              │     │ ╭──────────────────── locals ────────────────────╮                           │     │ │ self = OpenDialogWindow(id='window_auto_id_0') │                           │     │ ╰────────────────────────────────────────────────╯                           │     │                                                                              │     │ in __init__:119                                                              │     │                                                                              │     │   116 │   │   self._load_queue: Queue[TreeNode[DirEntry]] = Queue()          │     │   117 │   │   super().__init__(                                              │     │   118 │   │   │   str(path)                                                  │     │ ❱ 119 │   │   │   data=DirEntry(self.PATH(path))                             │     │   120 │   │   │   name=name                                                  │     │   121 │   │   │   id=id                                                      │     │   122 │   │   │   classes=classes                                            │     │                                                                              │     │ ╭───────────────── locals ──────────────────╮                                │     │ │  classes = None                           │                                │     │ │ disabled = False                          │                                │     │ │       id = None                           │                                │     │ │     name = None                           │                                │     │ │     path = '/'                            │                                │     │ │     self = EnhancedDirectoryTree(         │                                │     │ │            │   id='some fake shit'        │                                │     │ │            │   name='some more fake shit' │                                │     │ │            )                              │                                │     │ ╰───────────────────────────────────────────╯                                │     │                                                                              │     │ in __new__:960                                                               │     │                                                                              │     │    957 │   def __new__(cls  *args  **kwargs):                                │     │    958 │   │   if cls is Path:                                               │     │    959 │   │   │   cls = WindowsPath if os.name == 'nt' else PosixPath       │     │ ❱  960 │   │   self = cls._from_parts(args)                                  │     │    961 │   │   if not self._flavour.is_supported:                            │     │    962 │   │   │   raise NotImplementedError(""cannot instantiate %r on your  │     │    963 │   │   │   │   │   │   │   │   │     % (cls.__name__ ))              │     │                                                                              │     │ ╭──────────── locals ─────────────╮                                          │     │ │   args = ('/' )                 │                                          │     │ │    cls = <class 'pathlib.Path'> │                                          │     │ │ kwargs = {}                     │                                          │     │ ╰─────────────────────────────────╯                                          │     │                                                                              │     │ in _from_parts:594                                                           │     │                                                                              │     │    591 │   │   # We need to call _parse_args on the instance  so as to get t │     │    592 │   │   # right flavour.                                              │     │    593 │   │   self = object.__new__(cls)                                    │     │ ❱  594 │   │   drv  root  parts = self._parse_args(args)                     │     │    595 │   │   self._drv = drv                                               │     │    596 │   │   self._root = root                                             │     │    597 │   │   self._parts = parts                                           │     │                                                                              │     │ ╭──────────────────────────── locals ─────────────────────────────╮          │     │ │ args = ('/' )                                                   │          │     │ │  cls = <class 'pathlib.Path'>                                   │          │     │ │ self = <repr-error ""'Path' object has no attribute '_flavour'""> │          │     │ ╰─────────────────────────────────────────────────────────────────╯          │     │                                                                              │     │ in _parse_args:587                                                           │     │                                                                              │     │    584 │   │   │   │   │   │   ""argument should be a str object or an os.Pat │     │    585 │   │   │   │   │   │   ""object returning str  not %r""                │     │    586 │   │   │   │   │   │   % type(a))                                    │     │ ❱  587 │   │   return cls._flavour.parse_parts(parts)                        │     │    588 │                                                                     │     │    589 │   @classmethod                                                      │     │    590 │   def _from_parts(cls  args):                                       │     │                                                                              │     │ ╭──────────── locals ────────────╮                                           │     │ │     a = '/'                    │                                           │     │ │  args = ('/' )                 │                                           │     │ │   cls = <class 'pathlib.Path'> │                                           │     │ │ parts = ['/']                  │                                           │     │ ╰────────────────────────────────╯                                           │     ╰──────────────────────────────────────────────────────────────────────────────╯     AttributeError: type object 'Path' has no attribute '_flavour'  ...which was itself masked by an error:      /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/_doc.py:136: in take_svg_screenshot         app.run(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1207: in run         asyncio.run(run_app())     /usr/lib/python3.10/asyncio/runners.py:44: in run         return loop.run_until_complete(main)     /usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete         return future.result()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1196: in run_app         await self.run_async(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1168: in run_async         await app._shutdown()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2186: in _shutdown         await self._close_all()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2166: in _close_all         await self._prune_node(stack_screen)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2656: in _prune_node         await asyncio.gather(*close_messages)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:453: in _close_messages         await self._task     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:469: in _process_messages         await self._pre_process()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:490: in _pre_process         self.app._handle_exception(error)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1822: in _handle_exception         self._fatal_error()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1827: in _fatal_error         traceback = Traceback(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:264: in __init__         trace = self.extract(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:449: in extract         locals={     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:450: in <dictcomp>         key: pretty.traverse(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:852: in traverse         node = _traverse(_object  root=True)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:647: in _traverse         args = list(iter_rich_args(rich_repr_result))     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:614: in iter_rich_args         for arg in rich_args:     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/widget.py:2516: in __rich_repr__         yield ""id""  self.id  None     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _      self = <[AttributeError(""'EnhancedDirectoryTree' object has no attribute '_id'"") raised in repr()] EnhancedDirectoryTree object at     0x7f06b38c89d0>          @property         def id(self) -> str | None:             """"""The ID of this node  or None if the node has no ID.""""""     >       return self._id     E       AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'?      /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/dom.py:483: AttributeError  ...which I worked around by adding class vars to EnhancedDirectoryTree:      _id = ""some fake shit""     _name = ""some more fake shit""  It was also a heisenbug. I was able to run the tests  even update snapshots  running in debug mode in VS Code.","test_snapshots.py","from pathlib import Path  PurePath from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable                      Protocol)  import pyfakefs import pytest from pyfakefs.fake_file import FakeDirectory from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag from textual_paint.figlet_font_writer import FIGletFontWriter  if TYPE_","from pathlib import Path  PurePath from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable                      Protocol)  import pytest from pyfakefs.fake_file import FakeDirectory from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag from textual_paint.figlet_font_writer import FIGletFontWriter  if TYPE_CHECKING:     # ","@@ -2 7 +2 6 @@ from pathlib import Path  PurePath  from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable                       Protocol)   -import pyfakefs  import pytest  from pyfakefs.fake_file import FakeDirectory  from pyfakefs.fake_filesystem import FakeFilesystem @@ -79 6 +78 11 @@ def my_fs(fs: FakeFilesystem) -> Generator[FakeFilesystem  None  None]:      print(""adding real directory""  REPO_DIR_ABSOLUTE)      fs.add_real_directory(REPO_DIR_ABSOLUTE)   +    # DirectoryTree stor","add test for","fix fix directorytree retaining real pathlib acces"
"96fe28269d63f9b103e0e30fb8f7cdfa1ef05673","Accept changes to file dialog snapshots  ...but NOT the Free-Form Select test! I'm noticing that when marked as skipped  running with --snapshot-update deletes the snapshot. So neither xfail or skip (or xfail with run=False) is a good solution. It's almost as if people don't normally do TDD with snapshots.  Anyways  HOPEFULLY I can move on now  to actually fixing things  like the Polygon tool  and new bugs I've found while adding tests.","test_snapshots.ambr","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","@@ -9697 208 +9697 208 @@            font-weight: 700;        }     -      .terminal-3513731065-matrix { +      .terminal-4080593340-matrix {            font-family: Fira Code  monospace;            font-size: 20px;            line-height: 24.4px;            font-variant-east-asian: full-width;        }     -      .terminal-3513731065-title { +      .terminal-4080593340-title {            font-size: 18px;            font-weight: bold;            font-family: arial;        }     -      .terminal-3513731065-r","add missing font properties","fix accept changes to file dialog snapshots ... bu"
"c538787ff25c16558e64cdd95e19b8ca33b04c7a","Recurse into subfolders for re-encoding round trip test  There are many more failures now  which I should probably take a look at at some point  but I don't know how to best inspect the changes yet. I'll mark these as xfail (expected to fail) for now.","test_encoding.py","""""""Test that files are encoded correctly.""""""  from pathlib import Path import pytest  from textual_paint.ansi_art_document import AnsiArtDocument  ROUND_TRIP_EXCLUSIONS = [     # These files are generated by a script  not the Textual Paint app  so they naturally change.     ""4x4_font_template.ans""      ""gradient_test.ans""      # This one was free-handed with Inkscape  so naturally changes a lot.     ""pathological_character_grid.svg""      # The `0x0.ans` file saves as 1x1  due to the minimum size.     ""0x0.a","""""""Test that files are encoded correctly.""""""  from pathlib import Path import pytest  from textual_paint.ansi_art_document import AnsiArtDocument  ROUND_TRIP_EXCLUSIONS = [     # These files are generated by a script  not the Textual Paint app  so they naturally change.     ""4x4_font_template.ans""      ""gradient_test.ans""      # This one was free-handed with Inkscape  so naturally changes a lot.     ""pathological_character_grid.svg""      # The `0x0.ans` file saves as 1x1  due to the minimum size.     ""0x0.a","@@ -15 14 +15 63 @@ ROUND_TRIP_EXCLUSIONS = [      ""0x0.ans""       # This is a color palette file  meant to be loaded with Get Colors  not Open.      ""pipe_strip_palette.gpl""  -    # THIS ONE MAYBE SHOULD IDEALLY WORK? But I need a better way of viewing a diff... +] +ROUND_TRIP_XFAIL = [ +    # THESE ONES MAYBE SHOULD IDEALLY WORK? But I need a better way of viewing the diff...      ""cp437_as_utf8.txt""  +    ""kitty_logo_v1.ans""  +    ""kitty_logo_v2.ans""  +    ""kitty_logo_v2.1_claws.ans""  +    ""kitty_logo_v2","add xfail color palette","add recurse into subfolders for re-encoding round"
"9280dcdb92aba5e64225510746d2385184ceea32","Fix ASCII-only mode test failures","icons.py","""""""Icons for message boxes  as `Static` widget factories  and for the `Header`  as `Text`. Also  title bar icons as markup.  Reusing widget instances doesn't work  for obvious reasons in the case of multiple dialogs open at once  and reasons mysterious to me in the case of closing and re-opening a single dialog.  Some of these icons are designed inside Textual Paint itself  and saved as `*._rich_console_markup` as a way to export the markup for embedding in the source code. The warning and header icons I di","""""""Icons for message boxes  as `Static` widget factories  and for the `Header`  as `Text`. Also  title bar icons as markup ""factories"".  Reusing widget instances doesn't work  for obvious reasons in the case of multiple dialogs open at once  and reasons mysterious to me in the case of closing and re-opening a single dialog.  The use of functions is also important because args.ascii_only can change while running pytest. The PaintApp is constructed many times  but all in a single process.  Some of these icons","@@ -1 8 +1 11 @@ -""""""Icons for message boxes  as `Static` widget factories  and for the `Header`  as `Text`. Also  title bar icons as markup. +""""""Icons for message boxes  as `Static` widget factories  and for the `Header`  as `Text`. Also  title bar icons as markup ""factories"".    Reusing widget instances doesn't work  for obvious reasons in the case of multiple dialogs open at once   and reasons mysterious to me in the case of closing and re-opening a single dialog.   +The use of functions is also importan","add missing word to description","add fix ascii-only mode test failures missing word"
"9280dcdb92aba5e64225510746d2385184ceea32","Fix ASCII-only mode test failures","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Coroutine  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from tex","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Coroutine  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from tex","@@ -53 7 +53 7 @@ from textual_paint.graphics_primitives import (bezier_curve_walk                                                  polyline_walk                                                  quadratic_curve_walk)  from textual_paint.icons import (get_paint_icon  get_question_icon  -                                 get_warning_icon  header_icon_text  help_icon_markup  windows_icon_markup) +                                 get_warning_icon  header_icon_text  get_help_icon_markup  get_windows_icon_markup) ","add missing import","add fix ascii-only mode test failures missing impo"
"070e253394899b5b8e79bf2b1c393aceaa8b7a2c","Move fixtures to conftest.py","conftest.py","","""""""This file is loaded by pytest automatically. Fixtures defined here are available to all tests in the folder.  https://docs.pytest.org/en/7.1.x/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files """"""  from pathlib import Path from typing import Generator  import pytest from pyfakefs.fake_filesystem import FakeFilesystem  from textual_paint.figlet_font_writer import FIGletFontWriter   @pytest.fixture(params=[     {""theme"": ""light""  ""ascii_only"": False}      {""theme"": ""dark""  ""ascii_o","@@ -0 0 +1 71 @@ +""""""This file is loaded by pytest automatically. Fixtures defined here are available to all tests in the folder. + +https://docs.pytest.org/en/7.1.x/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files +"""""" + +from pathlib import Path +from typing import Generator + +import pytest +from pyfakefs.fake_filesystem import FakeFilesystem + +from textual_paint.figlet_font_writer import FIGletFontWriter + + +@pytest.fixture(params=[ +    {""theme"": ""light""  ""ascii_only"": False","add missing file to conftest","add move fixtures to conftest.py missing file to c"
"070e253394899b5b8e79bf2b1c393aceaa8b7a2c","Move fixtures to conftest.py","test_snapshots.py","""""""Visual regression tests  using pytest-textual-snapshot. Run with `pytest`.""""""  from pathlib import Path  PurePath from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable                      Protocol)  import pytest from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag from textual_paint.figlet_font_writer import FIGle","""""""Visual regression tests  using pytest-textual-snapshot. Run with `pytest`.""""""  from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  import pytest from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_CHECKING:     # When tests are run  paint.py is re-evaluated      # leading to a different class of the same name at runtime. ","@@ -1 17 +1 14 @@  """"""Visual regression tests  using pytest-textual-snapshot. Run with `pytest`.""""""    from pathlib import Path  PurePath -from typing import (TYPE_CHECKING  Awaitable  Callable  Generator  Iterable  -                    Protocol) +from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol    import pytest -from pyfakefs.fake_filesystem import FakeFilesystem  from textual.geometry import Offset  from textual.pilot import Pilot  from textual.widgets import Input    from tests.p","add missing import","add move fixtures to conftest.py missing import"
"b6d0d2cc7bf709423037cd6321dc72c109f98901","Delete debug scratchpad for polygon test","draw_polygon.py","from textual.geometry import Offset from textual.pilot import Pilot from textual.widget import Widget from textual_paint.paint import PaintApp   async def draw_polygon(pilot: Pilot[None]):     tool_buttons = pilot.app.query(""ToolsBox Button"")     color_buttons = pilot.app.query(""ColorsBox Button"")     for button in tool_buttons:         if button.tooltip == ""Polygon"":             polygon_tool_button = button             break     else:         raise Exception(""Couldn't find Polygon tool button"")      async ","","@@ -1 42 +0 0 @@ -from textual.geometry import Offset -from textual.pilot import Pilot -from textual.widget import Widget -from textual_paint.paint import PaintApp - - -async def draw_polygon(pilot: Pilot[None]): -    tool_buttons = pilot.app.query(""ToolsBox Button"") -    color_buttons = pilot.app.query(""ColorsBox Button"") -    for button in tool_buttons: -        if button.tooltip == ""Polygon"": -            polygon_tool_button = button -            break -    else: -        raise Exception(""Couldn't find P","add polygon example","update delete debug scratchpad for polygon test ad"
"8cd164bb37d5441a916c8a68281fab3d6f874266","Fix preventing icon swaps during pytest  for Windows Terminal and Kitty  If git blame tools were smarter/easier to use  or if I was using a node-based programming paradigm  I would've never made this mistake. I would have done the natural and correct thing in the first place  but instead  I tried to avoid indenting a large block of code  which generates a noisy commit  and a barrier when using git blame.","tool.py","""""""Enumeration of the tools available in the Paint app.""""""  import os from enum import Enum  from textual_paint.__init__ import PYTEST from textual_paint.args import args from textual_paint.localization.i18n import get as _   class Tool(Enum):     """"""The tools available in the Paint app.""""""     free_form_select = 1     select = 2     eraser = 3     fill = 4     pick_color = 5     magnifier = 6     pencil = 7     brush = 8     airbrush = 9     text = 10     line = 11     curve = 12     rectangle = 13     pol","""""""Enumeration of the tools available in the Paint app.""""""  import os from enum import Enum  from textual_paint.__init__ import PYTEST from textual_paint.args import args from textual_paint.localization.i18n import get as _   class Tool(Enum):     """"""The tools available in the Paint app.""""""     free_form_select = 1     select = 2     eraser = 3     fill = 4     pick_color = 5     magnifier = 6     pencil = 7     brush = 8     airbrush = 9     text = 10     line = 11     curve = 12     rectangle = 13     pol","@@ -67 72 +67 73 @@ class Tool(Enum):                  Tool.rounded_rectangle: ""{_}""  # ""(_)"" ""{_}"" (""(\x1B[53m_\x1B[55m)"" doesn't work right  is there no overline tag?)              }              return enum_to_icon[self] -        # Some glyphs cause misalignment of everything to the right of them  including the canvas  -        # so alternative characters need to be chosen carefully for each platform. -        # ""🫗"" causes jutting out in Ubuntu terminal  ""🪣"" causes the opposite in VS Code terminal -     ","add documentation for tool","add fix preventing icon swaps during pytest   for"
"b6e2c245a23690a0579e288b8994fdf55af26946","Get file dialog snapshot tests passing on Windows  Now it's just a few round trip tests failing  and maybe a flaky snapshot test for the character selector dialog.","enhanced_directory_tree.py","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.ascii_mode impor","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.__init__ import ","@@ -11 6 +11 7 @@ from textual.widgets._directory_tree import DirEntry  from textual.widgets._tree import TOGGLE_STYLE  TreeNode    # from textual_paint.args import args +from textual_paint.__init__ import PYTEST  from textual_paint.ascii_mode import replace    # Vague skeuomorphism @@ -188 6 +189 12 @@ class EnhancedDirectoryTree(DirectoryTree):              A Rich Text object containing the label.          """"""          node_label = node._label.copy()  # type: ignore + +        if PYTEST and node_label.pla","add example for enhanceddirectorytree","add get file dialog snapshot tests passing on wind"
"fc1baa981595f7f0d46bce38e10e9911af47b3a2","Move imports so that Organize Imports doesn't break it  Before  if I ran Organize Imports in VS Code  it reordered things such that `sys.path.insert` was after the import that needed it. Now it's stable.","conftest.py","""""""This file is loaded by pytest automatically. Fixtures defined here are available to all tests in the folder.  https://docs.pytest.org/en/7.1.x/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files """"""  from pathlib import Path from typing import Generator  import pytest from pyfakefs.fake_filesystem import FakeFilesystem  # This is needed on Windows but not Ubuntu/macOS? # I hate python's import system with a burning passion. import sys  os; sys.path.insert(0  os.path.realpath(os.pat","""""""This file is loaded by pytest automatically. Fixtures defined here are available to all tests in the folder.  https://docs.pytest.org/en/7.1.x/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files """"""  import os import sys from pathlib import Path from typing import Generator  import pytest from pyfakefs.fake_filesystem import FakeFilesystem  # This is needed on Windows but not Ubuntu/macOS? # I hate python's import system with a burning passion. sys.path.insert(0  os.path.realpath(o","@@ -3 6 +3 8 @@  https://docs.pytest.org/en/7.1.x/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files  """"""   +import os +import sys  from pathlib import Path  from typing import Generator   @@ -11 7 +13 8 @@ from pyfakefs.fake_filesystem import FakeFilesystem    # This is needed on Windows but not Ubuntu/macOS?  # I hate python's import system with a burning passion. -import sys  os; sys.path.insert(0  os.path.realpath(os.path.join(os.path.dirname(__file__)  '../src/'))) +sys.path.ins","add test for path.join()","add move imports so that organize imports does n't"
"0c44759b28285aa82901c63363e67624ad6c2be7","Refactor to avoid using negative coords to mean ""no mouse position""  My TODO comment said ""add an attribute to ToolPreviewUpdate or make it's x/y Optional""  which is both bad grammar (""it's"" vs ""its"") and a bad idea  since the Canvas isn't involved in this update  so its event definition shouldn't have to be complicated by it.  I like this much better  just splitting the event handler into two functions  giving room to express the optional nature of the coordinate in the signature  and avoiding constructing two message objects at both of the callsites.","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Coroutine  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from tex","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Coroutine  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from tex","@@ -288 6 +288 7 @@ class PaintApp(App[None]):          self.query_one(""#selected_color_char_input""  CharInput).styles.background = selected_bg_color          # CharInput now handles the background style itself PARTIALLY; it doesn't affect the whole area.   +        # update Text tool textbox immediately          if self.image.selection and self.image.selection.textbox_mode:              assert self.image.selection.contained_image is not None  ""textbox_mode without contained_image""              for y in ran","update text_tool_textbox.py","add refactor to avoid using negative coords to mea"
"7a13659d48c98669b9aae3c9126447b649e71465","Fix ""Show Details"" not changing to ""Hide Details"" when expanding error","CHANGELOG.md","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Removed  - `--recode-samples` option is removed  now covered by the `pytest` test suite.  ### Changed  - Made radio buttons rounder in `--ascii-only` mode  using parentheses instead of square brackets. - Split up code files (especially th","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Removed  - `--recode-samples` option is removed  now covered by the `pytest` test suite.  ### Changed  - Made radio buttons rounder in `--ascii-only` mode  using parentheses instead of square brackets. - Split up code files (especially th","@@ -28 6 +28 7 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0  - Fixed behavior of Free-Form Select tool when melding with the canvas  when the selection was off-screen to the left or top (i.e. with negative coordinates).  - Fixed Polygon tool closing the polygon when clicking quickly but moving between clicks  detected as a double-click.  - In-progress curves/polygons are now re-colored immediately when a color is selected  instead of only when mousing over the canvas. ","add missing description","change fix `` show details '' not to `` hide detai"
"7a13659d48c98669b9aae3c9126447b649e71465","Fix ""Show Details"" not changing to ""Hide Details"" when expanding error","windows.py","""""""Windowing system  with Window  DialogWindow  and MessageBox classes (in increasing specificity).""""""  from typing import Any  Callable  ClassVar  from textual import events  on from textual.app import ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.dom import DOMNode  NoScreen from textual.geometry import Offset from textual.message import Message from textual.reactive import var from textual.widget import Widget from textua","""""""Windowing system  with Window  DialogWindow  and MessageBox classes (in increasing specificity).""""""  from typing import Any  Callable  ClassVar  from textual import events  on from textual.app import ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.dom import DOMNode  NoScreen from textual.geometry import Offset from textual.message import Message from textual.reactive import var from textual.widget import Widget from textua","@@ -493 7 +493 7 @@ class MessageBox(DialogWindow):          """"""Toggle the visibility of the error details.""""""          self.details_widget.display = not self.details_widget.display          button_text = _(""Hide Details"") if self.details_widget.display else _(""Show Details"") -        self.details_button.update(button_text) +        self.details_button.label = button_text        def on_mount(self):          """"""Called when the window is mounted."""""" ","update messagebox.py","change fix `` show details '' not to `` hide detai"
"7a13659d48c98669b9aae3c9126447b649e71465","Fix ""Show Details"" not changing to ""Hide Details"" when expanding error","test_snapshots.ambr","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","@@ -4945 154 +4945 154 @@            font-weight: 700;        }     -      .terminal-2159808081-matrix { +      .terminal-1235291690-matrix {            font-family: Fira Code  monospace;            font-size: 20px;            line-height: 24.4px;            font-variant-east-asian: full-width;        }     -      .terminal-2159808081-title { +      .terminal-1235291690-title {            font-size: 18px;            font-weight: bold;            font-family: arial;        }     -      .terminal-2159808081-r","add missing font properties","change fix `` show details '' not to `` hide detai"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -349 10 +349 8 @@ cspell-cli lint .  # Type checking  # I use the ""Python"" and ""Pylance"" VS Code extensions  and the Pyright CLI:  pyright -# It should give 0 errors at this version of Pyright: -PYRIGHT_PYTHON_FORCE_VERSION=1.1.317 pyright -# It gives 508 errors with the next version (the current latest) for some reason: -PYRIGHT_PYTHON_FORCE_VERSION=1.1.318 pyright +# I'm targeting zero errors at this version of Pyright: +PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright  # I also tried mypy and fixed some e","add comment about missing version","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","ansi_art_document.py","""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" import base64 import io import math import os import re from random import randint from typing import Any  NamedTuple  Optional  import stransi from PIL import Image from rich.console import Console from rich.segment import Segment from rich.style import Style from rich.text import Text from stransi.instruction import Instruction from textual.color import Color  ColorParseError from textual.geometry import Offset  Region  from textua","""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" import base64 import io import math import os import re from random import randint from typing import Any  NamedTuple  Optional  import stransi from PIL import Image from rich.console import Console from rich.segment import Segment from rich.style import Style from rich.text import Text from stransi.instruction import Instruction from textual.color import Color  ColorParseError from textual.geometry import Offset  Region  from textua","@@ -1114 6 +1114 7 @@ class Selection:          offset = target_region.offset - self.region.offset          if self.mask:              def sample(x: int  y: int) -> bool: +                assert self.mask is not None                  try:                      return self.mask[y + offset.y][x + offset.x]                  except IndexError: ","add missing test","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","ascii_mode.py","""""""Provides ASCII alternatives for older terminals.""""""  from textual._border import BORDER_CHARS  BORDER_LOCATIONS  get_box from textual.scrollbar import ScrollBar from textual.widgets import RadioButton  from textual_paint.scrollbars import ASCIIScrollBarRender from textual_paint.windows import WindowTitleBar  replacements: list[tuple[object  str  object  object]] = []  def replace(obj: object  attr: str  ascii_only_value: object) -> None:     """"""Replace an attribute with a value for --ascii-only mode."""""" ","""""""Provides ASCII alternatives for older terminals.""""""  from textual._border import BORDER_CHARS  BORDER_LOCATIONS  get_box from textual.scrollbar import ScrollBar from textual.widgets import RadioButton  from textual_paint.scrollbars import ASCIIScrollBarRender from textual_paint.windows import WindowTitleBar  replacements: list[tuple[object  str  object  object]] = []  def replace(obj: object  attr: str  ascii_only_value: object) -> None:     """"""Replace an attribute with a value for --ascii-only mode."""""" ","@@ -12 7 +12 7 @@ replacements: list[tuple[object  str  object  object]] = []  def replace(obj: object  attr: str  ascii_only_value: object) -> None:      """"""Replace an attribute with a value for --ascii-only mode.""""""      if isinstance(obj  dict): -        replacements.append((obj  attr  ascii_only_value  obj[attr])) +        replacements.append((obj  attr  ascii_only_value  obj[attr]))  # type: ignore      else:          replacements.append((obj  attr  ascii_only_value  getattr(obj  attr)))   ","add type check for replace","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","enhanced_directory_tree.py","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.__init__ import ","""""""Enhances Textual's DirectoryTree with auto-expansion  filtering of hidden files  and ASCII icon replacements.""""""  from pathlib import Path from typing import Callable  Iterable  from rich.style import Style from rich.text import Text  TextType from textual.reactive import var from textual.widgets import DirectoryTree  Tree from textual.widgets._directory_tree import DirEntry from textual.widgets._tree import TOGGLE_STYLE  TreeNode  # from textual_paint.args import args from textual_paint.__init__ import ","@@ -102 7 +102 7 @@ class EnhancedDirectoryTree(DirectoryTree):          # self.call_later(clear_flag) # too early!          self.call_after_refresh(clear_flag) # finally reliable   -    def _expand_matching_child(self  node: TreeNode[DirEntry]  remaining_parts: tuple[str]  callback: Callable[[]  None]) -> None: +    def _expand_matching_child(self  node: TreeNode[DirEntry]  remaining_parts: tuple[str  ...]  callback: Callable[[]  None]) -> None:          """"""Hooks into DirectoryTree's add method  and expand","add missing docstring","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","inspector.py","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","""""""DOM inspector development tool for Textual.""""""  __all__ = [""Inspector""]  __author__ = ""Isaiah Odhner"" __email__ = ""isaiahodhner@gmail.com"" __version__ = ""0.0.0"" __license__ = ""MIT"" """""" Copyright (c) 2023 Isaiah Odhner  Permission is hereby granted  free of charge  to any person obtaining a copy of this software and associated documentation files (the ""Software"")  to deal in the Software without restriction  including without limitation the rights to use  copy  modify  merge  publish  distribute  sublicen","@@ -1468 7 +1468 9 @@ class Inspector(Container):          # TODO: Highlight the metrics of the hovered widget: padding  border  margin.            if ""inspector_highlight"" not in self.app.styles.layers: -            self.app.styles.layers += (""inspector_highlight"" ) +            # tuple[str] vs tuple[str  ...] in NameListProperty.__set__ vs NameListProperty.__get__ +            self.app.styles.layers += (""inspector_highlight"" )  # type: ignore +            if dom_node not in self._highlight_boxes:         ","add inspector_highlight to inspector.py","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","i18n.py","import json import os import re  translations: dict[str  str] = {} base_language = ""en"" current_language = base_language localization_folder = os.path.dirname(__file__) untranslated_file = os.path.join(localization_folder  ""untranslated.txt"")  TRACK_UNTRANSLATED = False """"""Whether to update the untranslated.txt file with any untranslated strings.  This should be disabled in production. A better way to do this would be static source code analysis  using xgettext  pybabel  or xpot. https://docs.python.org/3/l","import json import os import re  translations: dict[str  str] = {} base_language = ""en"" current_language = base_language localization_folder = os.path.dirname(__file__) untranslated_file = os.path.join(localization_folder  ""untranslated.txt"")  TRACK_UNTRANSLATED = False """"""Whether to update the untranslated.txt file with any untranslated strings.  This should be disabled in production. A better way to do this would be static source code analysis  using xgettext  pybabel  or xpot. https://docs.python.org/3/l","@@ -46 8 +46 8 @@ def load_language(language_code: str):  	except Exception as e:  		print(f""Could not load language '{language_code}': {e}"")   +untranslated: set[str] = set()  if TRACK_UNTRANSLATED: -	untranslated: set[str] = set()  	try:  		with open(untranslated_file  ""r""  encoding=""utf-8"") as f:  			untranslated = set(f.read().splitlines()) ","add untranslated language to load_language","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Coroutine  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from tex","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from textual.color ","@@ -9 7 +9 7 @@ import re  import shlex  import sys  from random import random -from typing import Any  Callable  Coroutine  Iterator  Optional +from typing import Any  Callable  Iterator  Optional  from uuid import uuid4    from PIL import Image  UnidentifiedImageError @@ -983 7 +983 7 @@ class PaintApp(App[None]):              # An error message will be shown when attempting to encode.              callback(False)   -    async def confirm_information_loss_async(self  format_id: str | None) -> Coroutine[No","add missing doc for paintapp","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","conftest.py","""""""This file is loaded by pytest automatically. Fixtures defined here are available to all tests in the folder.  https://docs.pytest.org/en/7.1.x/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files """"""  import os import sys from pathlib import Path from typing import Generator  import pytest from pyfakefs.fake_filesystem import FakeFilesystem  # This is needed on Windows but not Ubuntu/macOS? # I hate python's import system with a burning passion. sys.path.insert(0  os.path.realpath(o","""""""This file is loaded by pytest automatically. Fixtures defined here are available to all tests in the folder.  https://docs.pytest.org/en/7.1.x/reference/fixtures.html#conftest-py-sharing-fixtures-across-multiple-files """"""  import os import sys from pathlib import Path from typing import Generator  import pytest from pyfakefs.fake_filesystem import FakeFilesystem  # This is needed on Windows but not Ubuntu/macOS? # I hate python's import system with a burning passion. sys.path.insert(0  os.path.realpath(o","@@ -60 14 +60 14 @@ def my_fs(fs: FakeFilesystem) -> Generator[FakeFilesystem  None  None]:        # Don't fail trying to load the default font ""standard""  we don't need it!      # `pkg_resources` doesn't seem to work with pyfakefs (or I don't know what directories I need to add) -    from pyfiglet import FigletFont +    from pyfiglet import FigletFont  # type: ignore      def preloadFont(self: FigletFont  font: str):          dumb_font = FIGletFontWriter(commentLines=[""Stupid font for testing""])          f","fix typo in `preloadfont`","fix satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","pilot_helpers.py","""""""Helper functions for Textual's app automation class  Pilot.  Ideally this functionality would be part of Pilot. """"""  from typing import Any  from textual.errors import NoWidget from textual.events import MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot  _get_mouse_message_arguments from textual.widget import Widget   async def click_widget(pilot: Pilot[Any]  widget: Widget  shift: bool = False  meta: bool = False  control: bool = False) -> None:     """"""Cli","""""""Helper functions for Textual's app automation class  Pilot.  Ideally this functionality would be part of Pilot. """"""  from typing import Any  from textual.errors import NoWidget from textual.events import MouseDown  MouseMove  MouseUp from textual.geometry import Offset from textual.pilot import Pilot from textual.widget import Widget   def _get_mouse_message_arguments(     target: Widget      offset: Offset = Offset()      button: int = 0      shift: bool = False      meta: bool = False      control: boo","@@ -8 10 +8 35 @@ from typing import Any  from textual.errors import NoWidget  from textual.events import MouseDown  MouseMove  MouseUp  from textual.geometry import Offset -from textual.pilot import Pilot  _get_mouse_message_arguments +from textual.pilot import Pilot  from textual.widget import Widget     +def _get_mouse_message_arguments( +    target: Widget  +    offset: Offset = Offset()  +    button: int = 0  +    shift: bool = False  +    meta: bool = False  +    control: bool = False  +) -> dict[str ","add missing type annotations","add satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","pilot_recorder.py","""""""Record interactions and save as an automated test.  TODO: - Handle right clicks  middle clicks  and modifier keys. - Handle mouse wheel events. - Handle paste events. - Ignore clicks on the #pilot-recorder-steps widget. - Add a way to toggle the steps view. - Try adding a delay before reloading so you can undo multiple steps at once. - Auto-save to a WIP test file. - Ideally the supporting functions like drag() should be part of Pilot. - Ideally SnapCompareType should be part of pytest-textual-snapshot. ","""""""Record interactions and save as an automated test.  TODO: - Handle right clicks  middle clicks  and modifier keys. - Handle mouse wheel events. - Handle paste events. - Ignore clicks on the #pilot-recorder-steps widget. - Add a way to toggle the steps view. - Try adding a delay before reloading so you can undo multiple steps at once. - Auto-save to a WIP test file. - Ideally the supporting functions like drag() should be part of Pilot. - Ideally SnapCompareType should be part of pytest-textual-snapshot. ","@@ -118 7 +118 7 @@ class PilotRecorder():              # - Every event seems to be received twice  once with _forwarded set and once without.              #   I don't claim to understand the forwarding scheme  but ignoring either              #   the forwarded or the un-forwarded events seems workable. -            if not event._forwarded: +            if not event._forwarded:  # pyright: ignore[reportPrivateUsage]                  recorder.handle_event(event)              await original_on_event(self  eve","fix pilot recorder","fix satisfy the type checker ` pyright_python_forc"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","test_snapshots.py","""""""Visual regression tests  using pytest-textual-snapshot.  Run with `pytest tests/test_snapshots.py`  or `pytest` to run all tests. """"""  from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  import pytest from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_CHECKING:     # Wh","""""""Visual regression tests  using pytest-textual-snapshot.  Run with `pytest tests/test_snapshots.py`  or `pytest` to run all tests. """"""  from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_CHECKING:     # When tests are r","@@ -6 7 +6 6 @@ Run with `pytest tests/test_snapshots.py`  or `pytest` to run all tests.  from pathlib import Path  PurePath  from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol   -import pytest  from pyfakefs.fake_filesystem import FakeFilesystem  from textual.geometry import Offset  from textual.pilot import Pilot ","add missing import","add satisfy the type checker ` pyright_python_forc"
"3944a6e40412744c6c5b7ed3e6650899f0980f65","Update textual to 0.31.0  DataTable now has `max-height: 100%` by default  which breaks my layout.","requirements.txt","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","@@ -8 7 +8 7 @@ pyperclip==1.8.2  pyxdg==0.28 # xdg module  used for wallpaper setting; optional  falls back to ~/.config  rich==13.3.5  stransi==0.3.0 -textual==0.30.0 +textual==0.31.0  textual-dev==1.0.0 # for development (`textual` CLI)  watchdog==3.0.0 # for development; optional (only used when --restart-on-changes is passed)  types-Pillow==10.0.0.1 # for development ","add missing documentation","add update textual to 0.31.0 datatable now has ` m"
"3944a6e40412744c6c5b7ed3e6650899f0980f65","Update textual to 0.31.0  DataTable now has `max-height: 100%` by default  which breaks my layout.","paint.css","Screen {     layers: window menu-popup;     overflow: hidden; }  /* :not() support would make this easier */ Header HeaderIcon {     /* Show brush handles (middle row of 3-high icon) when header is collapsed */     /* offset: 0 -1; causes it to be invisible (bug?) */     margin-top: -1;     /* cut off the ""~"" shadow of the page curl  since the page curl won't be visible */     width: 5; } Header.-tall HeaderIcon {     /* offset: 0 0; */     margin-top: 0;     width: auto; }  #paint {     layout: vertical; }","Screen {     layers: window menu-popup;     overflow: hidden; }  /* :not() support would make this easier */ Header HeaderIcon {     /* Show brush handles (middle row of 3-high icon) when header is collapsed */     /* offset: 0 -1; causes it to be invisible (bug?) */     margin-top: -1;     /* cut off the ""~"" shadow of the page curl  since the page curl won't be visible */     width: 5; } Header.-tall HeaderIcon {     /* offset: 0 0; */     margin-top: 0;     width: auto; }  #paint {     layout: vertical; }","@@ -262 6 +262 9 @@ FileDialogWindow .window_content Button {    CharacterSelectorDialogWindow DataTable {      width: auto; +    /* textual 0.31.0 adds `max-height: 100%` to DataTable */ +    /* `unset` is not supported */ +    max-height: 10000;  }  CharacterSelectorDialogWindow .ok   CharacterSelectorDialogWindow .cancel { ","add missing max-height for button","add update textual to 0.31.0 datatable now has ` m"
"3944a6e40412744c6c5b7ed3e6650899f0980f65","Update textual to 0.31.0  DataTable now has `max-height: 100%` by default  which breaks my layout.","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from textual.color ","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from textual.color ","@@ -1447 7 +1447 7 @@ Columns: {len(self.palette) // 2}          """"""Center the image as the wallpaper.""""""          self.set_as_wallpaper(tiled=False)      # worker thread helps keep the UI responsive -    @work(exclusive=True) +    @work(exclusive=True  thread=True)      def set_as_wallpaper(self  tiled: bool) -> None:          """"""Set the image as the wallpaper.""""""          try: ","fix crash in image_as_wallpaper","fix update textual to 0.31.0 datatable now has ` m"
"35a6845ab5c87432eb49a578ef08e7eaa1129a66","Update textual to 0.33.0  I had to fix the layout of a few dialogs where elements decided they wanted to start expanding a lot more than before. I'm guessing this has to do with the changelog entry:     ""Fixed relative units not always expanding auto containers""     https://github.com/Textualize/textual/pull/3059  The snapshot changes are basically bogus. The before and after are visually identical  with the difference view showing all black.  Since there were a lot of switches to toggle and I had to wait for the snapshot tests to run (slow!)  I wrote a little automation to toggle ""Show difference"" for all the results:      document.querySelectorAll(""#flexSwitchCheckDefault"").forEach((element)=> element.click())  It would be good to have this ability in the snapshot report UI itself  maybe even replacing the individual toggles  although I'm not sure about that  especially since it might be laggy toggling the blend modes with a lot of test results. (I suppose if that was really an issue  it could toggle all the visible test results and then toggle others as they come into view  though that's a bit more complex.)  As for understanding the structural changes to the snapshots  I tried making a visualization using hue  coloring according to the position of a rect within the list of rects:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const fraction = index / (rectElements.length - 1);             const cycles = 40;             const hue = fraction * cycles * 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });  This shows some difference  but it isn't very elucidating  since the structural changes only show as gradual shifts in the hue  and affect other rects even if said rects are identical  so it's subtle and messy.  Coloring based on a hash proves to actually highlight differences:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const hash = hash(rect.outerHTML);             const hue = (hash % 360 + 360) % 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });          function hash(s) {         let hash = 0;         for (let i = 0; i < s.length; i++) {             const char = s.charCodeAt(i);             hash = (hash << 5) - hash + char;         }         return hash;     }  As for analyzing the differences now visible  eh  ""maybe later.""","requirements.txt","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","@@ -8 7 +8 7 @@ pyperclip==1.8.2  pyxdg==0.28 # xdg module  used for wallpaper setting; optional  falls back to ~/.config  rich==13.3.5  stransi==0.3.0 -textual==0.32.0 +textual==0.33.0  textual-dev==1.1.0 # for development (`textual` CLI)  watchdog==3.0.0 # for development; optional (only used when --restart-on-changes is passed)  types-Pillow==10.0.0.1 # for development ","add missing documentation","fix update textual to 0.33.0 i had to the layout o"
"35a6845ab5c87432eb49a578ef08e7eaa1129a66","Update textual to 0.33.0  I had to fix the layout of a few dialogs where elements decided they wanted to start expanding a lot more than before. I'm guessing this has to do with the changelog entry:     ""Fixed relative units not always expanding auto containers""     https://github.com/Textualize/textual/pull/3059  The snapshot changes are basically bogus. The before and after are visually identical  with the difference view showing all black.  Since there were a lot of switches to toggle and I had to wait for the snapshot tests to run (slow!)  I wrote a little automation to toggle ""Show difference"" for all the results:      document.querySelectorAll(""#flexSwitchCheckDefault"").forEach((element)=> element.click())  It would be good to have this ability in the snapshot report UI itself  maybe even replacing the individual toggles  although I'm not sure about that  especially since it might be laggy toggling the blend modes with a lot of test results. (I suppose if that was really an issue  it could toggle all the visible test results and then toggle others as they come into view  though that's a bit more complex.)  As for understanding the structural changes to the snapshots  I tried making a visualization using hue  coloring according to the position of a rect within the list of rects:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const fraction = index / (rectElements.length - 1);             const cycles = 40;             const hue = fraction * cycles * 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });  This shows some difference  but it isn't very elucidating  since the structural changes only show as gradual shifts in the hue  and affect other rects even if said rects are identical  so it's subtle and messy.  Coloring based on a hash proves to actually highlight differences:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const hash = hash(rect.outerHTML);             const hue = (hash % 360 + 360) % 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });          function hash(s) {         let hash = 0;         for (let i = 0; i < s.length; i++) {             const char = s.charCodeAt(i);             hash = (hash << 5) - hash + char;         }         return hash;     }  As for analyzing the differences now visible  eh  ""maybe later.""","paint.css","Screen {     layers: window menu-popup;     overflow: hidden; }  /* :not() support would make this easier */ Header HeaderIcon {     /* Show brush handles (middle row of 3-high icon) when header is collapsed */     /* offset: 0 -1; causes it to be invisible (bug?) */     margin-top: -1;     /* cut off the ""~"" shadow of the page curl  since the page curl won't be visible */     width: 5; } Header.-tall HeaderIcon {     /* offset: 0 0; */     margin-top: 0;     width: auto; }  #paint {     layout: vertical; }","Screen {     layers: window menu-popup;     overflow: hidden; }  /* :not() support would make this easier */ Header HeaderIcon {     /* Show brush handles (middle row of 3-high icon) when header is collapsed */     /* offset: 0 -1; causes it to be invisible (bug?) */     margin-top: -1;     /* cut off the ""~"" shadow of the page curl  since the page curl won't be visible */     width: 5; } Header.-tall HeaderIcon {     /* offset: 0 0; */     margin-top: 0;     width: auto; }  #paint {     layout: vertical; }","@@ -332 6 +332 7 @@ RadioSet {    DialogWindow .buttons {      layout: horizontal; +    width: auto;      height: auto;  }  DialogWindow .buttons Button { @@ -477 8 +478 7 @@ EditColorsDialogWindow LuminosityRamp {      margin: 1;  }  EditColorsDialogWindow ColorField { -    /* width: 30; */ -    width: 1fr; +    width: 40;      height: 10;      margin: 1;  } ","add missing options for editcolorsdialogwindow","fix update textual to 0.33.0 i had to the layout o"
"35a6845ab5c87432eb49a578ef08e7eaa1129a66","Update textual to 0.33.0  I had to fix the layout of a few dialogs where elements decided they wanted to start expanding a lot more than before. I'm guessing this has to do with the changelog entry:     ""Fixed relative units not always expanding auto containers""     https://github.com/Textualize/textual/pull/3059  The snapshot changes are basically bogus. The before and after are visually identical  with the difference view showing all black.  Since there were a lot of switches to toggle and I had to wait for the snapshot tests to run (slow!)  I wrote a little automation to toggle ""Show difference"" for all the results:      document.querySelectorAll(""#flexSwitchCheckDefault"").forEach((element)=> element.click())  It would be good to have this ability in the snapshot report UI itself  maybe even replacing the individual toggles  although I'm not sure about that  especially since it might be laggy toggling the blend modes with a lot of test results. (I suppose if that was really an issue  it could toggle all the visible test results and then toggle others as they come into view  though that's a bit more complex.)  As for understanding the structural changes to the snapshots  I tried making a visualization using hue  coloring according to the position of a rect within the list of rects:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const fraction = index / (rectElements.length - 1);             const cycles = 40;             const hue = fraction * cycles * 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });  This shows some difference  but it isn't very elucidating  since the structural changes only show as gradual shifts in the hue  and affect other rects even if said rects are identical  so it's subtle and messy.  Coloring based on a hash proves to actually highlight differences:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const hash = hash(rect.outerHTML);             const hue = (hash % 360 + 360) % 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });          function hash(s) {         let hash = 0;         for (let i = 0; i < s.length; i++) {             const char = s.charCodeAt(i);             hash = (hash << 5) - hash + char;         }         return hash;     }  As for analyzing the differences now visible  eh  ""maybe later.""","test_snapshots.ambr","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","@@ -639 163 +639 163 @@            font-weight: 700;        }     -      .terminal-1645961354-matrix { +      .terminal-3608998842-matrix {            font-family: Fira Code  monospace;            font-size: 20px;            line-height: 24.4px;            font-variant-east-asian: full-width;        }     -      .terminal-1645961354-title { +      .terminal-3608998842-title {            font-size: 18px;            font-weight: bold;            font-family: arial;        }     -      .terminal-1645961354-r1 ","add missing font properties","fix update textual to 0.33.0 i had to the layout o"
"40220e22d23f3421003b688efec76a6120c892b9","Fix flaky CharacterSelectorDialogWindow test (hopefully)  This should fix this failure:      FAILED tests/test_snapshots.py::test_paint_character_picker_dialog[dark_unicode] - textual.css.query.NoMatches: No nodes match <DOMQuery query='CharacterSelectorDialogWindow'>  I noticed this first in a Windows VM  and am now seeing it in Ubuntu  so it might have to do with the test running slowly. This was back on textual 0.28.0 by the way; it doesn't have to do with the recent updates (as far as I know; at least  not entirely.)  I've never had it reproduce when running in isolation with     pytest tests/test_snapshots.py::test_paint_character_picker_dialog  I tried adding a delay right before the query  and that DIDN'T work  I got the failure at least once with that in place  so I think it was failing to detect a double click  rather than querying while the window was in the process of opening  and so I decided to try increasing the double click threshold. The click() method of pilot has a cumulative artificial delay of 0.3s  so two clicks is at least 0.6s and it's not hard to imagine the event processing pushing that over 0.8s. I actually created the `DOUBLE_CLICK_TIME` to allow overriding it in tests  and I'm not sure if this actually works to override it.","test_snapshots.py","""""""Visual regression tests  using pytest-textual-snapshot.  Run with `pytest tests/test_snapshots.py`  or `pytest` to run all tests. """"""  from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_CHECKING:     # When tests are r","""""""Visual regression tests  using pytest-textual-snapshot.  Run with `pytest tests/test_snapshots.py`  or `pytest` to run all tests. """"""  from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  import textual_paint.char_input from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_","@@ -11 6 +11 7 @@ from textual.geometry import Offset  from textual.pilot import Pilot  from textual.widgets import Input   +import textual_paint.char_input  from tests.pilot_helpers import click_by_attr  click_by_index  drag    if TYPE_CHECKING: @@ -42 6 +43 7 @@ LARGEST = (107  42)    # Prevent flaky tests due to timing issues.  Input.cursor_blink = False  # type: ignore +textual_paint.char_input.DOUBLE_CLICK_TIME = 10 # seconds      def test_paint_app(snap_compare: SnapCompareType  each_theme: None): ","add flaky test for","fix fix flaky characterselectordialogwindow test ("
"cd3137a7378ece5fb9ff85b4b558f4f0de744bc6","Use new Collapsible widget for error details","CHANGELOG.md","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ## [0.3.0] - 2023-09-16  ### Removed  - `--recode-samples` option is removed  now covered by the `pytest` test suite.  ### Changed  - Made radio buttons rounder in `--ascii-only` mode  using parentheses instead of square brackets. - Improved ","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Changed  - Updated Textual from 0.28.0 to 0.37.1 - Error details now use Textual's `Collapsible` widget (introduced in 0.37)  simplifying the code  and giving it a distinct look  whereas before it looked just like the other buttons in the","@@ -7 6 +7 11 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0    ## [Unreleased]   +### Changed + +- Updated Textual from 0.28.0 to 0.37.1 +- Error details now use Textual's `Collapsible` widget (introduced in 0.37)  simplifying the code  and giving it a distinct look  whereas before it looked just like the other buttons in the dialog  but on a separate row. +  ## [0.3.0] - 2023-09-16    ### Removed ","add missing description to unreleased version","add use new collapsible widget for error details m"
"cd3137a7378ece5fb9ff85b4b558f4f0de744bc6","Use new Collapsible widget for error details","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from textual.color ","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from textual.color ","@@ -1068 8 +1068 7 @@ class PaintApp(App[None]):              # It's a difference in name  and an automatic close              if callback:                  callback(button) -            if not button.has_class(""details_button""): -                window.close() +            window.close()          window = MessageBox(              # id=""message_box""               title=title  ","add a comment","add use new collapsible widget for error details a"
"cd3137a7378ece5fb9ff85b4b558f4f0de744bc6","Use new Collapsible widget for error details","windows.py","""""""Windowing system  with Window  DialogWindow  and MessageBox classes (in increasing specificity).""""""  from typing import Any  Callable  ClassVar  from textual import events  on from textual.app import ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.dom import DOMNode  NoScreen from textual.geometry import Offset from textual.message import Message from textual.reactive import var from textual.widget import Widget from textua","""""""Windowing system  with Window  DialogWindow  and MessageBox classes (in increasing specificity).""""""  from typing import Any  Callable  ClassVar  from textual import events from textual.app import ComposeResult from textual.containers import Container  Horizontal  Vertical from textual.css.query import NoMatches from textual.dom import DOMNode  NoScreen from textual.geometry import Offset from textual.message import Message from textual.reactive import var from textual.widget import Widget from textual.wi","@@ -2 7 +2 7 @@    from typing import Any  Callable  ClassVar   -from textual import events  on +from textual import events  from textual.app import ComposeResult  from textual.containers import Container  Horizontal  Vertical  from textual.css.query import NoMatches @@ -11 8 +11 9 @@ from textual.geometry import Offset  from textual.message import Message  from textual.reactive import var  from textual.widget import Widget -from textual.widgets import Button  Static +from textual.widgets import Button  Col","add missing import","add use new collapsible widget for error details m"
"cd3137a7378ece5fb9ff85b4b558f4f0de744bc6","Use new Collapsible widget for error details","test_snapshots.ambr","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","# serializer version: 1 # name: test_free_form_select   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.co","@@ -4945 155 +4945 155 @@            font-weight: 700;        }     -      .terminal-1815055849-matrix { +      .terminal-2239148352-matrix {            font-family: Fira Code  monospace;            font-size: 20px;            line-height: 24.4px;            font-variant-east-asian: full-width;        }     -      .terminal-1815055849-title { +      .terminal-2239148352-title {            font-size: 18px;            font-weight: bold;            font-family: arial;        }     -      .terminal-1815055849-r","add missing font properties","add use new collapsible widget for error details m"
"cd3137a7378ece5fb9ff85b4b558f4f0de744bc6","Use new Collapsible widget for error details","test_snapshots.py","""""""Visual regression tests  using pytest-textual-snapshot.  Run with `pytest tests/test_snapshots.py`  or `pytest` to run all tests. """"""  from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  import textual_paint.char_input from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_","""""""Visual regression tests  using pytest-textual-snapshot.  Run with `pytest tests/test_snapshots.py`  or `pytest` to run all tests. """"""  from pathlib import Path  PurePath from typing import TYPE_CHECKING  Awaitable  Callable  Iterable  Protocol  from pyfakefs.fake_filesystem import FakeFilesystem from textual.geometry import Offset from textual.pilot import Pilot from textual.widgets import Input  import textual_paint.char_input from tests.pilot_helpers import click_by_attr  click_by_index  drag  if TYPE_","@@ -119 8 +119 8 @@ def test_paint_error_dialog(snap_compare: SnapCompareType  each_theme: None):          pilot.app.message_box(""EMIT""  ""Error Message Itself Test""  ""ok""  error=Exception(""Error Message Itself Test""))          assert pilot.app.query_one(""MessageBox"")          await pilot.pause(1.0) -        assert pilot.app.query_one(""MessageBox .details_button"") -        await pilot.click(""MessageBox .details_button"") +        assert pilot.app.query_one(""MessageBox CollapsibleTitle"") +        await pilot.c","fix test_paint_error_dialog","fix use new collapsible widget for error details t"
"3cc4d9ff5d404ca0cc4a305523dfb46beda58cdb","Cache Style objects for each cell in the document  This is not worth the complexity. It would be better to just change the document model to replace fg and bg with a 2D array of Style objects  so there's still a single source of truth.  This touches a LOT of code  and cache invalidation is classically known as a hard problem in programming.","ansi_art_document.py","""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" import base64 import io import math import os import re from random import randint from typing import Any  NamedTuple  Optional  import stransi from PIL import Image from rich.console import Console from rich.segment import Segment from rich.style import Style from rich.text import Text from stransi.instruction import Instruction from textual.color import Color  ColorParseError from textual.geometry import Offset  Region  from textua","""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" import base64 import io import math import os import re from random import randint from typing import Any  NamedTuple  Optional  import stransi from PIL import Image from rich.console import Console from rich.segment import Segment from rich.style import Style from rich.text import Text from stransi.instruction import Instruction from textual.color import Color  ColorParseError from textual.geometry import Offset  Region  from textua","@@ -95 9 +95 22 @@ class AnsiArtDocument:          self.width = width          self.height: int = height          self.ch = [["" "" for _ in range(width)] for _ in range(height)] +        """"""2D array of characters.""""""          self.bg = [[default_bg for _ in range(width)] for _ in range(height)] +        """"""2D array of background colors.""""""          self.fg = [[default_fg for _ in range(width)] for _ in range(height)] +        """"""2D array of foreground colors."""""" +        style = Style(color=default_fg  bgcol","add missing docstrings","change cache style objects for each cell in the do"
"3cc4d9ff5d404ca0cc4a305523dfb46beda58cdb","Cache Style objects for each cell in the document  This is not worth the complexity. It would be better to just change the document model to replace fg and bg with a 2D array of Style objects  so there's still a single source of truth.  This touches a LOT of code  and cache invalidation is classically known as a hard problem in programming.","canvas.py","""""""The Canvas widget.""""""  from typing import TYPE_CHECKING  Any  Optional from rich.color import Color  from rich.segment import Segment from rich.style import Style from textual import events from textual.geometry import Offset  Region  Size from textual.message import Message from textual.reactive import reactive from textual.strip import Strip from textual.widget import Widget  from textual_paint.ansi_art_document import AnsiArtDocument  Selection from textual_paint.args import args from textual_paint.me","""""""The Canvas widget.""""""  from typing import TYPE_CHECKING  Any  Optional from rich.color import Color  from rich.segment import Segment from rich.style import Style from textual import events from textual.geometry import Offset  Region  Size from textual.message import Message from textual.reactive import reactive from textual.strip import Strip from textual.widget import Widget  from textual_paint.ansi_art_document import AnsiArtDocument  Selection from textual_paint.args import args from textual_paint.me","@@ -215 18 +215 21 @@ class Canvas(Widget):              cell_y = y // magnification              try:                  if sel and sel.contained_image and sel.region.contains(cell_x  cell_y) and (sel.mask is None or sel.mask[cell_y - sel.region.y][cell_x - sel.region.x]): -                    bg = sel.contained_image.bg[cell_y - sel.region.y][cell_x - sel.region.x] -                    fg = sel.contained_image.fg[cell_y - sel.region.y][cell_x - sel.region.x] +                    # bg = sel.contained_image.b","update canvas.py","change cache style objects for each cell in the do"
"3cc4d9ff5d404ca0cc4a305523dfb46beda58cdb","Cache Style objects for each cell in the document  This is not worth the complexity. It would be better to just change the document model to replace fg and bg with a 2D array of Style objects  so there's still a single source of truth.  This touches a LOT of code  and cache invalidation is classically known as a hard problem in programming.","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from textual.color ","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.binding import Binding from textual.color ","@@ -295 6 +295 7 @@ class PaintApp(App[None]):              for y in range(self.image.selection.region.height):                  for x in range(self.image.selection.region.width):                      self.image.selection.contained_image.bg[y][x] = self.selected_bg_color +            self.image.selection.contained_image.update_style_cache()              self.canvas.refresh_scaled_region(self.image.selection.region)            # update Polygon/Curve tool preview immediately @@ -313 6 +314 7 @@ class PaintApp","update image background in paint app","change cache style objects for each cell in the do"
"2fdb832dbd3fe187367660871744deadf9331f76","Fix type checker errors  Pyright doesn't understand that fill_style will never be changed  between its declaration and the inner function's scope.      error: Argument of type ""Color | None"" cannot be assigned to parameter ""b"" of type ""Color"" in function ""colors_match""       Type ""Color | None"" cannot be assigned to type ""Color""         Type ""None"" cannot be assigned to type ""Color"" (reportGeneralTypeIssues)","graphics_primitives.py","""""""Drawing utilities for use with the AnsiArtDocument class.""""""  from typing import TYPE_CHECKING  Iterator  from rich.color import Color from rich.style import Style from textual.geometry import Offset  Region  if TYPE_CHECKING:     from textual_paint.paint import AnsiArtDocument   def bresenham_walk(x0: int  y0: int  x1: int  y1: int) -> Iterator[tuple[int  int]]:     """"""Bresenham's line algorithm""""""     dx = abs(x1 - x0)     dy = abs(y1 - y0)     sx = 1 if x0 < x1 else -1     sy = 1 if y0 < y1 else -1   ","""""""Drawing utilities for use with the AnsiArtDocument class.""""""  from typing import TYPE_CHECKING  Iterator  from rich.color import Color from rich.style import Style from textual.geometry import Offset  Region  if TYPE_CHECKING:     from textual_paint.paint import AnsiArtDocument   def bresenham_walk(x0: int  y0: int  x1: int  y1: int) -> Iterator[tuple[int  int]]:     """"""Bresenham's line algorithm""""""     dx = abs(x1 - x0)     dy = abs(y1 - y0)     sx = 1 if x0 < x1 else -1     sy = 1 if y0 < y1 else -1   ","@@ -186 8 +186 6 @@ def flood_fill(document: 'AnsiArtDocument'  x: int  y: int  fill_ch: str  fill_f      """"""Flood fill algorithm.""""""        fill_style = Style(color=fill_fg  bgcolor=fill_bg) -    assert fill_style.color is not None -    assert fill_style.bgcolor is not None        # Get the original value of the cell.      # This is the color to be replaced. @@ -225 6 +223 8 @@ def flood_fill(document: 'AnsiArtDocument'  x: int  y: int  fill_ch: str  fill_f          assert color is not None          assert","fix flood_fill docstring","fix fix type checker errors pyright does n't under"
"4a4012dbfd1525ea1fc77fbfa14c2dbc1e68cc30","Update pyright version  There are no new errors or anything.  This silenced error is no longer generated:   /home/io/Projects/textual-paint/src/textual_paint/wallpaper.py:241:18 - error: Stub file not found for ""xdg"" (reportMissingTypeStubs)","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -350 7 +350 7 @@ cspell-cli lint .  # I use the ""Python"" and ""Pylance"" VS Code extensions  and the Pyright CLI:  pyright  # I'm targeting zero errors at this version of Pyright: -PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright +PYRIGHT_PYTHON_FORCE_VERSION=1.1.345 pyright  # I also tried mypy and fixed some errors it reported  but I'm not targeting zero errors with mypy.  mypy src --no-namespace-packages --check-untyped-defs   ","add missing version to missing check","add update pyright version there are no new errors"
"4a4012dbfd1525ea1fc77fbfa14c2dbc1e68cc30","Update pyright version  There are no new errors or anything.  This silenced error is no longer generated:   /home/io/Projects/textual-paint/src/textual_paint/wallpaper.py:241:18 - error: Stub file not found for ""xdg"" (reportMissingTypeStubs)","wallpaper.py","""""""Set the desktop wallpaper.""""""  import os import subprocess import sys from pathlib import Path   def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environment     # and http://ubuntuforums.org/showthread.php?t=652320     # and http://ubuntuforums.org/showthread.php?t=1139057     if sys.platf","""""""Set the desktop wallpaper.""""""  import os import subprocess import sys from pathlib import Path   def get_desktop_environment() -> str:     """"""     Returns the name of the current desktop environment.     """"""     # From https://stackoverflow.com/a/21213358/2624876     # which takes from:     # http://stackoverflow.com/questions/2035657/what-is-my-current-desktop-environment     # and http://ubuntuforums.org/showthread.php?t=652320     # and http://ubuntuforums.org/showthread.php?t=1139057     if sys.platf","@@ -238 7 +238 7 @@ def get_config_dir(app_name: str) -> str:          config_home = os.environ[""APPDATA""]      else:          try: -            from xdg import BaseDirectory  # type: ignore +            from xdg import BaseDirectory              config_home = BaseDirectory.xdg_config_home          except ImportError: # Most likely a Linux/Unix system anyway              config_home = os.path.join(get_home_dir()  "".config"") ","fix config dir for xdg","update update pyright version there are no new err"
"0baed2d8191ad98c5ee7c63a849e5f996981ce6e","VS Code: disable indentation detection to avoid future inconsistency","settings.json","{     ""editor.insertSpaces"": true      ""editor.tabSize"": 4      ""python.analysis.packageIndexDepths"": [         // The default depth is 1 (top-level only)          // which doesn't let auto-imports work for Textual          // i.e. the Quick Fix for missing names  and         // maybe an auto-complete feature that I don't use.         // (2 might be sufficient.)         // https://github.com/Textualize/textual/issues/2104         {""name"": ""textual""  ""depth"": 5}          {""name"": ""rich""  ""depth"": 5}      ]  ","{     ""editor.insertSpaces"": true      ""editor.tabSize"": 4      ""editor.detectIndentation"": false      ""python.analysis.packageIndexDepths"": [         // The default depth is 1 (top-level only)          // which doesn't let auto-imports work for Textual          // i.e. the Quick Fix for missing names  and         // maybe an auto-complete feature that I don't use.         // (2 might be sufficient.)         // https://github.com/Textualize/textual/issues/2104         {""name"": ""textual""  ""depth"": 5}        ","@@ -1 6 +1 7 @@  {      ""editor.insertSpaces"": true       ""editor.tabSize"": 4  +    ""editor.detectIndentation"": false       ""python.analysis.packageIndexDepths"": [          // The default depth is 1 (top-level only)           // which doesn't let auto-imports work for Textual  ","add missing default depth in packageindexconfig","add vs code : disable indentation detection to avo"
"68e52ec30e1f591263cf7c8b879bf13b53caacdd","Rename file to avoid pytest discovery  This file was being automatically executed on (unrelated) file changes  via this command line:     .venv\Scripts\python.exe -m pytest -p vscode_pytest --collect-only","generate_gradient_sample.py","","","","fix bug in test-http-client","update rename file to avoid pytest discovery this"
"40b2b1b1a1b02a7086564d454bf4be790fda4e21","Catch ImportError to tweak error message","auto_restart.py","""""""Automatically restarts the program when a file is changed.""""""  from __future__ import annotations  import os import sys from typing import TYPE_CHECKING  from textual.app import ScreenStackError  if TYPE_CHECKING:     from textual_paint.gallery import GalleryApp     from textual_paint.paint import PaintApp  def restart_program() -> None:     """"""Restarts the current program  after resetting terminal state  and cleaning up file objects and descriptors.""""""      if hasattr(_app  ""discard_backup""):         tr","""""""Automatically restarts the program when a file is changed.""""""  from __future__ import annotations  import os import sys from typing import TYPE_CHECKING  from textual.app import ScreenStackError  if TYPE_CHECKING:     from textual_paint.gallery import GalleryApp     from textual_paint.paint import PaintApp  def restart_program() -> None:     """"""Restarts the current program  after resetting terminal state  and cleaning up file objects and descriptors.""""""      if hasattr(_app  ""discard_backup""):         tr","@@ -46 13 +46 17 @@ def restart_program() -> None:          print(""Error stopping file change observer:""  e)        try: -        import psutil -        p = psutil.Process(os.getpid()) -        for handler in p.open_files() + p.connections(): -            try: -                os.close(handler.fd) -            except Exception as e: -                print(f""Error closing file descriptor ({handler.fd}):""  e) +        try: +            import psutil +        except ImportError: +            print(""psutil modu","update restart_program.py","update catch importerror to tweak error message up"
"fc269f3a90eafd16a732c95085dff60b1c8815a7","Update watchdog to 6.0.0  Doesn't fix ignore patterns not working on Windows.","requirements.txt","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","appscript==1.2.2; sys_platform == 'darwin' # for setting the wallpaper on macOS; optional  falls back to osascript CLI pyobjc-framework-Quartz==9.2; sys_platform == 'darwin' # for getting the screen resolution on macOS; optional  falls back to 1920x1080 Pillow==9.5.0 # psutil==5.9.0 # for cleaning up open files when auto-restarting on changes in development; optional pyfiglet==0.8.post1 # PyGObject==3.42.1 # gi.repository module  used for setting the wallpaper on gnome  unity  and cinnamon; optional  falls ","@@ -10 7 +10 7 @@ rich==13.4.2  stransi==0.3.0  textual==0.38.1  textual-dev==1.1.0 # for development (`textual` CLI) -watchdog==3.0.0 # for development; optional (only used when --restart-on-changes is passed) +watchdog==6.0.0 # for development; optional (only used when --restart-on-changes is passed)  types-Pillow==10.0.0.1 # for development  types-psutil==5.9.5.15 # for development  pytest==7.4.1 # for development ","add missing description","fix update watchdog to 6.0.0 does n't ignore patte"
"fc269f3a90eafd16a732c95085dff60b1c8815a7","Update watchdog to 6.0.0  Doesn't fix ignore patterns not working on Windows.","setup.cfg","[metadata] name = textual_paint version = 0.4.0 description = MS Paint in the terminal  built with Textual long_description = file: README.md long_description_content_type = text/markdown author = Isaiah Odhner author_email = isaiahodhner@gmail.com license = MIT license_file = LICENSE.txt license_files = LICENSE.txt url = https://github.com/1j01/textual-paint project_urls =     Source = https://github.com/1j01/textual-paint     Changelog = https://github.com/1j01/textual-paint/blob/main/CHANGELOG.md keyword","[metadata] name = textual_paint version = 0.4.0 description = MS Paint in the terminal  built with Textual long_description = file: README.md long_description_content_type = text/markdown author = Isaiah Odhner author_email = isaiahodhner@gmail.com license = MIT license_file = LICENSE.txt license_files = LICENSE.txt url = https://github.com/1j01/textual-paint project_urls =     Source = https://github.com/1j01/textual-paint     Changelog = https://github.com/1j01/textual-paint/blob/main/CHANGELOG.md keyword","@@ -64 7 +64 7 @@ install_requires =      Pillow==9.5.0  [options.extras_require]  dev = -    watchdog==3.0.0 +    watchdog==6.0.0      psutil==5.9.0      types-Pillow==10.0.0.1      types-psutil==5.9.5.15 ","add dev flag to install_requires list","fix update watchdog to 6.0.0 does n't ignore patte"
"b0e478cae08949ed9045165a675c703f698ba2ec","Fix errors when interacting with command palette","CHANGELOG.md","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Added  - **Free typing mode**   - With the Text tool  you can now click anywhere on the canvas and start typing without dragging to create a textbox. This gives a much more useful workflow for ASCII art and ANSI art  as you can make tiny ","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Added  - **Free typing mode**   - With the Text tool  you can now click anywhere on the canvas and start typing without dragging to create a textbox. This gives a much more useful workflow for ASCII art and ANSI art  as you can make tiny ","@@ -13 6 +13 10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0    - With the Text tool  you can now click anywhere on the canvas and start typing without dragging to create a textbox. This gives a much more useful workflow for ASCII art and ANSI art  as you can make tiny edits all over the canvas without having to create a new textbox each time.    - You can also press <kbd>Insert</kbd> or arrow keys to make a cursor appear to start editing  and it will switch to the Tex","add note about text editor","update fix errors when interacting with command pa"
"b0e478cae08949ed9045165a675c703f698ba2ec","Fix errors when interacting with command palette","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.color import Color as RichColor from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.color import Color as RichColor from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.","@@ -2982 6 +2982 13 @@ Columns: {len(self.palette) // 2}        def on_key(self  event: events.Key) -> None:          """"""Called when the user presses a key."""""" + +        if len(self.screen_stack) > 1: # type: ignore +            # Avoid error if command palette is open  and you press an arrow key  +            # thereby creating a cursor and switching to the Text tool. +            # (NoMatches: No nodes match <DOMQuery query='ToolsBox'>) +            return +          key = event.key          shift = key.","add a comment","add fix errors when interacting with command palet"
"e519ad4613dada1ca9b14453ede5d48bb3c61824","Add to known issues list","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -179 17 +179 22 @@ To preview ANSI art files in file managers like Nautilus  Thunar  Nemo  or Caja   - The selection box border appears inside instead of outside (and lacks dashes). For the text box  I hid the border because it was too visually confusing  but it should also have an outer border.  - Pressing both mouse buttons stops the current tool  but doesn't undo the current action. Also Pick Color can't be cancelled (with <kbd>Esc</kbd> or by pressing both mouse buttons)  since it samples the color c","add note about text box border","add to known issues list add note about text box b"
"93abb6f87108f8c78d1143d864579522c7f4e288","Remove todo for issue that I can't reproduce","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -179 7 +179 6 @@ To preview ANSI art files in file managers like Nautilus  Thunar  Nemo  or Caja   - The selection box border appears inside instead of outside (and lacks dashes). For the text box  I hid the border because it was too visually confusing  but it should also have an outer border.  - Pressing both mouse buttons stops the current tool  but doesn't undo the current action. Also Pick Color can't be cancelled (with <kbd>Esc</kbd> or by pressing both mouse buttons)  since it samples the color con","add note about text box border","remove todo for issue that i ca n't reproduce add"
"4edd5ab4d781e2e2091d40736ea17282abc95279","Note worse variation of menu scrolling issue","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -185 6 +185 7 @@ To preview ANSI art files in file managers like Nautilus  Thunar  Nemo  or Caja   - The status bar description can be left blank when selecting a menu item. (I think the `Leave` event can come after closing  once the mouse moves.)  - Menu items like Copy/Cut/Paste are not grayed out when inapplicable. Only unimplemented items are grayed out.  - Clicking Save As menu item scrolls down menu instead of activating it if there's not enough space to show the whole menu. (It seems to be scrolli","add more info about menu items","update note worse variation of menu scrolling issu"
"0a0d509cd2db45920793f803d24429134f42f99d","Update test snapshots  I added another ANSI art sample  which now shows up in the gallery app's snapshot  invalidating the test. Maybe I should stop adding sample art. Or better yet  I should create a separate folder with just two files so that I can add sample art freely without breaking the tests:   - one file that's small and centered   - one file that's large with scrollbars  `pytest --snapshot-update`","test_snapshots.ambr","# serializer version: 1 # name: test_fill_spiral   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/aja","# serializer version: 1 # name: test_fill_spiral   '''   <svg class=""rich-terminal"" viewBox=""0 0 1007 977.1999999999999"" xmlns=""http://www.w3.org/2000/svg"">       <!-- Generated with Rich https://www.textualize.io -->       <style>          @font-face {           font-family: ""Fira Code"";           src: local(""FiraCode-Regular"")                    url(""https://cdnjs.cloudflare.com/ajax/libs/firacode/6.2.0/woff2/FiraCode-Regular.woff2"") format(""woff2"")                    url(""https://cdnjs.cloudflare.com/aja","@@ -700 142 +700 142 @@            font-weight: 700;        }     -      .terminal-3271781646-matrix { +      .terminal-1602580187-matrix {            font-family: Fira Code  monospace;            font-size: 20px;            line-height: 24.4px;            font-variant-east-asian: full-width;        }     -      .terminal-3271781646-title { +      .terminal-1602580187-title {            font-size: 18px;            font-weight: bold;            font-family: arial;        }     -      .terminal-3271781646-r1 ","add missing font properties","add update test snapshots i another ansi art sampl"
"4387c07e7ba52b4b801bdd71f6514b445414904d","Save plain text with CRLF on Windows  fixing round-trip tests  The line endings of *.txt files are currently managed by git  as specified in `.gitattributes`  which means they're checked out as CRLF on Windows. I could either change the test to replace CRLF with LF in the expected file content  or change `.gitattributes`  or change the file saving itself to save different line endings per platform  and the latter feels a bit better to me. Eventually it would be good to support different line endings per file as well as different encodings  with some auto-detection and a way to override the settings and reload.","CHANGELOG.md","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Added  - **Free typing mode**   - With the Text tool  you can now click anywhere on the canvas and start typing without dragging to create a textbox. This gives a much more useful workflow for ASCII art and ANSI art  as you can make tiny ","# Changelog  All notable changes to this project will be documented in this file.  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)  and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).  ## [Unreleased]  ### Added  - **Free typing mode**   - With the Text tool  you can now click anywhere on the canvas and start typing without dragging to create a textbox. This gives a much more useful workflow for ASCII art and ANSI art  as you can make tiny ","@@ -15 6 +15 10 @@ and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0  - Focus is reset when pressing <kbd>Esc</kbd>. This is important to avoid getting stuck with the character input field focused  in order to use free typing mode  or move the selection with the arrow keys  or copy the selection with <kbd>Ctrl+C</kbd>. (The character input field is where it shows the currently selected colors.)  - Text cursor now blinks.   +### Changed + +- Plain text files (`.txt`) are now sa","add note about focused character","change save plain text with crlf on windows   fix"
"4387c07e7ba52b4b801bdd71f6514b445414904d","Save plain text with CRLF on Windows  fixing round-trip tests  The line endings of *.txt files are currently managed by git  as specified in `.gitattributes`  which means they're checked out as CRLF on Windows. I could either change the test to replace CRLF with LF in the expected file content  or change `.gitattributes`  or change the file saving itself to save different line endings per platform  and the latter feels a bit better to me. Eventually it would be good to support different line endings per file as well as different encodings  with some auto-detection and a way to override the settings and reload.","ansi_art_document.py","""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" import base64 import io import math import os import re from random import randint from typing import Any  NamedTuple  Optional  import stransi from PIL import Image from rich.console import Console from rich.segment import Segment from rich.style import Style from rich.text import Text from rich.color import Color as RichColor from stransi.instruction import Instruction from textual.color import Color  ColorParseError from textual.g","""""""Provides the AnsiArtDocument and Selection classes (and exceptions.)"""""" import base64 import io import math import os import re from random import randint from typing import Any  NamedTuple  Optional  import stransi from PIL import Image from rich.console import Console from rich.segment import Segment from rich.style import Style from rich.text import Text from rich.color import Color as RichColor from stransi.instruction import Instruction from textual.color import Color  ColorParseError from textual.g","@@ -320 7 +320 7 @@ class AnsiArtDocument:          for y in range(self.height):              for x in range(self.width):                  text += self.ch[y][x] -            text += ""\n"" +            text += os.linesep          return text        def get_rich_console_markup(self) -> str: ","add missing newline","change save plain text with crlf on windows   fix"
"7ced8fc50b7d62f07ffb4c1c7c9170d3562ae5e6","Add launch configuration to debug pip install","launch.json","{     // Use IntelliSense to learn about possible attributes.     // Hover to view descriptions of existing attributes.     // For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387     ""version"": ""0.2.0""      ""configurations"": [         {             ""name"": ""Run Textual App""              ""type"": ""debugpy""              ""request"": ""launch""              // TODO: is there a way to get this from the environment  i.e. to use             // the binary that `which textual` would return       ","{     // Use IntelliSense to learn about possible attributes.     // Hover to view descriptions of existing attributes.     // For more information  visit: https://go.microsoft.com/fwlink/?linkid=830387     ""version"": ""0.2.0""      ""configurations"": [         {             ""name"": ""Run Textual App""              ""type"": ""debugpy""              ""request"": ""launch""              // TODO: is there a way to get this from the environment  i.e. to use             // the binary that `which textual` would return       ","@@ -70 6 +70 18 @@              ""justMyCode"": false               // If using pytest-cov in the future:              // ""env"": {""PYTEST_ADDOPTS"": ""--no-cov""} -        } +        }  +        { +            ""name"": ""Debug pip install""  +            ""type"": ""debugpy""  +            ""request"": ""launch""  +            ""program"": "".venv/bin/pip""  +            ""windows"": { +                ""program"": "".venv/Scripts/pip.exe""  +            }  +            ""args"": [""install""  ""-r""  ""requirements.txt""]  +            ""co","add debugpip install to test-cov","add launch configuration to debug pip install add"
"4b390d884b0615a238edffa34269ee56d562c5bc","Fix regression where CharInput defaults to focused  Originally the File menu was getting the default focus  though this was not useful because the menus are not keyboard accessible yet  but when I made the menu items not accept focus  the auto focus behavior became to focus the CharInput  causing `pytest -k test_paint_app` to fail. No focus makes more sense than the File menu item or the CharInput.","paint.py","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.color import Color as RichColor from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.","#!/usr/bin/env python3  """"""Textual Paint is a detailed MS Paint clone that runs in the terminal.""""""  import asyncio import math import os import re import shlex import sys from random import random from typing import Any  Callable  Iterator  Optional from uuid import uuid4  from PIL import Image  UnidentifiedImageError from rich.color import Color as RichColor from rich.style import Style from rich.text import Text from textual import events  on  work from textual.app import App  ComposeResult from textual.","@@ -112 6 +112 8 @@ class PaintApp(App[None]):        CSS_PATH = ""paint.css""   +    AUTO_FOCUS = None +      # These call action_* methods on the widget.      # They can have parameters  if need be.      # https://textual.textualize.io/guide/actions/ ","add example for paintapp","add fix regression where charinput defaults to foc"
"9eae8a19e1a3de6bddb808e52cd49cea520992bd","Note issue with multiple blinking cursors","README.md"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans"," Textual Paint =============  MS Paint in your terminal.  This is a TUI (Text User Interface) image editor  inspired by MS Paint  built with [Textual](https://textual.textualize.io/).  ![MS Paint like interface](https://raw.githubusercontent.com/1j01/textual-paint/v0.1.0/screenshot.svg)  ## Features  - [x] Open and save images   - [x] Fancy file dialogs   - [x] Drag and drop files to open   - [x] Warnings when overwriting an existing file  or closing with unsaved changes   - [x] Auto-saves a temporary `.ans","@@ -188 6 +188 7 @@ To preview ANSI art files in file managers like Nautilus  Thunar  Nemo  or Caja   - The selection box border appears inside instead of outside (and lacks dashes). For the text box  I hid the border because it was too visually confusing  but it should also have an outer border.  - The canvas flickers when zooming in with the Magnifier tool.  - Some languages don't display correctly. +- The cursor can blink on the canvas while focus is on the character input. In fact you can have three bli","add description of selection box border","add note issue with multiple blinking cursors desc"
