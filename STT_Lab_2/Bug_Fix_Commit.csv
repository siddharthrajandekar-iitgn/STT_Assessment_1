"Hash","Message","Hash_Parent","Is_Merge_Commit","Modified_Files"
"b64869eae4c9b5962b0e71d3b060709c20931214","Let buttons fall back to the original color when deselected","['3f8a652fe2d61e15d29ba9f5b76758c3b29533f7']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D13EA10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C5C1E50>]"
"ad111e5d6c044ffbd562c5c35019f82e934d7620","Refactor: extract tool handling from Canvas  I wanted to avoid duplicating tool-related state between PaintApp and Canvas  and prepare for adding different tools with more state and which will want to live in a separate file.  This makes it slower  when running with `textual run --dev paint.py`; when running with `python3 paint.py`  it's fine. When running in dev mode with `textual console` devtool connected  it's extremely much slower. But if it was faster  you'd have more messages to scroll through  ha. So it's a tradeoff.* *Ideally you want it to be fast and for the logs to be compacted.  In the future  I could bypass the message system for performance  but for now I think it's better to stay idiomatic.","['338d438470a7910a464940ea3a7b38f2a25d3639']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C655710>]"
"6d17f085f5a655ef42bce2569ba3f0b1b1c497e9","Debug: show regions when undoing/redoing (currently the whole canvas)","['4fa7dda9a070491b3c1529f89b5e5dc6e7e6f064']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D11D410>]"
"0aaa9db8395aff4b4df8f6544ab8562de1d9ceaf","Make region update debug a flag","['15db3f453818e171ba68be4492910820c4ed24fc']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C2890>]"
"6d5430ad2eae8be87728ff582d39610aaf9ed040","Fix error due to action regions exceeding canvas bounds","['0aaa9db8395aff4b4df8f6544ab8562de1d9ceaf']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE5350>]"
"3e84ae7e17efd7cdf7d368f0c4a7be3974ed8949","Disable region update debug","['6d5430ad2eae8be87728ff582d39610aaf9ed040']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D62FE90>]"
"303d6942f4badb851cc755a0c9d4b05ca94e610f","Switch out fill tool icon to avoid text row offset artifacts","['5b1c16ddc35ec8f76da1a46aad59d738ce5c74c0']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C0DC690>]"
"3652b2bd8e1c905b4bb941a4280bf5e164313e9a","Add flood fill support  * Implemented the Fill With Color tool using the algorithm described as   ""combined-scan-and-fill span filler"" on Wikipedia. * I added handling for the affected region being None  which turned out more complicated than I would like...   Some cases may be able to be simplified or removed. * Also  I moved event.stop() to the top so I don't need to call it in multiple places when there are multiple return points.","['3dbbbc1c5fe5c923a37eb6404ff64ca2c640636a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D62CF10>]"
"ba646f7cdb3e8d0bb6a445f0a762d3ad9fe3bbcb","Add textual screenshot to readme  This took a lot of trial and error to get this working. - First I had to figure out how to copy the terminal output as HTML.   I had to configure keybindings for Select All and Copy As HTML in   the Ubuntu terminal. - GitHub doesn't support line-height in markdown  so I came up with   using an SVG with <foreignObject> to contain the screenshot HTML. - GitHub doesn't support inline SVG  so I had to use <img>  that's fine.   An external file is cleaner anyways. - I spent a long time trying to fix the seams between rows of text.   `line-height: <font-size>` is not `line-height: 1`!   I think I tried `line-height: 1` first  but it wasn't working for some   reason so I tried a bajillion things  having mentally discounted it    before circling back to it and trying it again and it actually worked. - I spent a long time futzing about with SVG viewports and units. - The text was staggered due to some of the Unicode characters  so I   developed a script to fix that up. I managed to achieve a nice   development cycle for this  but only near the end of developing it.   Most of the time while working on it I was copying and pasting   the updated code into the console after hitting up up enter to   re-run grapheme-splitter's JS.   The next commit will apply this script. - All in all  getting this screenshot working took basically all day!   Compare that to my first day of progress on this project  having   never used the Textual framework before  and also having not used   Python for a while. In summary  coding is a land of contrasts. - VS Code's markdown rendering isn't working with the ch/lh units.","['3cf76d9486afe1e81ca3b4aaefedbf32a35b7419']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C628850>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C66ED90>]"
"89e8c18dc430790ebdcb0a195f10ec788a7d4295","Apply SVG fix-up script (contained in the SVG)","['ba646f7cdb3e8d0bb6a445f0a762d3ad9fe3bbcb']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C63DDD0>]"
"b5e0ec8438c4459de9337f6c1541b61967d7a3bb","Confirm overwriting files  A Textual layout bug is unfortunately making the Yes button HUGE  and the No button INVISIBLE  until you mouse over the dialog  which is pretty funny... ""<file> already exists. Do you want to replace it? [Yes]""","['a5b217b3cdf9747a9a531ef99bcaffcceb4b0968']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C2990>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C5C2BD0>]"
"009a06e82b0d2d1d6a04bb2a15c271c1e637c5e9","VS Code: disable justMyCode debugger feature","['4334d60681192141fc964176c27cf7ad829e9681']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D13D0D0>]"
"e988bf787f207534f94ddaa70d6709bd0614bb69","Move window layout fix to Window","['8f5bbe96359a6faabdd14ac1734da80fcd732e13']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AF050>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C63F5D0>]"
"ddd89d367b24917b7855a57d9870c0f9d5dc494d","Hide brush preview when you stop hovering over the canvas","['faabe2c88e8fb5ba55b274ea0cc409f60d81d3c8']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBED1D0>]"
"8929ed14b646cf2827b6326a250a77c03c15bb93","Clear screen during development to avoid seeing fixed errors","['fea42598766037d475fb65d475e1de431e41bb2b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AF610>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C4A97D0>]"
"7497a7dd5b16d3e102e10008b9a43d738e237830","Tweak overwrite dialog layout  - Reduce height  to fit to content - Reduce button width  to avoid clipping","['0125374bbad2c68dea14373e140886140a6e2891']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5E38D0>]"
"2e4d6e9c1629e50e198a850e6dc0f1a56f6905d6","Fix several errors in JS->Python translation","['c05bf1200dbedce07980e347bfcb00579b75057b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5BD010>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D5BF750>]"
"8c4a5bf583d6d735152a643460000c2626e59e2f","Handle errors when opening a file","['2d3f05ff1221e26098c20b669f407fc699c085ed']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D624790>]"
"e715a28e59558e46aca7fb660602cce71d16cab3","Fix error when hitting OK button with no callback","['8c4a5bf583d6d735152a643460000c2626e59e2f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5F49D0>]"
"fcf44a8b940940d34add2159069b05ffda267401","Handle errors when saving a file","['11817904bb5f48f525a40a44a3ba1ece4e031037']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C63F110>]"
"f1a4b9736e2241195e8102e373e9543383f7e871","Improve error handling for saving and loading files","['fcf44a8b940940d34add2159069b05ffda267401']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AE750>]"
"1659f2d75bd3a27fb4af586f76afc0decfc3c88b","Improve error handling for saving files","['79a1432abc99abb09cae2b28d96baac6a53bec89']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AF0D0>]"
"d2ab602ff56306d3152962801c6b9aea55b59fc2","Dynamically avoid cutting off the rightmost character in menus  Before I had it wide enough for English  with a max-width  but not all languages. This is a better solution.","['66ce8df21dd3660c65085486c4c16aa9b64c1d21']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4B35D0>]"
"365eb6e4c7f3c872f8c2df319b8626ee8e41fb33","Dynamically position menus instead of guessing  I must've missed this property when looking through the properties in the debugger before.","['d2ab602ff56306d3152962801c6b9aea55b59fc2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AEF50>]"
"adcaed47cddcbc1150bd08e8eb8c87ec7dfddadf","Handle base language (English) better  - Don't log an error about a missing language file at startup. - Don't append to untranslated.txt for strings that don't need   translation because they're already in the target language.   I could use an early return for this too  but it's not important.","['7b0eaff1082f7c58f5ca246611868aa8d721a8e9']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5B0750>]"
"ac10d5e50092800f7dbc68019fe8257b9107a169","Tweak error messages to use colons for clarity","['c6594182406d2296cb084ac0edc24e91d70c81ec']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE3790>]"
"c3763523bd59bbb670409baadf60ba17df0a74ea","Visually debug IndexError...  The canvas size isn't getting updated (fully) when loading a document.","['5958ba348b1ddf557601938ae61927ec91c5617d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D13C290>]"
"a33dd153ce6f0f995ed25aaa08847138b11721f9","I tried to fix flickering when using magnifier tool  - Move `self.canvas.magnification = self.magnification` up. It happens    due to internal call_after_refresh  and should happen  before scroll. - Remove note about other code in JS Paint  I think it's not needed. - Note my attempts at fixing flicker  which were unsuccessful  so that   I don't try the exact same things later  and feel stupid    and so I don't accrue so many branches.","['896f43e7edfc3772327ad96ff18bc98b08e83943']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AD190>]"
"433fa68a21abf7217511cfc9af72cf234b3c4f3a","Refactor anti-garbage-collection Task reference keeping  Now it's really verbose  but I don't have to worry about reusing the same name twice. Or coming up with new  fun ones.  https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task  > Important: Save a reference to the result of this function  to avoid a task disappearing mid-execution. The event loop only keeps weak references to tasks. A task that isn’t referenced elsewhere may get garbage collected at any time  even before it’s done. For reliable “fire-and-forget” background tasks  gather them in a collection: > > background_tasks = set() > > for i in range(10): >     task = asyncio.create_task(some_coro(param=i)) > >     # Add task to the set. This creates a strong reference. >     background_tasks.add(task) > >     # To prevent keeping references to finished tasks forever  >     # make each task remove its own reference from the set after >     # completion: >     task.add_done_callback(background_tasks.discard)","['2a2b29e30e6ff459a59e7482a7a526031b7c7b2e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5ADBD0>]"
"8e82203bb57ecff3e8c034d66ceb111328978a2e","Note another attempt at fixing flickering when using the magnifier tool  I tried `refresh(layout=True  repaint=False)` before `_scroll_to`  but no luck.","['51767d05c8001cf961c56ea9dba877d93e12d170']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5E0110>]"
"c076a1b5de8ef530aa9d8717157b35edabc8c86c","Simplify further and fix Toolbox hiding behavior  Yay  this is how simple I originally thought it was going to be.","['8040196f100f2f58ab9a62865782bf8197eb74b7']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5FE410>]"
"1eea87c6c96a6651f37fff39424ecaaf9bc4dca6","Fix error if dragging from off the canvas and releasing mouse over it","['e579b005c03ace17005a7cc47c24ef4ab2c4f628']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C62A4D0>]"
"5b2e4e0f831744a0f10cc8308c0511d0d63e73f6","Make warning into an assertion","['612bc3d204f76161a81d00e4fa03f912e5c499fb']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C2650>]"
"27c9646b20d0b83004d020c31ca18ec209336ed5","DRY window closing and make type checker happy with an assertion","['065c5be2cbad5610ab93a5b3db3bde01d581b2fa']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBEC790>]"
"da62add6c14ea46f988c86bb3e8e5be9ea23df6b","Avoid ""possibly unbound"" errors","['3b2b3835951948786ccb009fbd2d27c1b90f238c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C632650>]"
"a8f174eb8ef3a02198ff7f5a05b0b2cdb0087f16","Fix the last type checking error  and simply --reload-on-changes  Hopefully this makes it more robust as well...","['2827457497d25662faa1d7466be8e3d27286e64c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0BD990>]"
"9f06373cb759db4049878b04280b891a7c19aeea","Add a bunch more type checking hints/assertions","['2c8d74808a6267dd83d65a644d8fbcc20210360b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D597610>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D625490>, <pydriller.domain.commit.ModifiedFile object at 0x0000026592C13F10>]"
"505605c660ef47fe5f31a8eec35c09fc99734ca5","Add typing to preprocess.py script that I'm not using  ChatGPT did most of this for me. I just said ""Please add type annotations to this code. Surround the code in a Markdown code block."" and then fixed the Generator and the lambda.","['5d778c1879f0e5c4a85981ca4e834194df2d31fd']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C62B610>]"
"a875c61fff1c3a597922bd9f56c78a4fa244abd4","Fix mouse coordinates with a better workaround","['bcb26707ef45fcf03c5aa9988b2d5a83980c5263']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBFF8D0>]"
"6259d11ec5fef41e79ed939642ca69cddf4e9a39","Switch to previous tool only on mouse up (for Magnifier)  This fixes accidentally activating the other tool when using the Magnifier  and matches the behavior of MS Paint.","['961dfe803958c49546ce5294e65af3ad6641753a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5A0990>]"
"23352d64ac6c6b8ed410cd0b40a00fb3ae4d3f72","Fix ""incompatible"" override type checker errors  Method ""watch_value"" overrides class ""Input"" in an incompatible manner   Return type mismatch: base method returns type ""Coroutine[Any  Any  None]""  override returns type ""None""     Type ""None"" cannot be assigned to type ""Coroutine[Any  Any  None]""PylancereportIncompatibleMethodOverride  Method ""validate_cursor_position"" overrides class ""Input"" in an incompatible manner   Parameter 2 name mismatch: base parameter is named ""cursor_position""  override parameter is named ""position""PylancereportIncompatibleMethodOverride  These wouldn't actually be problems  due to the nature of the reactive properties system  but whatever  I can make it match  no problem.","['6259d11ec5fef41e79ed939642ca69cddf4e9a39']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D597450>]"
"1a135c41531db973386a5a574e648ec5fc86d284","Rename a variable that is inside is_inside_polygon  This is an AI-offered function... so I'm sort of guessing here.  This fixes a spell checker issue but there's also a ""possibly unbound"" type checker issue here.","['23352d64ac6c6b8ed410cd0b40a00fb3ae4d3f72']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5A1910>]"
"1523e960bb5547ec88e734eacf536111054a25b4","Fix a type checker error (setting parent_menu on Separator)  Not really a problem  but parent_menu isn't declared on Separator.","['de1a77036bb42038b4e24c4c0bcc9cebbffe3f2e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5B2C90>]"
"e62064a307fe9dc700d8c7eb591f615b43f7acfb","Fix a type checker error","['1523e960bb5547ec88e734eacf536111054a25b4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C624E10>]"
"3b08e045e74e58115ad28873ee015b9ed02c6b1e","Mount menus to the Screen instead of the App  All just to avoid one type checker error:      Type of ""app"" is partially unknown       Type of ""app"" is ""App[Unknown]""PylancereportUnknownMemberType  But it's the last error in menus.py... But I still have a bunch of this error in main.py  and I don't know how to deal with it generally. It doesn't seem like a real problem  but I don't want to add so many ignore comments...","['c3d4e1c254c4c137cde10b181b7acb3ac4a5420b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C12A50>]"
"bbe3f0172532edc19cff1adf1315569cf79f6d7d","Add to known issues","['7bf41a6ac4372e612ccda78a30c7eb36618ce886']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4E3050>]"
"7bbca533b299b2bc455df56ff01041ce59bb22c9","Tweak dark clouds  I wanted to do more with this  but I actually ran into some problems where it wouldn't replace a color. It might need a threshold.","['d37291b9d3a3a14856f11e612b2c7b3a0ff67393']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AEDD0>]"
"bf2b5ec94ed128f15300b33dff48e5e3974a8b83","Fix dragging windows  This was broken in ""Fix a type checker error"" e62064a307fe9dc700d8c7eb591f615b43f7acfb  where I just added `and self.offset_at_drag_start`. The problem is that Offset defines __bool__ and are falsy when (0 0)  and the windows  despite starting out in the center  initially have an offset of (0 0) FROM this center position.","['769c7af339305414cf7d161624ad9cd47a1887c5']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D54C490>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D551790>]"
"8c932ea53f12ca42dea26778fd513b728fa53f80","Fix dragging selection by top left corner  I recognized this as another Offset -> bool coercion issue.","['bf2b5ec94ed128f15300b33dff48e5e3974a8b83']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C035D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658DBEEA10>]"
"0e25b99d2b1af00eb10eb296e225b64e8ac31fe6","Update known issue with newly-known knowledge about the issue  There are known knowns  and unknown knowns  and also known unknowns  and unknown unknowns  but this is a now-no-longer-known-unknown-now-known-known  y'know? (I don't not not not not not not know.)","['66f4b77ff34be1e688cacc98a9c422d4912a8590']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5DF610>]"
"5ba8cbdbb80ef2b4bf3c9e1feabb7e585f31b8b3","Fix assertion error when using Select or Text before any other tool  AssertionError: selection_drag_offset should only be set if there's a selection","['aae99c324732834855dac77aa9da416405517530']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D624490>]"
"15ffabbaac50bb4e5d0397333849121930dc8ffc","Use repr instead of str when formatting exceptions  This is a little better  but not great.","['1ab1dfb037c917574b288d1dc2c686ab23769bf8']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE7350>]"
"a5518a58943988373aac06fd9d2c8001c821cb0d","Remove redundant cancel_preview  handled by stop_action_in_progress","['6d6ef25da47710d7ac630e82dd0c92f6b49c4770']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C66EDD0>]"
"8c936552b73b9e85a7b03f400fc0077269a80d2d","Don't delete selection if copy fails during cut","['0c3cc45dddc697dcb2fdb650fe41da04113173e7']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C66D690>]"
"0c52788843a4efa222f396ef8fe9431dc76f08ba","Fix some type checker errors","['3f3375c1fd0522143bca50b7177e4a5dd7c27915']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D625410>, <pydriller.domain.commit.ModifiedFile object at 0x000002658DBE5050>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D5656D0>]"
"1f171259bb1943168c413686e6736949aa2c24bf","Fix shifted/cutoff selection when melding with negative coordinates  Code intended to prevent errors was also creating an offset between the source and target regions. The source region needs to be adjusted to match the clipped target region.","['0c52788843a4efa222f396ef8fe9431dc76f08ba']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C0F10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D595110>]"
"088b7e9b2dc079943340fe8bb491b102c598351c","Clamp text selection endpoint while dragging  This fixes weird or non-traditional behavior where dragging further away from the textbox when the mouse is outside the textbox would continue to offset the cursor index. It wasn't totally unreasonable  but the traditional behavior is to clamp it  and it makes it easier to select whole lines.","['c46586cc516c0a4e35d4dd7331e12ad33a11ec57']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C66FF90>]"
"454c473eff4a039bbce8e32aa434cee71dfa0bf4","Grab and tweak wallpaper code  I updated the Windows version to use *W (wide char  unicode) version  and enabled it and the mac one  changed except: to except Exception: and tweaked a few other things.  I haven't tested any of this.","['06e2ad41e41306c86cafef914a3853c85f91874d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5DE8D0>]"
"594c378e45d8529d8c61c64f228f2b2673eef7c5","Remove try-except around set_wallpaper body","['b764ab6f45b34f3e2c4ca3618e91c95a7ae79f26']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D54FB50>]"
"44d800d9b3108ef6a84cee86612c354afee09db4","Note an issue with color values changing","['8d7843b383576f47ad660ee1ba5ba2ff8ca6799f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4AC150>]"
"93a1d2674ff85e5ebdecf3b353d9b05c719f9c1d","Clear undos/redos to avoid errors when applying undo actions","['cc2ba1f0431fea52b77eee5349018f1ee4fa0dcf']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C66D790>]"
"67015ae1cab8d063cb4e78252fe37b279be20f85","Add a known crash-causing issue","['48a61d99348797a5086fe82cc544cb6e2e1e867c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D564C90>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D565090>]"
"5be895732d797ad10256e0ccbc7a8c11b3842f30","Remove document argument to Action in favor of action.update()  I'm probably breaking stuff here  by disabling the region fallback  etc.","['dbf6b786597e45104c40b192841e6444598aa78b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C630410>]"
"9c1b617440d9d3e2d99e562c5032a8305c782408","Fix error undoing ineffective flood fill","['5be895732d797ad10256e0ccbc7a8c11b3842f30']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D626750>]"
"4fed90c794b83f37a8c25f07a7510c84216ff431","Clean up  btw backslash was to avoid comment detected as a #region comment which Pylance complained about not having a respective end comment","['9c1b617440d9d3e2d99e562c5032a8305c782408']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5DCA50>]"
"fffd287ff0c1dd812fccc7dcc41e3ec2a3ca26b4","WIP: make resizing the canvas undoable  Resize  undo  redo works  but: Resize  undo  redo  undo errors.","['7d4a4636682fd3eab9385aec89d66e0ae7a34267']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5DDFD0>]"
"9897266a148956a2caf54e34935b211bef6e99a5","Fix error during undo after redo after undo after resize  When you've finally tracked down an issue and to fix it all you have to do is point the cursor in the right spot and hit tab to accept the AI's auto completion  it really makes you wonder about proactive AI coding assistance  and a future with AGI. Or even without any AGI or proactive AI  just having a gutter view that shows how surprised a language model is at a given line of code could really work wonders on a problem like this. It might feel _judgy_  but it could solve problems.","['fffd287ff0c1dd812fccc7dcc41e3ec2a3ca26b4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D61DC90>]"
"1f5457d992f35a677a8e94df51405b26ce3de13e","Fix crash with Polygon tool(s)  dragging from outside to inside canvas  When clicking outside the canvas and dragging and releasing over it  several tools exhibited issues  which this commit fixes.  - Free-Form Select  Polygon: crash with IndexError - Select: useless selection created - Magnifier  Pick Color: returned to last tool before use","['9897266a148956a2caf54e34935b211bef6e99a5']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C62B250>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D595010>]"
"2cf3bc2a7db96e3b053a3d3037e09b5537f5c24a","Clarify known issues","['66222b23844f91fb267063e8b70aab5cc2835247']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D61F650>]"
"ceb79bc5aa9aae13703043485225c2e3fa6ae3b3","Add to known issues list","['2cf3bc2a7db96e3b053a3d3037e09b5537f5c24a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C12610>]"
"682564b6a8196a6b6a93f4014319e2698c648e1c","Replace outdated return & FIXME comment with an assertion","['817b05d2915da5f679389b034dba4fb8e9220752']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C02910>]"
"0b6006325e958e063f47be2cd8ebdfdf6909fb07","Resolve all non-strict mode Pyright errors","['2a35778cbd2458ac0e0da36e6e4d5b8107ef982e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C10B50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D54CB90>]"
"facfd6cfe39708b9c66cf5089ca69ac567e42988","Fix potential error if minimize but not maximize present  or visa versa","['c8b042bae6fecc3596c4ff1bce37e578f8b94dc6']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D54F550>]"
"f54de3f06593b18bd83263890d18256a06f00317","Fix help window layout when maximized  breaking minimize behavior  Maximization is more important  so this is still a win  but this does make minimization stop working and look really stupid.","['f0f9200292b29a8771e3e0b7acae7413cfcf7b48']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658BBE9CD0>]"
"d8d08717296fd217b6648ac722f1453ca23fca38","Catch any errors getting the clipboard data  I haven't run into this  but since we've got a nice localized string for it...","['a20f2c05d73c94f50727571e38be8ad6d0a63708']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5DE310>]"
"4ff90fa8eccbe2b3debcb3b15dce5e31b3681ec2","Add ignore comment for error Pylance gives even though pyright doesn't  With Pyright's strict mode disabled  I got zero issues from the CLI  but got a Problem underline in VS Code from Pylance: - ""Gio"" is unknown import symbol Pylance(reportGeneralTypeIssues)  This also silences  on the same line: - Type of ""Gio"" is unknown Pylance(reportUnknownVariableType)  gi.repository uses DynamicImporter  which I assume is all the reason the type checker ""needs"" to be confused  so I'm not worried about this.","['d8d08717296fd217b6648ac722f1453ca23fca38']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C630290>]"
"77fa6cb444ef1e55205c956025e323fd5aedeb58","Fix error after resizing the document if there was an action preview  If you confirmed the dialog with Enter after hovering over the canvas  previously it got:      IndexError: list index out of range  when canceling the preview after it became outdated in regard to the canvas size.","['cbbaf18945ca8b47f17e82cd7979b61eabedc987']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4E0690>]"
"1cdad17fe9d6698d7bd9f35d0c10228f956075f3","Set a fixed width when updating CLI help on readme  By default it uses the terminal width  which caused the help text to change spuriously.","['77fa6cb444ef1e55205c956025e323fd5aedeb58']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5651D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D565310>]"
"0bed615e74e3c678420e70db9daeef0bf15ecd47","Exit after --recode-samples  Otherwise it may leave the app in a weird state where app.image != app.canvas.image (I presume)  and you can't draw  at least not visibly  and it can prompt you to save changes to the document that isn't visibly open  except in the titlebar (Header).","['0282eb37857f843be00ea0f88ddc209746db9248']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C09F50>]"
"4f4a65c6fe9972d8148895d7bfc3574f4d860b7f","Fix gaps between lines in HTML export in Chrome/Firefox on Ubuntu  This is dependent on the font. In both Chrome/Firefox  monospace uses ""DejaVu Sans Mono"" on my system  but if I specify ""DejaVu Sans Mono"" explicitly  it uses a larger font size (16px  as compared to 12px in Firefox or 13px in Chrome)  and slight gaps are visible.  This fixes a regression when switching over to the Rich API's built-in HTML exporting — from where I'm sitting — but it may look totally different on someone else's computer.","['b4af4032f7275336268cc5e65824794ee1bd7d0c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C624810>]"
"1656c64ea251706203941e7b4515eb5de151a937","Make --recode-samples handle exceptions  in an insanely complicated way","['c9c58f12c6bb91a328a063673bba54d85ef63a48']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C09210>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D611390>]"
"c2ee9ef2df73603a528bb2cd654cbef28c752185","Simplify: don't need a Task!  This still handles errors  unlike a million things I tried before  and can still work and exit successfully.","['cf39357641e20f08c958fb7a7d09ae39e66048e3']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5F5C90>]"
"f5e071f0699b716d6c163982c6f8560adbf8e51a","Fix menus cut off when viewport height is small  This fix works for the top level menus  and but it's unreliable for submenus  just as submenus opening at all is unreliable.","['bf2b471733aa92cc80d81f141bb496085cf9c24c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D54C350>, <pydriller.domain.commit.ModifiedFile object at 0x000002658DBE5C90>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D565B90>]"
"3544e754eaeb90eea9f1049448bd4e5efea3d353","Add a stopgap to export Rich API console markup","['076b4bd681b86d0eb94c218eec7da0e4b450517b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CFE2C90>]"
"6cf59cd79a3915335a8fa454e19b6d4232e08089","Tweak requirements.txt so I can actually install from it  I'm setting up a virtual environment for the first time  and  trying to install my dependencies  I ran into errors  1. because of appscript which is only intended for Mac  2. PyGObject which IS for Linux  but fails to install  missing ""libgirepository1.0-dev""  but it's optional  it's just for wallpaper support. pyxgd is also for wallpaper support  so maybe I should comment it out too. And finally  [dev] is needed in order to use the `textual` command.  I don't know how well this can install on other systems  but at least I can install it now  on Ubuntu.  Also  when the version numbers in my requirements.txt were bumped when regenerating it  I'm guessing now that the dependencies weren't actually upgraded  since `textual --version` gave me ""0.19.1"" up until I set up my virtual environment (.venv)  and now it matches the requirements.txt version of ""0.22.3"". I still don't know why the version numbers were bumped  or for sure that they weren't installed at those versions somewhere in my filesystem. (I hope virtualenv makes things more comprehensible  rather than more confusing...)  Also  now that I'm using textual 0.22.3  the radio button set has arrow key navigation. Seeing this feature missing was what prompted me to set up the virtual environment and (sort of implicitly) upgrade. However  it doesn't work correctly  for the flipped horiz./vert. layout.","['848db8180b2cbd38fe83b7ec22ca5249158499c3']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBF2C50>]"
"6effab854ca5b9a43ea41bba86afb9ad9d0e8fe2","Fix grammar  I stopped at this word and changed how I was wording the sentence haha","['baf2b076d177d85be6d18cf0ce78fba83daa5bb3']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D595210>]"
"f15ce6962cbb564f8ee2ade26e92df16dd35b624","DRY file writing with error handling","['5dd74165bccf388f87905a77797d196ef868f221']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658BE5A550>]"
"74ffc34de4b789ec1da2ae2e08bf99f1bb4670c9","Automatically recover from backup file  - Recover from backup file if it exists for the document when loading   a document via the CLI or TUI  or if it exists for Untitled when   creating a new document. - Reorganize CLI arguments handling into passive and active    so that the active recovery step can use the passive* backup folder   option. (*Directories are created if they don't exist.)  Working on automatically recovering the document  I'm realizing this is more complicated than I thought. Consider two instances of the app (A and B) editing the same file:  - Make changes in A - Open same file in B - A auto-saves after timer - Close B - B deletes auto-save when closing - A doesn't re-create the auto-save unless further changes are made to   the document  because of the undo tracking  which is basically an   optimization to avoid writing to the disk all day while idle.  Also  there could be a race condition where it saves over the auto save before recovering it — potentially — like if the auto save interval was implemented such that it made an immediate call at the start  or if some other app code tries to auto save initially. Or  consider if you:  - Make changes in A - Open same file in B - Make changes in B  maybe before it detects the backup file if the disk   is very slow for some reason  or if you just ignore the prompt.   (None of the prompts are modal  currently.)  To address these issues  I could add a flag that says whether the auto save was written  and thus owned by  this session  and make it not write to a backup file that it didn't create in the current session. But it still ideally would auto save  just to a different file  so I could instead have a map of file paths to bools saying whether it's owned by the app or not and then have a number incremented in the filename (maybe like `.ans~` and then `.ans~SESSION2~`  including ""SESSION"" so it's clear it's not time-based)  adding 1 until it's a file that can be owned by the session when auto saving. But if an earlier-numbered session closes  you wouldn't want it to leave a file behind. Either it should delete/rename its backup file to the earlier number and start saving to that  or it should keep the existing higher number. I guess if looks at the map first  before checking the file system  it shouldn't be a problem. It should keep using the higher number. Would this be a little overkill? Eh  maybe.","['1911b11a136e84a4015008eb64180ff63a9fced1']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5DC390>]"
"b5b302e51f609d1cfe0f87e1831e1829aed0013d","Rename things to avoid ambiguity of term ""auto-save""  ""Auto-save"" can mean saving the actual document you're editing; in this case it means saving a temporary backup file. I might even want to introduce auto-saving of the main file later on.","['6b46d996274991a99d8629e46a152e287b0111a1']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D567410>]"
"edd1c755e10dc5dfbe97b306f12de8e3e1343feb","Fix type checker error by extracting expression to a variable  I was going to add a type hint  but it seems to have figured it out now.","['b5b302e51f609d1cfe0f87e1831e1829aed0013d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4B1310>]"
"c86d8c01ae81572cccd1ffd01133941d95ac47e1","Use bucket emoji for fill tool icon  outside of VS Code  Other terminals may fail  so perhaps I should just stick to the more reliable emoji  but the bucket is much better as an icon...","['edd1c755e10dc5dfbe97b306f12de8e3e1343feb']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D596650>]"
"0d658d4a7f2eff2f6f32bb9926a940fcadb2c5ff","Restore old file path when Save As fails  and don't close the dialog","['e806f25fad6e31cc2746f2703ce43a8213497f76']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5F6F10>]"
"f6bff095d6bffcda71a9882f3fca2f3ae6c0ad2d","Fix a theoretical race condition  and simplify  - This fixes a potential race condition where it could auto-save   to the wrong backup file while the file_path was temporarily   set to the path attempting to be written to    overwriting the backup if it existed  and leaving it behind on close    since the file_path would be reverted momentarily. - save_as() no longer uses save()  so save doesn't need a from_save_as   parameter to change the error dialog titles  and there's no more   conceptual awkwardness due to the fact that each function could call   the other. - discard_backup() no longer needs an optional parameter  because   we no longer discard a backup that isn't associated to the current   document's file_path. - The ""correct thing"" is now obvious enough that I don't feel the need   for the ""Don't discard the backup until..."" comment.   (And of course all that todo junk can go  although the Copy To bit   remains to do.)  It's nice when things Actually Get Simpler!","['ede6ea25b51ee30469da50f4723c41f9e830c156']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D604DD0>]"
"a06cf807e008e434a963243b3a3046172b8a63ea","Fix immediate closing of dialog opened with Enter  For example  in the Open dialog  typing a filename that doesn't exist  and then hitting enter  it's supposed to say ""File not found""  but if the event isn't prevented/stopped  it will also be handled by the new dialog  and you won't even see it.","['b4971a0abf4e6ff5e4c322d5c2fa1219bf320c3c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C6281D0>]"
"ad9983ecfebb2545e85d2db8f1fed0065c32f269","Remove Static() wrappers and disable markup parsing for messages  - This is shorter/cleaner. - This is less prone to mistaken parentheses placement  although it   should give a type error to do `Static() + Static()` - I already disabled markup parsing for two cases where filenames are   interpolated  but there was still:   ""An unexpected error occurred while reading %1""   which was liable to misinterpret things as markup.   Note that anything in square brackets can be treated as markup and   become hidden  not just recognized tags like [red].","['08cef5e8755990a34da18180b17480aa20b2dbc8']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC20250>]"
"30eb9ba38f0cf61681d4afca86e22188c07b9cea","Fix confusing error message after opening backup of the active file  The backup of the current file will be deleted just after opening it. I should probably actually prevent that  but this commit just fixes an error message thrown up when trying to then open another file. It said ""File not found""  but confusingly was not referring to the file you were trying to open  but rather the currently open file.  Repro test steps: Open a file (optional)  make changes  and wait for backup to be saved; open the new .ans~ backup file (discarding changes to the main file)  then try to open any file. ""File not found"" message should not be shown.","['e47c9693b12dea47c49bad80b00abb6c6bb7302b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D610550>]"
"51152faca6a8802a3db22a3d1d18a6a5603c0ee4","Include file path in error messages","['30eb9ba38f0cf61681d4afca86e22188c07b9cea']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D6068D0>]"
"fa173963f6e853d2d2deaed8d401d2a1733decb4","Reuse method to open files from CLI  with in-TUI error handling  Sigh  it didn't even get shorter  because of stupid async shit.","['3af12599dd5e9d386df3f3be61e2bc143ae9a7a5']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658BCEEB90>]"
"e37255fc9813174e43681c15bdddc9a29d16b85a","Reimplement --recode-samples in parallel  not loading into editor  Ooh  more importantly than running in parallel  this actually fixes error handling. I had chmodded a file to be read-only for testing  and this is failing on it loudly instead of silently ignoring an error that I didn't know about! Because it was silenced! That was a bit of a redundant way of saying that  but better to be heard than be SILENT...!                                                              *crickets*","['15980dd4c9bca85905aa03c93bdb0455aa1c3b28']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C633910>]"
"ef409f4756a06d75245cefb5a06e4ac7a6e9da22","Ignore a type checker error with watchdog observer.schedule  Type of ""schedule"" is partially unknown   Type of ""schedule"" is ""(event_handler: Unknown  path: Unknown  recursive: bool = False) -> ObservedWatch""PylancereportUnknownMemberType","['302e5783876aa155bb029645863f674dcadb9dc4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D551510>]"
"d90449e2dee92371fc6e5577939f44c0349fcf52","Fix type errors in watchdog thread cleanup  - `observer` can be None  if --restart-on-changes was not passed  but   the hotkey F2 is pressed. - `is_alive` is a bound method  not a property. It was definitely used   like a property in the code I referenced.  I didn't fix these type checker errors for a long time because:   1. they never caused actual problems for me  and   2. when adding a type annotation `observer: Observer | None`  Pyright      gets even _more_ confused  saying it's Unknown | None instead of      BaseObserver | None. The secret trick was to leave it unannotated.   3. Adding parentheses to make it `is_alive()` also made Pyright seem      even more confused  saying it was Unknown — until I added the      conditional.","['ef409f4756a06d75245cefb5a06e4ac7a6e9da22']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D607DD0>]"
"de4cf01f7372713ee2d828a91e53ef082c42039d","Fix scrolling in editing area  broken when updating Textual  somewhere from 0.19.0 to 0.22.3","['77f631e396d6cb01ffc7117e021dfe5364db2923']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5966D0>]"
"91ad4940632f844b2dcea87a0b0bd5e28c05177b","Detect file as ANSI if it includes tab  bell  backspace  etc.  This fixes opening/pasting text containing tabs (but not escape codes)  for instance if you want to copy/paste a table of characters  as I did.","['7ce6cc08ca06b8487734e9f1701359aa23c0c54f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBEFD90>]"
"6a650b7547db128679e51695148b7ddaf0ccf3c2","Fix missing last row when loading ANSI file not ending with a newline  This fixes loading samples/4x4_font_template.ans  and I should be able to rebase my code for more efficient ANSI file saving  where I was also running into missing last rows.","['91ad4940632f844b2dcea87a0b0bd5e28c05177b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C2A97D0>]"
"7baba86a68507479af2a3bdd78ff0e1870973358","Fix type checker errors by making a return type more specific  With the more general type  it was giving:    /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:38 - error: Cannot access member ""markup"" for type ""ConsoleRenderable""     Member ""markup"" is unknown (reportGeneralTypeIssues)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:16 - error: Type of ""markup"" is unknown (reportUnknownMemberType)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:38 - error: Cannot access member ""markup"" for type ""RichCast""     Member ""markup"" is unknown (reportGeneralTypeIssues)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:38 - error: Cannot access member ""markup"" for type ""str""     Member ""markup"" is unknown (reportGeneralTypeIssues)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:798:16 - error: Return type is unknown (reportUnknownVariableType)","['bb8aff84e9191e76443a50697956c3f50440de95']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C66D1D0>]"
"1cdf57095570f04eedd50ee39d6cacae19b2dd72","Handle minimum height at end so it no longer needs one row initially  Regarding ""Initial document is zero wide to avoid an extraneous character at (0 0)""  this is not necessary anymore since I (recently) changed it to set  rather than append  values. Regarding ""...but needs one row to avoid IndexError""  this commit removes that constraint. It could now be initialized with size (1  1) or (0  0) or even (1  0) I suppose  although that's not really a contender.","['0d2840d5da2d966089d8541847208adcf4c46818']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0F7C10>]"
"9653bfd9d8260f0f5cd7688a3199e90583048061","Handle file extensions vs PIL format IDs  They usually correspond very closely  like .png -> PNG  but are are more distinct for some formats  like .jp2 -> JPEG2000.  - Handle formats like JPEG2000 that differ in name from the extension. - Bring my own file ext handling in line with PIL: use dotted lowercase. - Raise an exception when a file format is detected but not supporting   for reading or for writing  depending on the attempted operation.","['1176fcee73c248266790c25dc6c87a137abc7d56']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D567F90>]"
"c24c164004702c5756b94174cafdc8cfa73f93c1","Add error handling to Save As for encode_based_on_file_extension","['9653bfd9d8260f0f5cd7688a3199e90583048061']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5E2AD0>]"
"1cd6b24e33dce48a73b95d38a118835db9c8aeda","Don't close Copy To dialog if there's an error","['c24c164004702c5756b94174cafdc8cfa73f93c1']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBEEED0>]"
"9ad1933310b733e388b674ab9a5b28e72445719c","Improve error handling for unsupported format reading/writing","['1cd6b24e33dce48a73b95d38a118835db9c8aeda']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC27090>]"
"7bc86bc483e9e1a6c7f5a893365c16add2094412","Fix error handling for decode_based_on_file_extension  - UnicodeDecodeError was caught in a more general error handler;   now it's allowed to reach the more specific handler. - UnidentifiedImageError and FormatReadNotSupported were missing return;   now it's not caught there so it doesn't need to  as the exception will   interrupt the control flow.","['9ad1933310b733e388b674ab9a5b28e72445719c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5DFA50>]"
"79cbeb9e303cf18b6892e46c23601f3babd39a7e","Fix corrupted upper left pixel in sample file  (This bug has since been fixed.)","['7bc86bc483e9e1a6c7f5a893365c16add2094412']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC24850>]"
"cdf30c49f98299d8350bfe08cc5f3c7b7b899582","Fix 103 type checker errors by annotating height (and not width)","['e045e6e9f99e56418367ed89c337c0d1de0d43d4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AF9D0>]"
"f00bf63feda678f879abcf27abd06b86e4145d8c","Ignore .flf files for spell checking (even though there's no issues)","['6d1b864865c5931faf2db7a5a131ba29cf642c7d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE64D0>]"
"4589d9a147b53e369475ea67e7f7a368f0c275ea","Clarify _fixFigChars with comments  Within the span of like a day I forgot that FIGlet fonts can be proportional and came back to this code and was confused why charWidth needs to be a dictionary. Well it doesn't NEED to be  it could be implemented differently  for instance by fixing the height first  it wouldn't need to calculate a number of spaces for the blank lines — but how it's implemented  the width fixup could be disabled  and the height fixup would still work. So even though the code would be a little simpler  I'm not sure it would be better that way.","['ca5a51bb6c44f1f9900f9bb65d1c22e707b32a2e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C09B90>]"
"601e50d5b5ed36b3fabd11afa704150df89df937","Give error if you try to load HTML/SVG  - DRY: Make decode_based_on_file_extension use format_from_extension. - If you try to load .html  .htm  .svg  (or ._rich_console_markup) file    show an error instead of loading as text. The text would be much   larger than a document you saved in this format  and it wouldn't give   you what you expect  unless you're wanting to load an arbitrary text   file for viewing  and for some reason choose this program to do it.","['259ce5f31151690e9b9d5a74d5bc69ca3fd131d2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C62AD50>]"
"6a3ab712a5743af2a134d14a8af12db37e4a4f81","Include error traceback in message boxes  shown by clicking Show Details","['498b4ccd0aa53202e1a7bc97ba66c2769f19af0d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5975D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C5C3F10>]"
"55419d671e53dd0d43a2238836b810fe7fadca6d","Fix API breakage from changes in textual 0.23.0","['6a3ab712a5743af2a134d14a8af12db37e4a4f81']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C09110>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC0A490>]"
"8458ccf3c9a2e400f2971b806c2471f202b1ced3","Visualize cell bucketing for debug","['f17b180546fcddc15a07ebe7ec07a398cced75f6']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC09B10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D5DFD50>]"
"d618cab0c9f9b4deae9e8aa25a6e0aac2f4969f6","Make debug visuals line up when grid origin is not at (0 0)  as is the case with the pathological SVG test case (combative_character_grid.svg)","['8faaac8cf82aeefd641ce8173d3b060a9a633841']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C624690>]"
"d323c25ed44ab43a99279b8884474d5cac4dacf8","Add debug markers for grid bounds (min/max)","['d618cab0c9f9b4deae9e8aa25a6e0aac2f4969f6']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D11FA10>]"
"453111269e7164199ca4fc0d3bed2aed19f7e905","VS Code: fix auto-imports for textual modules","['b4f958623d44e0c374dee37d540e40ab1f51a505']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE5B90>]"
"14725279c968eec3895e19132c9b373093966d7c","Got it working  It handles the pathological character grid test case SVG I devised  as well as loading the SVG as saved by the app.  It's a little weird that I managed to get the pathological case working before the simple rigid grid  but it was what I was shooting for  and the main problem with the rigid grid was the spanned rects  which I didn't think of when making the test case SVG.  It does have one problem left; characters that are wider than a cell  when saved as SVG  take up two cells  but in my SVG loading code  they're just placed in one cell  so  when saving and loading  it shifts content to the right of the wide character rightwards  expanding the region of the background from the wide character's cell. But it converges now.","['ee224d1a82a7486b281fb160db664e1b58fb423c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5672D0>]"
"53928645521cee72ac6d72fd8126b753b978e00f","Update readme regarding SVG loading  Not sure if some of this should go in Known Issues  maybe with a ""see Known Issues"" reference  but I might just fix these things soon.","['b88b5cdfa07ae8718f8fa7fc2a90baad9538266d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D564A90>]"
"445d29268fa99214ba0eef32755712a9100c7a57","Fix type checker error","['53928645521cee72ac6d72fd8126b753b978e00f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE7910>]"
"e9755637d6f94272bf77879854a6a10a107235f2","Update Textual to 0.26.0  Both issues I opened have been fixed! :)","['ab45f40e1552b3343e74b2dfdfecfbd5cf741e26']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4B3B50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC0ADD0>]"
"0edd1712336d5a1e4d73375c7fa00dfeb3416bb7","Clean up imports  I had kept these around because several of these I'll want to use  and the auto-import feature wasn't working  but I've since found a fix for that (in 453111269e7164199ca4fc0d3bed2aed19f7e905). I'm also adding rich here to fix auto-imports from rich.","['e9755637d6f94272bf77879854a6a10a107235f2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC392D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D564490>]"
"85ec3627cdd264fa4e815e42c34c96c6d10a89f5","Fix Path vs str type error  It didn't actually cause an error at runtime because format_from_extension just uses os.path.splitext  which uses os.fspath which converts Path objects to path strings.","['0edd1712336d5a1e4d73375c7fa00dfeb3416bb7']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C66E5D0>]"
"7f28470f78752be59158a3a4e3d30ab3c3dfe389","Note an issue","['04d0ca80fd22a665ed13f974424e0f8b55de5f92']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C6246D0>]"
"2aea62bff5395985e314c2d47166f090014d51c5","Fix NoMatches crash if you tab to the color grid and then use arrows","['d88885419c08659b798121dd6084154bdaf60624']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5F4190>]"
"cf979114a9c930e1b98b897c95a6cd749c9877dc","Refactor: remove class LabeledInput so it's easy to get at the Inputs  Now that I'm creating the inputs dynamically  it doesn't help to have a class for labeled inputs. And `self._inputs_by_letter[component_letter] = labeled_inputs[-1].query_one(Input)` failed  because it's not mounted yet.","['0fdbce1f77111a59552d3d293579e13abce1d30e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C11510>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D5FE550>]"
"6f1476be8f6a2cb1714935e0f2d7bf2603f35945","Handle min/max in IntegerInput  and fix flicker and invisible cursor  - Handle validation in one place. - This fixes a flicker when typing an invalid character. - This fixes the cursor becoming invisible after typing an invalid character  when the cursor was at the end  and thus the length of the text shrinks to where the cursor further to the right than the end of the text. (I'm guessing that the cursor position may not be updated in some way.)","['3507d4267ae126add78602996ab4350bfc6a8bdf']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C02FD0>]"
"c0f088dd4df0b7f48b5554e34532cacea118ae93","Hide ""Expand All Visible"" button since it's confusing  - I wanted it to expand all  not just one level   (but named it according to how it ended up functioning.) - It's not that helpful since the Inspect Element feature works great. - It's especially confusing now that there's multiple tree views.   It doesn't affect the Properties view  but it's not visually tied to   the DOM tree view except by proximity. - I'd rather make the DOM tree default to (mostly) expanded  rather than   have a button you have to click  anyways.","['b85fba8f1592d2ea6d54b17269dc96fd8b7d64b0']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C11D0>]"
"e1d5739ec8fee843f0d69f6b51f550e24fbdf16f","Use tabs for inspector details views  TODO: fix bottom of contents cut off when scrolled to bottom in TabPanes","['c0f088dd4df0b7f48b5554e34532cacea118ae93']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C0590>]"
"177cae974cdd7c7a9baf0ffe46d360cc95062d1d","DRY and improve error handling for getters  - DRY adding nodes with enumerate() vs dir() - Don't show the error message as a quoted string value   (This was super simple  but ambiguous and potentially confusing.) - Make the error handling look nice with colors","['ffbe362fe47a833c2203487279de8f8a45a03e67']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D54E1D0>]"
"f6983ea5f782147288f671bb1c71a0f91719f6a8","Fix and ignore type checking errors in inspector module  Also  object | None is redundant.","['40b725f06b1b63f4abd7466017e9a7d6ab97d24a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4AB310>]"
"5d3383d960a551a1a3fa4a0507ae240288f2b37b","Use a unique sentinel value instead of Ellipsis for the ellipsis node  This fixes the expansion logic applying to ellipsis objects in arbitrary places.","['b52c1b93e957c09774ca3ff8bfdfd6381123b6d6']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5AE9D0>]"
"fb4ff044eaea1b04ec035573982ba0d17afc6614","Fix broken (escaped) markup  and add more styling  - Fix accidentally escaped `[link]` markup   (broken in 1dbf02e94158969061205483d1473bc694d6f984) - Using Text type will help avoid this problem in the future.   Don't just make it work  make it so it must work!   Make it strongly typed  not stringly typed. - Use `css_identifier_styled` instead of `css_identifier` - Add colors to exceptional case handling","['75c15b97b553fc7e27700a31decddb40c81a7d56']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D626F50>]"
"efc7130fcad0d255b372637242617ffb1da89a90","Fix doubling number of nodes added when clicking ""...""  - Fix bug where the number of nodes added when clicking the ellipsis   node would double each time. - Fix duplicate ellipsis nodes when collapsing and expanding. - Fix other nodes being added when collapsing and expanding.   New nodes should only be added when initially expanding  or when   clicking the ellipsis node. - `count` now includes filtered out keys.","['03020d767a6a14b3edc9ccfe0a3a7f525e61daca']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C41FDD0>]"
"247f78d65771fb3e82f278bc887e984a51f1e601","Ignore two type checker errors","['f9cceefcddf57801b3a8a1aabfe2ab026dfac219']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCBC8D0>]"
"fc279f0574bb602a89a8925637071eac33f11ec1","Fix type checker errors and ignore one","['62fb218a1a21bb2630664ce0d4edc53643ade0ec']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C62BE50>]"
"ef107b0da3bcbb3a17ee65a5311f086c2438d5d4","Add types  and workaround list[str | None] return type","['bbb75507631c53110376c9e694370f3a04b7b180']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBEDB50>]"
"bae5eceb511fad01a2dc76adc62fe3bf9beff002","Narrow exception catching","['ef107b0da3bcbb3a17ee65a5311f086c2438d5d4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D607B50>]"
"605a048fc70c0f5466a92005e6e0073ba92609e8","Launch code editor from inspector panel  Disable stdout which crashes when run in Textual due to StdoutRedirector","['99b4dfc10ff9d18b2105926209711936619ac671']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D604890>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C4A9D10>]"
"3364e11b5d61b9e60479d4e1d5287df8e2f233e7","Convert to relative imports  It no longer runs except with `python -m src.textual_paint.paint`","['c4c1572dac08e782533290d264a17cd6ad64d471']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CFE3290>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D13E110>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC3BA50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D5646D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D5A1010>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC9A010>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC9B290>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC9A250>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC9A850>]"
"349f87c3e7bc5b3c6c36d295457a36d87ad094f3","Disable automatic updating of CLI info on the readme  This caused an error when running from the console entry point  as it's not intended to work in production/release.","['512fe69e9e9c62d613bf1dc8d5734a4b3c20c3da']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC3DE10>]"
"4e1f11ab23091a6b596068cdffbfe7d6e5a8f625","Fix expanding directory tree to current folder  in file dialogs  - This regressed due to updates in Textual 0.25.0    because DirectoryTree now loads directory contents in a worker:   https://github.com/Textualize/textual/issues/2456 - Directory tree expansion may be more robust now  although it's using   more internals now  and it still needs timers for whatever reason.","['9f7f19851880c25596b297891476ce8467de774f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBECE50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658DBE5450>]"
"93d176e656a20d0c98fa7a0440ec2f316873ffb3","Pyright: ignore build folder  Python files get copied to the build folder. It's kinda confusing to see type checking errors for old versions of files.","['5eaabd67540253cba4508004f0ef25d4a3c8af87']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4DB0D0>]"
"bf675e4c5156e4758faecd128a7f9b7ac15f154a","Fix two related type checking errors","['93d176e656a20d0c98fa7a0440ec2f316873ffb3']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C661DD0>]"
"8911c406bee89e5109ee37be29fc31567caa68d6","Add error handling for inline style editing  breaking ""(edited)"" marks  Using .merge() isn't tracked by the call stack recording (yet)  so it can no longer attribute inline styles to editing with the inspector  but this lack of tracking was already a problem  it just highlights it.","['8278e5da94a986eca9a27a1c47b7159c0657d010']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0F7D50>]"
"8ec9056bdf0c6219fb3f1408063dc31cdb12b14a","Fix ""Nothing selected"" text getting pushed down in Keys tab  This is just a workaround.","['a690a45a98729bfaa7c3c327d5f17ca97ac9ae3f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0F7390>]"
"0a176fc1a4469c313cf57a9f4620ab5152975a8d","Prevent unloading document if save fails","['f2facf8a6816db285e0a396e2b3b0d1645db8bd4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE6C10>]"
"29e9e7a384703d306cf42bdb2d142ba68904c979","Refactor some `encode_based_on_file_extension` into `encode_to_format`  This avoids duplicately detecting the format from the file extension in one case  and in the other case  avoids using a bogus file name to implement a default fallback file format.","['737115a00b1c61fb71ba5c4f392960bbf8b2c920']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC98110>]"
"572d60076f033d271e48fb1140636234c2315b14","Duplicate error handling for reloading after information loss on save","['faa41d07b27e0c103f626d1332e7805c28fd6e3b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA2050>]"
"7b32452066d71d49bae1b3af47d25d54e2e6c3d6","Abort if error occurred when reloading to show information loss during save  I'm not sure about this...","['572d60076f033d271e48fb1140636234c2315b14']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBECF90>]"
"53a733ae32ea418420ce23214993670aebd6f83c","Suggest installing from requirements.txt  I had to blow away my virtual environment  and installing from requirements.txt worked whereas the existing line didn't  I guess due to the fixed version number of textual. I don't know exactly  but it seems pretty silly to try to maintain this list of requirements separately.","['93f98a89e78e68c8fc553ca7489b5540dbb984d9']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D607C50>]"
"87e2ff9b5fa1e9bd6b64ccc22b84c44fe0e5461e","Move one-off scripts outside of package  (breaking relative paths)","['ee2fce31661bdd5f6e87c58a603710a3f455e6cd']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBEFF50>, <pydriller.domain.commit.ModifiedFile object at 0x0000026592C03110>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCBF090>]"
"f194583760bca211cbf6ce63b517d6e2753c0fe6","Fix error due to trying to reload after saving non-openable format","['53a484f978ad0d052cecd40913a4687ee78ed579']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D62E910>]"
"6b9c01f196360cb5816ecfdea49e3fb9e98ae099","Fix handling of read-only formats (like .cur)  When attempting to save in a format only supported for opening  it tripped the assertion here  which I'm removing. (This code was a little complicated to reason about  and I thought I was oversimplifying  when restructuring to handle the overlap of warnings  but I couldn't place what case I was missing  until testing this.)","['e43eb7149cf2dca65a6cd7b7a0bdefdc2edbfadf']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D566510>]"
"b6bea36590927e1cb6d2a0d536482b1273c081d3","Simplify: avoid passing fake format ID for unknown format case","['6b9c01f196360cb5816ecfdea49e3fb9e98ae099']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D565550>]"
"cd1161d454d907118f2173195fc7d74e58c6a687","Disable writing debug.svg","['46e7e9bb30f0f6a92168f22b6471ea05ab4b9276']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE4D90>]"
"12d579592ee7cbb3c58a9b5d4c2f841c8de4cf97","Fix exception handler catching wrong exception","['2e022bdfe16549db8cde107223d0e2359d33942c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5E0F10>]"
"a2000e73749a23f65d521bb777936fd9a8e9c69a","Recover from backup file after Save As; fix backup files left behind  Note: ""the backup file will be deleted on close"" was no longer true since making it check `self.backup_checked_for`.","['12d579592ee7cbb3c58a9b5d4c2f841c8de4cf97']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C0B350>]"
"3a0552ada6d6dff22160433044cb7b728187eca2","Fix wrapping focus within dialog windows (with Tab)  (broken in last commit)","['c944a74f8d7a95ba2e375956972740dde830ddcb']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C66FA10>]"
"645f1ec12741c8046c09b079c6c3273e2bf0a439","Add missing duplicate error handling for Paste From","['da85d319e433c90822c1fecce27433a996f61ea3']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC9A390>]"
"6a4351d824b324f0a2583b0bf23bcc50669380ae","Handle arbitrary exceptions when deleting backup","['6d5ffabcfb410adb80da8eb638acf67008d65543']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE5610>]"
"489bd95a2080c001274c0eb82901b2c3513e8962","Ignore permission errors when deleting backup  and improve error message in the general (fallback) case","['6a4351d824b324f0a2583b0bf23bcc50669380ae']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC7F210>]"
"c97203e8829e283a5ed5a4daf599b2e075b0b025","Add more error handling to Get Colors","['489bd95a2080c001274c0eb82901b2c3513e8962']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC7F390>]"
"54f29eabf11d6e62c260349cb35cfdd4518cb794","Fix false positives and false negatives for when to populate file name  When opening the Open dialog  it shouldn't populate the file name input  but when clicking a file  it should fill in the clicked file's name.  The `_expanding_directory_tree` flag gave false positives: - When opening a file in a directory the program doesn't have permissions to via the CLI    such as with `python -m src.textual_paint.paint /root/nonexistent`    opening the Open dialog  and clicking a file  it wasn't populating the filename input    because the flag was never cleared if it couldn't find (access) the   directories and file matching any of the path parts  working down the directory structure.      This was broken in [b3ca55a3b1430c77f376c2fe9eba9668b337959f] ""Use new callback to remove race condition""   but before  it just cleared the flag after a delay  so it wasn't a good solution   It also gave false negatives: - When opening the Open dialog  it was populating the name input field   with the file selected programmatically with `expand_to_path`    instead of leaving it blank.      The automatic expansion was broken in [e9755637d6f94272bf77879854a6a10a107235f2] ""Update Textual to 0.26.0""   due to changes 0.25.0  since directory contents are now loaded in a worker.   This flag's behavior was broken since rewriting the code to handle asynchronous directory loading in   [4e1f11ab23091a6b596068cdffbfe7d6e5a8f625] ""Fix expanding directory tree to current folder  in file dialogs""  An alternative I considered was to create a new message such as `EnhancedDirectoryTree.NodeHighlighted`  but let's call it `EnhancedNodeHighlighted`  then to have `on_tree_node_highlighted` in `EnhancedDirectoryTree` which sends `EnhancedNodeHighlighted` always with `from_expand_to_path=False`  and then do:      | # Suppress EnhancedNodeHighlighted with from_expand_to_path=False     | with self.prevent(self.EnhancedNodeHighlighted):     | 	self.select_node(node)     | # Send it with the flag set     | self.post_message(self.EnhancedNodeHighlighted(...  from_expand_to_path=True))  The solution I settled on was to add an `on_tree_node_highlighted` method to my `EnhancedDirectoryTree` for the purpose of clearing the flag  with still a further delay so that the app's `on_tree_node_highlighted` can use the flag before its cleared.  (I left `_expanding_directory_tree` in at this commit for comparison of the behavior. For a fair estimate of the complexity of this change  include the following cleanup in the diff.)","['1b8b07def943491389cfb9fc1b73b1d13a004c7a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0F7950>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC87850>]"
"16f4bc0a88342159a29da9036b30cf039e14547d","Fix some mypy errors (and a couple pyright errors)","['dd4fea1e783b10ecb27f1faaae606a7cb23656b2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026588307E90>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC9A750>, <pydriller.domain.commit.ModifiedFile object at 0x0000026592C13650>]"
"6f5cee0f7c8397c4a21282dd2699add2056aa5f4","Disable reportUnknownMemberType Pyright error","['f50aef18e7451720ec69d197cf45f97bda8ac8c9']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D607D50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D605D10>]"
"87f1f50f06b5538652ab88d76b326193bb8863a1","Fix some stupid pyright errors","['6f5cee0f7c8397c4a21282dd2699add2056aa5f4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE78D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC85D90>]"
"1ce0487a52b971debb5e258a9dfeb82434b60339","Fix reportOptionalMemberAccess errors for width/height","['6c1b994598dfe82287a78e5eea13b2552298d12d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D5664D0>]"
"1c737fada2783b4527ce5eff8c39d7785c5a548f","Avoid shell=True and fix mypy errors about mismatching type for `args`","['1ce0487a52b971debb5e258a9dfeb82434b60339']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC9BB10>]"
"d5669f434f80eac7b76680b124144dab4f41a0a6","Fix type mismatch in unused code  error: Incompatible types in assignment (expression has type ""None""  variable has type ""bool"")  [assignment]","['0a6fb29e1005db7dbdef51f1debd558955e76b77']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C12C90>]"
"96b2d08789fa8e46c76eec96575e6007d628cae4","Ignore all but one last Pyright error  (on pyright v1.1.314)","['26cf8c3e642b77b55ccdd86c979d34121454560f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCBC7D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCBE2D0>]"
"f21899fd1d9c15733fc4ee03e6e85df058d138b1","Use `LineFilter` to avoid private `_segments` access  This fixes the last pyright error (on pyright v1.1.314)","['f6a40028e882df7764f6283b6af71cf39ae3e5ae']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C02AD0>]"
"15b35eaf5c28ebcb15b9daced1163850241f91ff","Fix new errors after updating pyright (v1.1.314 -> v1.1.317)  → PYRIGHT_PYTHON_FORCE_VERSION=latest pyright  added 1 package  and audited 2 packages in 4s  found 0 vulnerabilities /home/io/Projects/textual-paint/src/textual_paint/paint.py   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1173:64 - error: Condition will always evaluate to True since the types ""Never"" and ""None"" have no overlap (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1214:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1217:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1220:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1223:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1229:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison)   /home/io/Projects/textual-paint/src/textual_paint/paint.py:1233:26 - error: Pattern will never be matched for subject type ""Never"" (reportUnnecessaryComparison) 7 errors  0 warnings  0 informations","['f21899fd1d9c15733fc4ee03e6e85df058d138b1']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC7E810>]"
"321dd1284f9cf1ebb4b04033f61191aa1de6856e","Move ""type: ignore"" comment now serving a different purpose  Before this was presumably suppressing the `self.app` bogus error.","['a0f837aad71e34b2c74a424edf61acd9fdf40f49']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC7F7D0>]"
"82dd98d8cb5a0bb6bf4b54401a1d51c40d062c8a","Fix invalid assertion on mac  os.name == ""posix"" (!)","['321dd1284f9cf1ebb4b04033f61191aa1de6856e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D567110>]"
"5c7272db913893a40a7053a02d9855ce3295776e","Clean up Tk root widget  I was hoping this would fix the Python rocket icon showing in the dock on macOS  but it doesn't. It still stays until the program exits. Might still be good to do though.","['e2308c2a912a255584da29e0fbc62360129956e1']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D566650>]"
"f865acd56c60508b82de9074806dbfd19827f1d3","Fix error handling for Set As Wallpaper worker thread","['8e7113e1b566d74397632f65092c1285f4999509']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA1850>]"
"6864790efb90bf55b553ca434a6d6e4e1c551a57","Improve error message when opening binary file in Get Colors dialog","['288774aeaad9d458388da0fe1c6dadb9007d5b97']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA3FD0>]"
"ebab889eaf4e8c1bdc2140a166bfa86a35ab82e3","Ignore 'Type of ""get_current_worker"" is partially unknown'  $ PYRIGHT_PYTHON_FORCE_VERSION=1.1.316 pyright WARNING: there is a new pyright version available (v1.1.316 -> v1.1.317). Please install the new version or set PYRIGHT_PYTHON_FORCE_VERSION to `latest`  /home/io/Projects/textual-paint/src/textual_paint/paint.py   /home/io/Projects/textual-paint/src/textual_paint/paint.py:39:28 - error: Type of ""get_current_worker"" is partially unknown     Type of ""get_current_worker"" is ""() -> Worker[Unknown]"" (reportUnknownVariableType) 1 error  0 warnings  0 informations","['e0e0ce3cb1b3cd973c9ebe988f9ae66fadc6ee02']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D1980D0>]"
"aad51d2978298132d063a561f9b28c5035c687b4","Note Ctrl+V issue in Windows Terminal app","['4383a882ee4a20e967a4d1345b49766747d5b31a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C02590>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D4AF150>]"
"c70f3e35e378a8bf3b114a6552579f14b647db7e","Note powershell prompt/TUI clashing bugginess","['aad51d2978298132d063a561f9b28c5035c687b4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBFF150>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC847D0>]"
"bc3dba29fc45d66cbff359dea9b954f3f28c3b19","Reword prompt/TUI clash bug description and clarify cmd vs conhost","['c70f3e35e378a8bf3b114a6552579f14b647db7e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C02B10>]"
"c5809c3695f8fc43d622554739e3b2ccaa265f47","Confirm Ctrl+V fix for Windows Terminal  and list steps","['a44d5b769543050083c455b01f3c291ffe114ca9']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D101210>]"
"efba3fb54c608c88d4889bb4f65afd10db2e04ba","Use absolute URL to fix screenshot on PyPI","['da0e5e52da6f4e78adad071fb5c755642e602d29']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5A1610>]"
"3b42656f487d87d0c330018bcfbaf80c42a0f48f","Add `less` pager to sample gallery command  It fails to display the 4x4_font_template.ans but other than that it's fine  and that's not really an artwork anyways.","['65ef282148ba451530f2c4d0c496f5aac64d171b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA1790>]"
"833f0fac48e8108a6a41f70b4e158a761081bffb","Recommend pipx for installation  Closes https://github.com/1j01/textual-paint/issues/3","['272b8c5d57e886f72df55da199fb130aa474a5c7']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D605190>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCA6A90>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C62A510>]"
"e2005015183e749d23a0f1baf0118fe6416901ce","Ignore some private accesses  It's fiiiiine... (until these things change  and the type: ignore comment starts hiding an actual problem)","['38c40f4b778c6f2d46dd55a536ee31fdc3de8d45']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C130D0>]"
"eeef27e99b382b2d9d80ad8652c1548a43eb2f2b","Disable ugly debug styles","['3e2ded8abd83a9e730b269c9a380956b3430787f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D6050D0>]"
"bf8b60f5e0c3336e07b122e81a63dc6ee5581939","Show directory better in case of error","['ce3def0ec5167fc8008ae24ffd4266a307f4a4fd']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA4AD0>]"
"9c2b48ec216ca91468adadaeb33e62413e67c2f5","Fix --restart-on-changes  This fixes ""NameError: name 'PaintApp' is not defined""  PaintApp is only defined during type checking (i.e. if TYPE_CHECKING). It would be nice if the type checker warned about usage of such vars outside of type annotations.","['d8bc66d610f6bb58f597a1169753966bb2d0583a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C428410>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C628490>]"
"5441c0d3b0e118cc3f6d7411e5efb65ff4cbcb9a","Extract AnsiArtDocument and friends to files  This fixes the gallery app's --help  because before it was importing the ""paint"" module  which imported ""args""  which parsed arguments for the paint app instead of the gallery app.  This is also a refactor I've been meaning to do — since the very beginning  really — and it would've been a lot less trouble if I could've done it from the beginning  but I couldn't get imports to work. Yeah  really. Sounds pretty stupid 'cause it is. Python's module system is terrible.","['9c2b48ec216ca91468adadaeb33e62413e67c2f5']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CFE2E10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D140790>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D140550>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C66DD50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D18EDD0>]"
"f1d6b266aa1692c3080961fde0ad3879e172576b","Fix multiple error cases reached  With `textual run --dev ""src.textual_paint.gallery foobar""` it output:      Folder not found: foobar     Not a folder: foobar     No ANSI art (*.ans  *.txt) found in folder: foobar      NOTE: 3 errors shown above.  Now it correctly outputs only:      Folder not found: foobar","['5441c0d3b0e118cc3f6d7411e5efb65ff4cbcb9a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D140990>]"
"1df201ae62a7f7a241ba7477b9200cd22413739f","Check earlier for if no paths were matched  This could make debugging less confusing if the nearby debugging code were enabled and there were no paths found  but also I'm planning on changing how gallery items are loaded  making it load progressively  and decoupling this logic from the UI helps prepare for that.","['70afa25c4bdf9b0a788879037e6feb7d37b916e0']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D62D250>]"
"9a0a2c4f29bf72cd8a26871fa22cebc043d2250e","Virtualize scrolling in gallery  - Make it more efficient by loading files progressively. - Remove the HorizontalScroll  and instead position items absolutely  animating offsets to imitate the movement of scrolling horizontally.   - This fixes the left/right bindings not showing in the footer  due to ScrollableContainer's hidden left/right bindings.   - This also removes the possibility of scrolling half-way away from an item.   - This also fixes a problem where you could lose track of the currently viewed item when resizing the terminal  due to the 100% width of gallery items not jiving with the absolute notion of scroll position. (If the scroll position were stored as a fraction  it wouldn't have been a problem.) - Simplify the keyboard navigation logic by storing an index into the gallery  instead of having to figure out what item is centered.","['1df201ae62a7f7a241ba7477b9200cd22413739f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D141D90>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D141DD0>]"
"4456455c4da074c87c7b0fc56a7356bcc99b5b49","Fix usage of incorrect index  The dict is sparse  so its indices are not always the gallery's indices. This fixes the behavior when passing a file as an argument.  (I already fixed this code and must've undone it somehow! I was losing my mind over here!)","['39f6eca27a2d11bd82a1300afa192f8605b03b87']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D604750>]"
"bcfddbe2fad0c2256f98487a15beafb823e40c48","Add first baseline for visual regression testing  It works!","['95256a411a6254fef3fe4ae9fa7056a8175e5abc']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4DAB90>]"
"f09f5fbf5544a2c806a806cd1e3a1c602241bf96","Test light and dark theme variations with a pytest fixture  First I tried setting PYTEST_TEXTUAL_PAINT_ARGS as an environment variable  to be interpreted by args.py  but it turns out args.py is only executed once  not once per test. It's not using subprocesses  only importing and reimporting the app code  and instantiating new App instances  so parts of the code that are at the top level of modules is only evaluated once.  So I found a new strategy  of importing the `args` object in the test fixture and modifying it directly.  I also realized the --ascii-only option permanently modifies Textual's widgets and borders  and my own widgets  for the life of the process  so I'm holding off on that one. I should be able to make --ascii-only mode more dynamic  and could even target it as a runtime toggle  as a goal  since that's basically what I'll need to achieve to get it working for the tests  but thinking of it as a feature is more fun.","['7ecbe350244a64c36b3e7840a4cf26e1b39d31f2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C0AAD0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D4AF1D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D165A10>]"
"8a4ca8d38027b45258e01e79e6c55e82e14016d5","Fix toggling light/dark mode not affecting file/folder icons in tree  I already fixed my first bug caught by the snapshot testing! These variables were intended as constants  but were being mutated. I recall writing it as `prefix = (...).stylize_before(...)` and then moving it to a new line when I realized it was mutation-style method  not so much the chaining-style factory that I wanted  but I conceived of it too much as a stylistic distinction in the moment  looking back. Mutation style means mutation!  Side note: tests also showed a spurious change of a cursor blinking. I don't really know whether that's in this changeset or not  because the workflow involves re-running the tests to update the baseline  and the nice visual diffs provided in the snapshot report aren't available when viewing the commit diff. 1. If the SVGs were separate files  I could see the diffs on GitHub    or in GitHub Desktop  and maybe some other Git clients.    It would also make it a lot easier to simply view the baselines     which is useful in general. 2. It would be nice if built-in components didn't cause spurious diffs     including the Input's cursor blinking and the Header's clock ticking.    I already removed the clock from my gallery app  because it's a sort    of trivial decision  but Inputs I'll have to reckon with.","['f09f5fbf5544a2c806a806cd1e3a1c602241bf96']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA7A10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C66CB50>]"
"90f52f065563704e7881988cf0c40fd4f338c1d6","It's not flaky... it's really the dark mode tests that are failing","['278490f7d5b65ab54969866f3ea3d49e521f3195']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C0BBD0>]"
"1b9cfe51b39161d5e0a6e92bd33f47275bf37430","Fix dark mode tests failing to open dialogs  This was kind of mind-boggling  narrowing it down to dark mode  and then to dark mode *but not CSS*. I kept narrowing it down  and looked into how dark mode was implemented  and finally figured this out. `app.call_later(app.refresh_css)` in `App.watch_dark` causes a timing issue.","['90f52f065563704e7881988cf0c40fd4f338c1d6']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C0AA50>]"
"628170d213c7f8dded9d48b166bacc3537375e63","Test error dialog  It's pretty ridiculous in the expanded state  but better to show it. Also  the button text isn't switching to ""Hide Details"".","['faa9cefe852c998b80c0450d377d104df01b8b0b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D18D2D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D18EA90>]"
"ad9ff303f148d807304dcaedbf39261654166f1f","Update fixture docstring","['3cc70b6e4d4f060ae88f97a4885854cfa505c891']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C1A90>]"
"2e89e73f37757bcad23c7929970c392a9ac4d48c","Fix About Paint dialog test failing due to version string changes  Make version info static when running in pytest.  I also tried adding in test_snapshots.py:      import textual_paint     textual_paint.__version__ = ""snapshot test edition 1""      import textual_paint.__init__ as init     init.__version__ = ""snapshot test edition 2""  which seemed to have no effect.  Since I already have special case logic for __version__ in __init__.py  I'm reasonably happy with this solution.","['9f12ba783394695bceeacfd132c7a53050295dac']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA25D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D164390>]"
"dbc8acaa39efde09585b8887bdf792d1d4966817","WIP: Try to fix premature closing of polygon  Try to prevent double click logic from triggering when mouse moves between first and second clicks significantly","['86a403eb80bb95f2f4d9d8584132b85cb21f1ed9']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE70D0>]"
"dedeedb12946a67153edccf28e6f73995fb18b77","Debug Polygon test by running interactively","['dbc8acaa39efde09585b8887bdf792d1d4966817']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA6810>]"
"8a2f4d6b726163e4ce2f3ac01da67091d9cbad82","WIP on stepwise undo app lifecycle  No error... until 30s passes. WaitForScreenTimeout: Timed out while waiting for widgets to process pending messages.","['74c3c49eb78bed28a6eed135d0b858c880ec6deb']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C633610>]"
"941b2b52e6046623f2391853c1d85f820d9b1d8f","Auto-save replay code for debugging purposes","['43ae6f73652e13bae111042c762d5b9fa30cc25b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D144310>]"
"a2e1b6cfd86dc2048d1c710bb8a1675c4c7f1ab5","Record events before they're handled normally  This might fix a race condition that lead to a `query` raising `NoMatches`  but this is just theoretical. Regardless  this seems like the way to go. Generating the selectors to match the clicked widget needs a view of the DOM before the widget is removed from it (or reordered in the DOM etc.)","['61c9b4e49e9fb51a1db64704db660378e6ddaef4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C03C50>]"
"402b46c7df481a6dabc1ad0a0efa80de152b44fa","Make failing to create a selector non-fatal","['d6d9ddba6792fbeda11969daef78a76b95239f61']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC38590>]"
"f62c8ff6c928792d61cd99e24b2caee3c118d5c8","Highlight active step during playback  I love when GitHub Copilot suggests code using an API (or language feature / idiom etc.) that I didn't even know about. More often it'll just make something up  but `highlight_lines` actually exists!  Anyways  I'm doing a hacky thing to get it to highlight lines of code during execution  prepending code (invisibly) to each line  except lines that would cause a syntax error.  Also  the steps view isn't updating reliably (even when adding steps).","['5e55846fb2b7009c67769bf10e8e03d717b45a4f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC39610>]"
"d6399022ee6c8cc428d94c97f4f0848948688e6f","Fix/cleanup test_text_tool_cursor_keys_and_color  - Fix `APP_PATH` reference error - Hold Ctrl to set the foreground color (modifiers not recorded yet) - DRY `pilot.press` - Use same terminal size as many other tests - Seven isn't spelt with a 2  but zero is! ;)","['3b76ba0997bb086d2e4a0a50f3265c74dd32b549']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D163B10>]"
"bb8e968f6c9758c01102646f47c8d82d6aa7d638","Test Free-Form Select off-screen melding bug","['48b15319da32192848014bd2dfe44261137dace4']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D18F3D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D566610>]"
"370b497cc6f674b960f5cde115f00d64c2947c5b","VS Code: Add launch configuration for debugging tests  I just want to disable the external code skipping feature (""justMyCode"") but I seem to have to abandon the pytest integration to do so?","['bb8e968f6c9758c01102646f47c8d82d6aa7d638']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C5C25D0>]"
"7f91138a63ffc82b56b4111541567459d5a3d01f","Use pyfakefs for file dialog tests  - The app's directory structure is not a constant  and shouldn't play into this test. Aside from codebase restructuring  directories like `__pycache__` can come and go. - Even if a temporary directory were created with files enough to fill the view  the scrollbar would still change based on the folder structure outside of the temporary folder. - pyfakefs is one way to ensure a consistent view of a folder structure for testing. It allows adding real folders in a readonly way. It's more complicated than I thought it would be going in  since I had to add workarounds for pyfiglet and pytest-textual-snapshot  and handle an edge case in my EnhancedDirectoryTree (which got an error which seems to be swallowed?)  not to mention pyfakefs raises an error saying ""No such file or directory in the fake filesystem"" when actually it's the real directory not existing when trying to add it to the fake filesystem  and VS Code was hiding stack frames and refusing to step into library code  and it turned out that I was resolving the absolute path wrong  but it looked right to me because the only part that was missing was ""textual-paint""  when  at a glance it seemed present  since the ""textual_paint"" part was present. Ay-ay-ay! - I don't know if this will fix the problem I saw where these tests' snapshots all changed with no visual or even structural changes  just the IDs of elements changing. I don't know what caused that.  Oh yeah and this is still actually a problem: ============================================= short test summary info ============================================== FAILED tests/test_snapshots.py::test_paint_open_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_open_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_unicode] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[light_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? FAILED tests/test_snapshots.py::test_paint_save_dialog[dark_ascii] - AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'? ========================== 8 failed  56 passed  1 xfailed  1 warning in 152.86s (0:02:32) ========================== It worked when running in debug  but not when running normally.","['370b497cc6f674b960f5cde115f00d64c2947c5b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D18FCD0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCA5ED0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCA7ED0>, <pydriller.domain.commit.ModifiedFile object at 0x0000026592C08FD0>]"
"dce55cd83306ecea2d0781578f8cfdea41b8a20f","Fix further errors with pyfakefs","['7f91138a63ffc82b56b4111541567459d5a3d01f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE5210>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D62FB90>, <pydriller.domain.commit.ModifiedFile object at 0x0000026592C12290>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D160850>]"
"d6705912b38603d35ed46e07f2095c0e1ace7ba2","Fix DirectoryTree retaining real pathlib access  This fixes the following error:      ----------------------------------------------- Captured stderr call -----------------------------------------------     ╭───────────────────── Traceback (most recent call last) ──────────────────────╮     │ /home/io/Projects/textual-paint/src/textual_paint/file_dialogs.py:86 in      │     │ on_mount                                                                     │     │                                                                              │     │    83 │   def on_mount(self) -> None:                                        │     │    84 │   │   """"""Called when the window is mounted.""""""                       │     │    85 │   │   self.content.mount(                                            │     │ ❱  86 │   │   │   EnhancedDirectoryTree(path=""/"")                            │     │    87 │   │   │   Horizontal(                                                │     │    88 │   │   │   │   Label(_(""File name:""))                                 │     │    89 │   │   │   │   Input(classes=""filename_input autofocus""  value=self._ │     │                                                                              │     │ ╭──────────────────── locals ────────────────────╮                           │     │ │ self = OpenDialogWindow(id='window_auto_id_0') │                           │     │ ╰────────────────────────────────────────────────╯                           │     │                                                                              │     │ in __init__:119                                                              │     │                                                                              │     │   116 │   │   self._load_queue: Queue[TreeNode[DirEntry]] = Queue()          │     │   117 │   │   super().__init__(                                              │     │   118 │   │   │   str(path)                                                  │     │ ❱ 119 │   │   │   data=DirEntry(self.PATH(path))                             │     │   120 │   │   │   name=name                                                  │     │   121 │   │   │   id=id                                                      │     │   122 │   │   │   classes=classes                                            │     │                                                                              │     │ ╭───────────────── locals ──────────────────╮                                │     │ │  classes = None                           │                                │     │ │ disabled = False                          │                                │     │ │       id = None                           │                                │     │ │     name = None                           │                                │     │ │     path = '/'                            │                                │     │ │     self = EnhancedDirectoryTree(         │                                │     │ │            │   id='some fake shit'        │                                │     │ │            │   name='some more fake shit' │                                │     │ │            )                              │                                │     │ ╰───────────────────────────────────────────╯                                │     │                                                                              │     │ in __new__:960                                                               │     │                                                                              │     │    957 │   def __new__(cls  *args  **kwargs):                                │     │    958 │   │   if cls is Path:                                               │     │    959 │   │   │   cls = WindowsPath if os.name == 'nt' else PosixPath       │     │ ❱  960 │   │   self = cls._from_parts(args)                                  │     │    961 │   │   if not self._flavour.is_supported:                            │     │    962 │   │   │   raise NotImplementedError(""cannot instantiate %r on your  │     │    963 │   │   │   │   │   │   │   │   │     % (cls.__name__ ))              │     │                                                                              │     │ ╭──────────── locals ─────────────╮                                          │     │ │   args = ('/' )                 │                                          │     │ │    cls = <class 'pathlib.Path'> │                                          │     │ │ kwargs = {}                     │                                          │     │ ╰─────────────────────────────────╯                                          │     │                                                                              │     │ in _from_parts:594                                                           │     │                                                                              │     │    591 │   │   # We need to call _parse_args on the instance  so as to get t │     │    592 │   │   # right flavour.                                              │     │    593 │   │   self = object.__new__(cls)                                    │     │ ❱  594 │   │   drv  root  parts = self._parse_args(args)                     │     │    595 │   │   self._drv = drv                                               │     │    596 │   │   self._root = root                                             │     │    597 │   │   self._parts = parts                                           │     │                                                                              │     │ ╭──────────────────────────── locals ─────────────────────────────╮          │     │ │ args = ('/' )                                                   │          │     │ │  cls = <class 'pathlib.Path'>                                   │          │     │ │ self = <repr-error ""'Path' object has no attribute '_flavour'""> │          │     │ ╰─────────────────────────────────────────────────────────────────╯          │     │                                                                              │     │ in _parse_args:587                                                           │     │                                                                              │     │    584 │   │   │   │   │   │   ""argument should be a str object or an os.Pat │     │    585 │   │   │   │   │   │   ""object returning str  not %r""                │     │    586 │   │   │   │   │   │   % type(a))                                    │     │ ❱  587 │   │   return cls._flavour.parse_parts(parts)                        │     │    588 │                                                                     │     │    589 │   @classmethod                                                      │     │    590 │   def _from_parts(cls  args):                                       │     │                                                                              │     │ ╭──────────── locals ────────────╮                                           │     │ │     a = '/'                    │                                           │     │ │  args = ('/' )                 │                                           │     │ │   cls = <class 'pathlib.Path'> │                                           │     │ │ parts = ['/']                  │                                           │     │ ╰────────────────────────────────╯                                           │     ╰──────────────────────────────────────────────────────────────────────────────╯     AttributeError: type object 'Path' has no attribute '_flavour'  ...which was itself masked by an error:      /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/_doc.py:136: in take_svg_screenshot         app.run(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1207: in run         asyncio.run(run_app())     /usr/lib/python3.10/asyncio/runners.py:44: in run         return loop.run_until_complete(main)     /usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete         return future.result()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1196: in run_app         await self.run_async(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1168: in run_async         await app._shutdown()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2186: in _shutdown         await self._close_all()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2166: in _close_all         await self._prune_node(stack_screen)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:2656: in _prune_node         await asyncio.gather(*close_messages)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:453: in _close_messages         await self._task     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:469: in _process_messages         await self._pre_process()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/message_pump.py:490: in _pre_process         self.app._handle_exception(error)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1822: in _handle_exception         self._fatal_error()     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/app.py:1827: in _fatal_error         traceback = Traceback(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:264: in __init__         trace = self.extract(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:449: in extract         locals={     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/traceback.py:450: in <dictcomp>         key: pretty.traverse(     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:852: in traverse         node = _traverse(_object  root=True)     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:647: in _traverse         args = list(iter_rich_args(rich_repr_result))     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/rich/pretty.py:614: in iter_rich_args         for arg in rich_args:     /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/widget.py:2516: in __rich_repr__         yield ""id""  self.id  None     _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _      self = <[AttributeError(""'EnhancedDirectoryTree' object has no attribute '_id'"") raised in repr()] EnhancedDirectoryTree object at     0x7f06b38c89d0>          @property         def id(self) -> str | None:             """"""The ID of this node  or None if the node has no ID.""""""     >       return self._id     E       AttributeError: 'EnhancedDirectoryTree' object has no attribute '_id'. Did you mean: 'id'?      /home/io/Projects/textual-paint/.venv/lib/python3.10/site-packages/textual/dom.py:483: AttributeError  ...which I worked around by adding class vars to EnhancedDirectoryTree:      _id = ""some fake shit""     _name = ""some more fake shit""  It was also a heisenbug. I was able to run the tests  even update snapshots  running in debug mode in VS Code.","['dce55cd83306ecea2d0781578f8cfdea41b8a20f']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA2490>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCA3690>]"
"96fe28269d63f9b103e0e30fb8f7cdfa1ef05673","Accept changes to file dialog snapshots  ...but NOT the Free-Form Select test! I'm noticing that when marked as skipped  running with --snapshot-update deletes the snapshot. So neither xfail or skip (or xfail with run=False) is a good solution. It's almost as if people don't normally do TDD with snapshots.  Anyways  HOPEFULLY I can move on now  to actually fixing things  like the Polygon tool  and new bugs I've found while adding tests.","['d6705912b38603d35ed46e07f2095c0e1ace7ba2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0F7B90>]"
"c538787ff25c16558e64cdd95e19b8ca33b04c7a","Recurse into subfolders for re-encoding round trip test  There are many more failures now  which I should probably take a look at at some point  but I don't know how to best inspect the changes yet. I'll mark these as xfail (expected to fail) for now.","['bb047c04e7e0877b1f6a771876def096e24b8bc2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C662250>]"
"9280dcdb92aba5e64225510746d2385184ceea32","Fix ASCII-only mode test failures","['3b247cde1a0b791f65076e70f8b65ed39b7a126b']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D566DD0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D564310>]"
"070e253394899b5b8e79bf2b1c393aceaa8b7a2c","Move fixtures to conftest.py","['9280dcdb92aba5e64225510746d2385184ceea32']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBE6FD0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D5674D0>]"
"b6d0d2cc7bf709423037cd6321dc72c109f98901","Delete debug scratchpad for polygon test","['bf8e445f69dc2431b7070f92a6226df3408b8af1']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D11D090>]"
"8cd164bb37d5441a916c8a68281fab3d6f874266","Fix preventing icon swaps during pytest  for Windows Terminal and Kitty  If git blame tools were smarter/easier to use  or if I was using a node-based programming paradigm  I would've never made this mistake. I would have done the natural and correct thing in the first place  but instead  I tried to avoid indenting a large block of code  which generates a noisy commit  and a barrier when using git blame.","['857e459b2dc9fa8f62868a60a23d16ba258cf893']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C0A050>]"
"b6e2c245a23690a0579e288b8994fdf55af26946","Get file dialog snapshot tests passing on Windows  Now it's just a few round trip tests failing  and maybe a flaky snapshot test for the character selector dialog.","['8cd164bb37d5441a916c8a68281fab3d6f874266']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D142350>]"
"fc1baa981595f7f0d46bce38e10e9911af47b3a2","Move imports so that Organize Imports doesn't break it  Before  if I ran Organize Imports in VS Code  it reordered things such that `sys.path.insert` was after the import that needed it. Now it's stable.","['b6e2c245a23690a0579e288b8994fdf55af26946']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D11EA90>]"
"0c44759b28285aa82901c63363e67624ad6c2be7","Refactor to avoid using negative coords to mean ""no mouse position""  My TODO comment said ""add an attribute to ToolPreviewUpdate or make it's x/y Optional""  which is both bad grammar (""it's"" vs ""its"") and a bad idea  since the Canvas isn't involved in this update  so its event definition shouldn't have to be complicated by it.  I like this much better  just splitting the event handler into two functions  giving room to express the optional nature of the coordinate in the signature  and avoiding constructing two message objects at both of the callsites.","['fc1baa981595f7f0d46bce38e10e9911af47b3a2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D1677D0>]"
"7a13659d48c98669b9aae3c9126447b649e71465","Fix ""Show Details"" not changing to ""Hide Details"" when expanding error","['0c44759b28285aa82901c63363e67624ad6c2be7']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D165050>, <pydriller.domain.commit.ModifiedFile object at 0x000002658C5C1CD0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D11DFD0>]"
"0791b1c0802c2c3a5fab2957b2709ed64714fa22","Satisfy the type checker  `PYRIGHT_PYTHON_FORCE_VERSION=1.1.327 pyright` now gives 0 errors  (before this commit it was 16 errors)","['a6b5cb31be570d09266d87cf16f55db347d8974c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D142490>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10C6D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10C790>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10C090>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10C490>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D136C50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D11FF10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D11C710>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D11C3D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658DBEE010>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D11F550>]"
"3944a6e40412744c6c5b7ed3e6650899f0980f65","Update textual to 0.31.0  DataTable now has `max-height: 100%` by default  which breaks my layout.","['938a320391493b302d49c130a88177645bf44d1e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D10D4D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10D550>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10D410>]"
"35a6845ab5c87432eb49a578ef08e7eaa1129a66","Update textual to 0.33.0  I had to fix the layout of a few dialogs where elements decided they wanted to start expanding a lot more than before. I'm guessing this has to do with the changelog entry:     ""Fixed relative units not always expanding auto containers""     https://github.com/Textualize/textual/pull/3059  The snapshot changes are basically bogus. The before and after are visually identical  with the difference view showing all black.  Since there were a lot of switches to toggle and I had to wait for the snapshot tests to run (slow!)  I wrote a little automation to toggle ""Show difference"" for all the results:      document.querySelectorAll(""#flexSwitchCheckDefault"").forEach((element)=> element.click())  It would be good to have this ability in the snapshot report UI itself  maybe even replacing the individual toggles  although I'm not sure about that  especially since it might be laggy toggling the blend modes with a lot of test results. (I suppose if that was really an issue  it could toggle all the visible test results and then toggle others as they come into view  though that's a bit more complex.)  As for understanding the structural changes to the snapshots  I tried making a visualization using hue  coloring according to the position of a rect within the list of rects:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const fraction = index / (rectElements.length - 1);             const cycles = 40;             const hue = fraction * cycles * 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });  This shows some difference  but it isn't very elucidating  since the structural changes only show as gradual shifts in the hue  and affect other rects even if said rects are identical  so it's subtle and messy.  Coloring based on a hash proves to actually highlight differences:      const richTerminals = document.querySelectorAll("".rich-terminal"");          richTerminals.forEach(function(terminal) {         const rectElements = terminal.querySelectorAll(""rect"");                  rectElements.forEach(function(rect  index) {             const hash = hash(rect.outerHTML);             const hue = (hash % 360 + 360) % 360;             rect.style.fill = `hsl(${hue}  100%  50%)`;         });     });          function hash(s) {         let hash = 0;         for (let i = 0; i < s.length; i++) {             const char = s.charCodeAt(i);             hash = (hash << 5) - hash + char;         }         return hash;     }  As for analyzing the differences now visible  eh  ""maybe later.""","['dd9da9cfb150b0060af3928d9071d17f6d2d6bb7']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C10B10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10D8D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10D990>]"
"40220e22d23f3421003b688efec76a6120c892b9","Fix flaky CharacterSelectorDialogWindow test (hopefully)  This should fix this failure:      FAILED tests/test_snapshots.py::test_paint_character_picker_dialog[dark_unicode] - textual.css.query.NoMatches: No nodes match <DOMQuery query='CharacterSelectorDialogWindow'>  I noticed this first in a Windows VM  and am now seeing it in Ubuntu  so it might have to do with the test running slowly. This was back on textual 0.28.0 by the way; it doesn't have to do with the recent updates (as far as I know; at least  not entirely.)  I've never had it reproduce when running in isolation with     pytest tests/test_snapshots.py::test_paint_character_picker_dialog  I tried adding a delay right before the query  and that DIDN'T work  I got the failure at least once with that in place  so I think it was failing to detect a double click  rather than querying while the window was in the process of opening  and so I decided to try increasing the double click threshold. The click() method of pilot has a cumulative artificial delay of 0.3s  so two clicks is at least 0.6s and it's not hard to imagine the event processing pushing that over 0.8s. I actually created the `DOUBLE_CLICK_TIME` to allow overriding it in tests  and I'm not sure if this actually works to override it.","['0225ea8780123e52dbf11370b0d1f2622ee6589c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4A9810>]"
"cd3137a7378ece5fb9ff85b4b558f4f0de744bc6","Use new Collapsible widget for error details","['2162ddd125fe8f2d9c7d68bddb33a2c35b62e5fd']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC7E3D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC7FF50>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC7DF10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CC7C150>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D10E4D0>]"
"3cc4d9ff5d404ca0cc4a305523dfb46beda58cdb","Cache Style objects for each cell in the document  This is not worth the complexity. It would be better to just change the document model to replace fg and bg with a 2D array of Style objects  so there's still a single source of truth.  This touches a LOT of code  and cache invalidation is classically known as a hard problem in programming.","['d4e08e136cff12baa4983d3b98dfb0f2def493ff']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBEF890>, <pydriller.domain.commit.ModifiedFile object at 0x0000026592C09E90>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCA2250>]"
"2fdb832dbd3fe187367660871744deadf9331f76","Fix type checker errors  Pyright doesn't understand that fill_style will never be changed  between its declaration and the inner function's scope.      error: Argument of type ""Color | None"" cannot be assigned to parameter ""b"" of type ""Color"" in function ""colors_match""       Type ""Color | None"" cannot be assigned to type ""Color""         Type ""None"" cannot be assigned to type ""Color"" (reportGeneralTypeIssues)","['d8206659c6ecdf9a82e2c3fd568f0e2ed272b5a2']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658DBED150>]"
"4a4012dbfd1525ea1fc77fbfa14c2dbc1e68cc30","Update pyright version  There are no new errors or anything.  This silenced error is no longer generated:   /home/io/Projects/textual-paint/src/textual_paint/wallpaper.py:241:18 - error: Stub file not found for ""xdg"" (reportMissingTypeStubs)","['da7f29177dafdd69322a8037590859ad10d0cb7a']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC7D410>, <pydriller.domain.commit.ModifiedFile object at 0x000002658CCA0210>]"
"0baed2d8191ad98c5ee7c63a849e5f996981ce6e","VS Code: disable indentation detection to avoid future inconsistency","['4375c518e43936506b29759c67f3e456c35af463']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0F77D0>]"
"68e52ec30e1f591263cf7c8b879bf13b53caacdd","Rename file to avoid pytest discovery  This file was being automatically executed on (unrelated) file changes  via this command line:     .venv\Scripts\python.exe -m pytest -p vscode_pytest --collect-only","['ade8d115cf7bd749d4f19402f7c48df573f25690']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D11CB50>]"
"40b2b1b1a1b02a7086564d454bf4be790fda4e21","Catch ImportError to tweak error message","['c88812ff579f14a0a1d3c2531541c03514540d95']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D10EB50>]"
"fc269f3a90eafd16a732c95085dff60b1c8815a7","Update watchdog to 6.0.0  Doesn't fix ignore patterns not working on Windows.","['2a3c3f2d1d206bceac9edc82ec244fa66b9b7ef3']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D100090>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D1001D0>]"
"b0e478cae08949ed9045165a675c703f698ba2ec","Fix errors when interacting with command palette","['9f285f2d9df8135087d545aea7978f333c5a077c']","False","[<pydriller.domain.commit.ModifiedFile object at 0x0000026592C027D0>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D101050>]"
"e519ad4613dada1ca9b14453ede5d48bb3c61824","Add to known issues list","['1a4eab97de242d820a1b256dd47e92d51a716ca5']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA2390>]"
"93abb6f87108f8c78d1143d864579522c7f4e288","Remove todo for issue that I can't reproduce","['35860fbe1b3941883c1fe844abf811d5a0ca3a75']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC39750>]"
"4edd5ab4d781e2e2091d40736ea17282abc95279","Note worse variation of menu scrolling issue","['24ea6ea260a5a34317b48d5afc6a6cf995b23b70']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CC3B2D0>]"
"0a0d509cd2db45920793f803d24429134f42f99d","Update test snapshots  I added another ANSI art sample  which now shows up in the gallery app's snapshot  invalidating the test. Maybe I should stop adding sample art. Or better yet  I should create a separate folder with just two files so that I can add sample art freely without breaking the tests:   - one file that's small and centered   - one file that's large with scrollbars  `pytest --snapshot-update`","['d5448db34e4173bf0820282f64b0fcb7e55eb11e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0BD810>]"
"4387c07e7ba52b4b801bdd71f6514b445414904d","Save plain text with CRLF on Windows  fixing round-trip tests  The line endings of *.txt files are currently managed by git  as specified in `.gitattributes`  which means they're checked out as CRLF on Windows. I could either change the test to replace CRLF with LF in the expected file content  or change `.gitattributes`  or change the file saving itself to save different line endings per platform  and the latter feels a bit better to me. Eventually it would be good to support different line endings per file as well as different encodings  with some auto-detection and a way to override the settings and reload.","['0a0d509cd2db45920793f803d24429134f42f99d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658C4DAF10>, <pydriller.domain.commit.ModifiedFile object at 0x000002658D18F290>]"
"7ced8fc50b7d62f07ffb4c1c7c9170d3562ae5e6","Add launch configuration to debug pip install","['a2d117cd6961d67121524c960788f219b7c03dbd']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0BDA10>]"
"4b390d884b0615a238edffa34269ee56d562c5bc","Fix regression where CharInput defaults to focused  Originally the File menu was getting the default focus  though this was not useful because the menus are not keyboard accessible yet  but when I made the menu items not accept focus  the auto focus behavior became to focus the CharInput  causing `pytest -k test_paint_app` to fail. No focus makes more sense than the File menu item or the CharInput.","['fa4d961fb4f83b875acd1d86b8665d20cfcd5f0e']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658D0BD290>]"
"9eae8a19e1a3de6bddb808e52cd49cea520992bd","Note issue with multiple blinking cursors","['2ae77c15d0c383ba1f871af6a594665b896a132d']","False","[<pydriller.domain.commit.ModifiedFile object at 0x000002658CCA2A50>]"
